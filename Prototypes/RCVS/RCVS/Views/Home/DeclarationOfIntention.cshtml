@model RCVS.Models.DeclarationOfIntentionModel

<div class="wysiwyg">

	@{
		ViewBag.Title = "Initial / first declaration of intention to sit";
		Layout = "~/Views/Shared/_Layout.cshtml";
	}

	<h1>Initial / first declaration of intention to sit</h1>

	<div class="layout">
		<p>
			<span>You can submit your initial declaration of intention to sit the RCVS statutory membership examination at any time.  It is the first step in the examination process.  On receipt RCVS will create an examination record for you and, if you have stated that you plan to see practice as part of your examination preparation, we shall write to confirm that you are eligible to do so. 
			</span>
		</p>
		<br />
	</div>
	@using (Html.BeginForm("DeclarationOfIntention", "Home", FormMethod.Post, new { enctype = "multipart/form-data", @class = "forms default" }))
 {
		@Html.AntiForgeryToken()
		@Html.ValidationSummary(true)

@*@Html.DropDownListFor(x => x.Activities, Model.Activities)			*@
		
		<fieldset>
			<legend>Choose examination year</legend>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.YearsDropdown)
				</div>
				<div class="editor-field input">
					@Html.DropDownListFor(x => x.YearToSit, Model.YearsDropdown)
					@Html.ValidationMessageFor(model => model.YearsDropdown)
				</div>
			</div>
		</fieldset>

		<fieldset>
			<legend>Will you see practice?</legend>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.PlanToSeePractice)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.PlanToSeePractice)
					@Html.ValidationMessageFor(model => model.PlanToSeePractice)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.CurrentlySeeingPractice)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.CurrentlySeeingPractice)
					@Html.ValidationMessageFor(model => model.CurrentlySeeingPractice)
				</div>
			</div>
		</fieldset>

		<fieldset>
			<legend>International English Language Testing System (IELTS)</legend>
			<div class="layout">
				<p>
					<span>Before you can apply for examination, you must send your original IELTS test report form (TRF) to RCVS so that we can verify your score and confirm that you have met the RCVS English language competence requirement.
					</span>
				</p>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.IELTS)
				</div>
				<div class="editor-field input">
					@Html.TextBoxFor(model => model.IELTS, new { type = "file" })
					@Html.ValidationMessageFor(model => model.IELTS)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.TakeTestPlanDate)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.TakeTestPlanDate)
					@Html.ValidationMessageFor(model => model.TakeTestPlanDate)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.TrfDetails)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.TrfDetails)
					@Html.ValidationMessageFor(model => model.TrfDetails)
				</div>
			</div>

		</fieldset> 
		 
		<fieldset>
			<legend>Veterinary Qualification</legend>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.PrimaryVeterinaryDegree)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.PrimaryVeterinaryDegree)
					@Html.ValidationMessageFor(model => model.PrimaryVeterinaryDegree)
				</div>
			</div>

			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.UniversityThatAwardedDegree.Name, "University which awarded your veterinary degree. Name")
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.UniversityThatAwardedDegree.Name)
					@Html.ValidationMessageFor(model => model.UniversityThatAwardedDegree.Name)
				</div>
			</div>

			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.UniversityThatAwardedDegree.City)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.UniversityThatAwardedDegree.City)
					@Html.ValidationMessageFor(model => model.UniversityThatAwardedDegree.City)
				</div>
			</div>

			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.UniversityThatAwardedDegree.CountriesDropdown)
				</div>
				<div class="editor-field input">
					@Html.DropDownListFor(x => x.UniversityThatAwardedDegree.Country, Model.UniversityThatAwardedDegree.CountriesDropdown)
					@Html.ValidationMessageFor(model => model.UniversityThatAwardedDegree.CountriesDropdown)
				</div>
			</div>

			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.GraduationDate)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.GraduationDate)
					@Html.ValidationMessageFor(model => model.GraduationDate)
				</div>
			</div>

			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.CourseStartDate)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.CourseStartDate)
					@Html.ValidationMessageFor(model => model.CourseStartDate)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.CourseEndDate)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.CourseEndDate)
					@Html.ValidationMessageFor(model => model.CourseEndDate)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.NormalCourseLengthDropdown)
				</div>
				<div class="editor-field input">
					@Html.DropDownListFor(x => x.NormalCourseLength, Model.NormalCourseLengthDropdown)
					@Html.ValidationMessageFor(model => model.NormalCourseLengthDropdown)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.HasEnclosedTranscript)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.HasEnclosedTranscript)
					@Html.ValidationMessageFor(model => model.HasEnclosedTranscript)
				</div>
			</div>
			<div class="field">
				<div class="editor-label label">
					@Html.LabelFor(model => model.EnclosedTranscript)
				</div>
				<div class="editor-field input">
					@Html.EditorFor(model => model.EnclosedTranscript)
					@Html.ValidationMessageFor(model => model.EnclosedTranscript)
				</div>
			</div>

		</fieldset>
		<p>
			<input type="submit" value="Create" class="input_submit" />
		</p>
 }

	<div>
		@Html.ActionLink("Back to List", "Index")
	</div>

	@section Scripts {
		@Scripts.Render("~/bundles/jqueryval")
		@Scripts.Render("~/bundles/jqueryui")
	}

</div>

<script type="text/javascript">
	$(document).ready(function ()
	{
		$('#TakeTestPlanDate').val($('#TakeTestPlanDate').val().substring(0, 10));  //Remove the hour from the date
		//Attach datepicker
		$('#TakeTestPlanDate').datepicker({
			dateFormat: "dd/mm/yy",
			changeMonth: true,
			changeYear: true,
			yearRange: "-80:+0"
		});

		$('#TrfDetails_DateOfTest').val($('#TrfDetails_DateOfTest').val().substring(0, 10)); //Remove the hour from the date
		//Attach datepicker
		$('#TrfDetails_DateOfTest').datepicker({
			dateFormat: "dd/mm/yy",
			changeMonth: true,
			changeYear: true,
			yearRange: "-80:+0"
		});

		$('#GraduationDate').val($('#GraduationDate').val().substring(0, 10));  //Remove the hour from the date
		//Attach datepicker
		$('#GraduationDate').datepicker({
			dateFormat: "dd/mm/yy",
			changeMonth: true,
			changeYear: true,
			yearRange: "-80:+0"
		});

		$('#CourseStartDate').val($('#CourseStartDate').val().substring(0, 10));  //Remove the hour from the date
		//Attach datepicker
		$('#CourseStartDate').datepicker({
			dateFormat: "dd/mm/yy",
			changeMonth: true,
			changeYear: true,
			yearRange: "-80:+0"
		});

		$('#CourseEndDate').val($('#CourseEndDate').val().substring(0, 10));  //Remove the hour from the date
		//Attach datepicker
		$('#CourseEndDate').datepicker({
			dateFormat: "dd/mm/yy",
			changeMonth: true,
			changeYear: true,
			yearRange: "-80:+0"
		});

		//only allow certain types of file to be uploaded.
		$('[type="file"]').change(function () {			
			var ext = $(this).val().split('.').pop().toUpperCase();
			if ($.inArray(ext, ['PDF', 'TIF', 'XLS', 'HTML', 'DBF', 'JPG', 'XLSX', 'TXT', 'BMP', 'DOCX', 'DOC', 'CVW', 'WRI']) == -1) {
				alert("Only the following file types are supported:\n'PDF', 'TIF', 'XLS', 'HTML', 'DBF', 'JPG', 'XLSX', 'TXT', 'BMP', 'DOCX', 'DOC', 'CVW', 'WRI'\n\nPlease choose another.");				
			}
		});

	});
</script>
