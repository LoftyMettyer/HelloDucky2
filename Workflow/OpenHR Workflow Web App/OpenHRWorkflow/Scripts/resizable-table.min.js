function preventEvent(n) { var t = n || window.event; return t.preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation && t.stopPropagation(), !1 } function getStyle(n, t) { var i; return n.currentStyle ? i = n.currentStyle[t] : window.getComputedStyle && (i = document.defaultView.getComputedStyle(n, null).getPropertyValue(t)), i } function getWidth(n) { var t; return n.currentStyle ? t = n.clientWidth - parseInt(n.currentStyle.paddingLeft) - parseInt(n.currentStyle.paddingRight) : window.getComputedStyle && (t = document.defaultView.getComputedStyle(n, null).getPropertyValue("width")), t || 0 } function setCookie(n, t, i, r, u, f) { document.cookie = n + "=" + escape(t) + (i ? "; expires=" + i : "") + (r ? "; path=" + r : "") + (u ? "; domain=" + u : "") + (f ? "; secure" : "") } function getCookie(n) { var i = " " + document.cookie, u = " " + n + "=", f = null, t = 0, r = 0; return i.length > 0 && (t = i.indexOf(u), t != -1 && (t += u.length, r = i.indexOf(";", t), r == -1 && (r = i.length), f = unescape(i.substring(t, r)))), f } function ColumnResize(table) { var u = "px", r = !1, n = this, self, dragColumns, GridID, dragColumns2, dragColumnNo, dragX, saveOnmouseup, saveOnmousemove, saveBodyCursor, i; if (table.tagName == "TABLE" && (n.id = table.id, self = n, dragColumns = table.rows[0].cells, dragColumns) && (GridID = table.id.replace("Header", "Grid"), eval(document.getElementById(GridID)))) for (dragColumns2 = document.getElementById(GridID).rows[0].cells, n.changeColumnWidth = function (n, t) { var i = "50px"; return dragColumns ? n < 0 ? r : dragColumns.length < n ? r : parseInt(dragColumns[n].style.width) < 50 ? (w1 = 50 - parseInt(dragColumns[n].style.width), dragColumns[n].style.width = i, dragColumns2[n].style.width = i, dragColumns[n + 1] && (dragColumns[n + 1].style.width = parseInt(dragColumns[n + 1].style.width) - w1 + u, dragColumns2[n + 1].style.width = parseInt(dragColumns2[n + 1].style.width) - w1 + u), !0) : parseInt(dragColumns[n + 1].style.width) < 50 ? (w1 = 50 - parseInt(dragColumns[n + 1].style.width), dragColumns[n + 1].style.width = i, dragColumns2[n + 1].style.width = i, dragColumns[n] && (dragColumns[n].style.width = parseInt(dragColumns[n].style.width) - w1 + u, dragColumns2[n].style.width = parseInt(dragColumns2[n].style.width) - w1 + u), !0) : parseInt(dragColumns[n].style.width) <= -t ? r : dragColumns[n + 1] && parseInt(dragColumns[n + 1].style.width) <= t ? r : (dragColumns[n].style.width = parseInt(dragColumns[n].style.width) + t + u, dragColumns2[n].style.width = parseInt(dragColumns2[n].style.width) + t + u, dragColumns[n + 1] ? (dragColumns[n + 1].style.width = parseInt(dragColumns[n + 1].style.width) - t + u, dragColumns2[n + 1].style.width = parseInt(dragColumns2[n + 1].style.width) - t + u, !0) : void 0) : r }, n.columnDrag = function (n) { var n = n || window.event, t = n.clientX || n.pageX; return self.changeColumnWidth(dragColumnNo, t - dragX) || self.stopColumnDrag(n), dragX = t, preventEvent(n), r }, n.stopColumnDrag = function (n) { var n = n || window.event, u, r, t, i; if (dragColumns) { for (document.onmouseup = saveOnmouseup, document.onmousemove = saveOnmousemove, document.body.style.cursor = saveBodyCursor, u = "", r = "", t = 0; t < dragColumns.length; t++) u += r + parseInt(getWidth(dragColumns[t])), r = "+"; i = new Date, i.setDate(i.getDate() + 365), document.cookie = self.id + "-width=" + u + "; expires=" + i.toGMTString(), preventEvent(n) } }, n.startColumnDrag = function (n) { var n = n || window.event, i, t; for (dragColumnNo = (n.target || n.srcElement).parentNode.parentNode.cellIndex, dragX = n.clientX || n.pageX, i = [], t = 0; t < dragColumns.length; t++) i[t] = parseInt(getWidth(dragColumns[t])); for (t = 0; t < dragColumns.length; t++) dragColumns[t].width = "", dragColumns[t].style.width = i[t] + u, dragColumns2[t].width = "", dragColumns2[t].style.width = i[t] + u; saveOnmouseup = document.onmouseup, document.onmouseup = self.stopColumnDrag, saveBodyCursor = document.body.style.cursor, document.body.style.cursor = "w-resize", saveOnmousemove = document.onmousemove, document.onmousemove = self.columnDrag, preventEvent(n) }, i = 0; i < dragColumns.length; i++) dragColumns[i].innerHTML = "<div style='position:relative;text-overflow:ellipsis;height:100%;width:98%'><div onclick='event.cancelBubble=true;' style='position:absolute;height:100%;width:5px;margin-right:-5px;left:100%;top:0px;cursor:w-resize;z-index:10;'></div>" + dragColumns[i].innerHTML + "</div>", dragColumns[i].firstChild.firstChild.onmousedown = n.startColumnDrag } function ResizableColumns() { for (var t = document.getElementsByTagName("table"), n = 0; t.item(n); n++) t[n].className.match(/resizable/) && (t[n].id || (t[n].id = "table" + (n + 1)), resizableTables[resizableTables.length] = new ColumnResize(t[n])) } function filterTable(n, t) { var h = "display: none", c = n.value, r, f, i, s, u, o, e; if (c == "filter page...") return !1; for (r = document.getElementById(t), dehighlight(r), f = n.value.toLowerCase().split(" "), i = 0; i < r.rows.length; i++) for (s = "", u = 0; u < f.length; u++) o = r.rows[i].innerHTML.toLowerCase(), e = o.indexOf(h) < 0 ? r.rows[i].innerHTML.substring(0, o.indexOf("display:none")) + ">" : r.rows[i].innerHTML.substring(0, o.indexOf(h)) + ">", e = e.replace(/&amp;/g, "&").replace(/&nbsp;/g, " "), e.replace(/<[^>]+>/g, "|").toLowerCase().indexOf(f[u]) < 0 ? s = "none" : f[u].length && highlight(f[u], r.rows[i]), r.rows[i].style.display = s } function dehighlight(n) { for (var t, i = 0; i < n.childNodes.length; i++) { if (t = n.childNodes[i], t.attributes && t.attributes["class"] && t.attributes["class"].value == "highlighted") { t.parentNode.parentNode.replaceChild(document.createTextNode(t.parentNode.innerHTML.replace(/<[^>]+>/g, "").replace(/&amp;/g, "&").replace(/&nbsp;/g, " ")), t.parentNode); return } t.nodeType != 3 && dehighlight(t) } } function highlight(n, t) { for (var r, i, e, u, f, o = 0; o < t.childNodes.length; o++) if (r = t.childNodes[o], r.nodeType == 3) { if (i = r.data, e = i.toLowerCase(), e.indexOf(n) >= 0) { for (u = document.createElement("span"), r.parentNode.replaceChild(u, r); (f = e.indexOf(n)) != -1; ) u.appendChild(document.createTextNode(i.substr(0, f))), u.appendChild(create_node(document.createTextNode(i.substr(f, n.length)))), i = i.substr(f + n.length), e = e.substr(f + n.length); u.appendChild(document.createTextNode(i)) } } else highlight(n, r) } function create_node(n) { var i = "highlighted", t = document.createElement("span"); return t.setAttribute("class", i), t.attributes["class"].value = i, t.appendChild(n), t } var resizableTables = [], t, form, input; try { window.addEventListener("load", ResizableColumns, !1) } catch (e) { window.onload = ResizableColumns } for (tables = document.getElementsByTagName("table"), t = 0; t < tables.length; t++) element = tables[t], element.attributes["class"] && element.attributes["class"].value == "resizable" && (form = document.createElement("form"), form.setAttribute("class", "filter"), form.attributes["class"].value = "filter", input = document.createElement("input"), input.onkeyup = function () { filterTable(input, element) }, form.appendChild(input), element.parentNode.insertBefore(form, element));