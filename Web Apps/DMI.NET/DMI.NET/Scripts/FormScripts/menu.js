//Global variables
if (typeof window.top.rowWasModified === 'undefined') {
	window.top.rowWasModified = false;
	window.top.onbeforeunload = null;
}

var saveThisRowToDatabase = true;

function menu_window_onload() {
	var iLoop;
	var iVisibleCount;

		//Hide menu subitems until it's been set up. NB the application of the JSTree plug-in makes them visible again.
		$("#contextmenu ul").hide();

	//call the three functions that were generated by menu.ascx
	window.refreshDatabaseMenu();
	window.refreshQuickEntryMenu();
	window.refreshTableScreensMenu();
	window.menuErrorShown = false;

	//add onclick to all the menuitems.
	$(document).on("click", "#contextmenu a", function () {
		var pTool = ($(this).closest("li").attr("id"));
		menu_abMainMenu_Click(pTool);
	});
		
	//add onclick to all ribbon items.
	$(document).on("click", ".officetab a", function () {
			var pTool = ($(this).closest("div").attr("id"));	    
			menu_abMainMenu_Click(pTool);
	});

	//Add onclick to user dropdown menu items
	$("#userDropdownmenu li a").on('click', function (e) {
		var pTool = $(this).attr("id");
		if (pTool == null) {
			return true; //We need to return true instead of false because some menu items (such as Change layout) call a Javascript function, and if we return false here that function won't be called
		}
		menu_abMainMenu_Click(pTool);
	});
	
	//Add accordion functionality to the context menu
	$(".accordion").accordion({
			autoHeight: 'content',
			heightStyle: "fill",
			icons: false
	});

		//apply tree control to divs within accordion
		applyJSTree();

	//Go To input box functionality
	$("#txtLocateRecordFind").keypress(function (e) {
		if (e.keyCode == 13) { //If ENTER was pressed...
			//At this point, since we are handling the keypress event, the textbox doesn't contain the latest key pressed,
			//so the function below will get the value and call the appropriate screen
			ReloadPageWithFindTerm();
		}
	});

	if ($("#txtErrorDescription").val().length > 0) {
		//ASRIntranetFunctions.MessageBox(window.txtErrorDescription.value, 0, "OpenHR"); // 0 = vbOKonly
		OpenHR.messageBox(window.txtErrorDescription.value, 0, "OpenHR"); // 0 = vbOKonly
		window.parent.location.replace("login");
	}
	else {
		//The following values don't seem to be used in the solution. I'll rem it. Might be in the activeX stuff.
		//ASRIntranetFunctions.LC_SaveSettingsToRegistry(txtCFG_PCL.value, txtCFG_BA.value, txtCFG_RT.value, txtCFG_LD.value);

		//TODO check for existence of menu control/page I guess.
		//		if (abMainMenu == null) {
		//			// The menu control was not loaded properly.
		//			ASRIntranetFunctions.MessageBox("Menu control not loaded.", 0, "OpenHR"); // 0 = vbOKOnly
		//			window.parent.location.replace("login.asp");
		//		}
		//		else {

		//Load the standard menu options into the menubar.
		//DON'T NEED - STYLING IS CSS NOW.
		//setMenuFont(abMainMenu);

		//Forces the ActiveBar to initialize and attach itself to the current form.
		//DON'T NEED - PART OF MENU.ASCX NOW
		//abMainMenu.Attach();

		//Starts an asynchronous download of a layout file
		//DON'T NEED - THE TEMPLATED CONTENT IS NOW IN MENU.ASCX
		//abMainMenu.DataPath = "misc\\mainmenu.htm";



		//When asynchronous data download is complete (.DataPath event) it fires the DataReady Function, so call that now.		
		setTimeout("$(menu_abMainMenu_DataReady())", 0);


		//Refreshes toolbars display and layout after modifying any of the properties at runtime.
		//DON'T NEED.
		//abMainMenu.RecalcLayout();
		//		}
	}
}


function ReloadPageWithFindTerm() {
	var sCurrentWorkPage = OpenHR.currentWorkPage();
	var sLocateValue = $("#txtLocateRecordFind").val();
	
	if (sLocateValue == "") {
		return false;
	}

	if (sCurrentWorkPage == "FIND") {
		menu_reloadFindPage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "LINKFIND") {
		menu_reloadLinkPage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "LOOKUPFIND") {
		menu_reloadLookupPage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
		menu_reloadTransferCoursePage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "TBBOOKCOURSEFIND") {
		menu_reloadBookCoursePage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") {
		menu_reloadTransferBookingPage("LOCATE", sLocateValue);
	}
	if (sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND") {
		menu_reloadAddFromWaitingListPage("LOCATE", sLocateValue);
	}
}

function menu_abMainMenu_DataReady() {

	//Disable/Hide menu items that are irrelevent for this user...
	menu_refreshMenu();

	if (OpenHR.currentWorkPage() == "DEFAULT") {
		OpenHR.postData("WorkflowOutOfOffice_Check", { __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val() }, menu_OutOfOfficeTurnOff);
	}

	//Set up search box with all available/accessible options in the menu.
	var availableTags = [];

	$('.accordion').find('a').each(function () {
		var menuItem = $(this).text();
		var menuTarget = $(this).parent().attr('id');
		var includeThisItem = true;
		var fCanSeeLookupTableMenu = true;

		if ($("#txtSysPerm_MENU_VIEWLOOKUPTABLES").val() == 0) {
			fCanSeeLookupTableMenu = false;
		}

		if ($(this).hasClass("disabled") === true) includeThisItem = false; //no disabled items
		if ($(this).parent().hasClass("hidden") === true) includeThisItem = false; //no hidden items
		if ($(this).siblings(".ui-icon-triangle-1-e").length > 0) includeThisItem = false;	//no expandable menu items
		if (($(this).closest("ul").attr("id") === "mnubandTableScreens") && !fCanSeeLookupTableMenu) includeThisItem = false;	//no hidden lookup table screens

		if (includeThisItem)
			availableTags.push({ label: menuItem, targetvalue: menuTarget });
	});

	$("#menuSearch").autocomplete({
		source: function (request, response) {
			var results = $.ui.autocomplete.filter(availableTags, request.term);
			response(results.slice(0, 20));	//show first 20 items maximum
		},
		select: function (event, ui) {
			menu_abMainMenu_Click(ui.item.targetvalue); 
			this.value = "";	//reset search value
			return false;
		},
		position: { my: "left bottom", at: "left top", collision: "flip" }	//open upwards
	});
}

function menu_abMainMenu_Click(pTool) {

	//Reject clicks from elements with disabled class.
	if ($("#" + pTool + " a:first").hasClass("disabled") == true) {
		$("#" + pTool + " a:first").removeClass("ui-state-active");	//don't highlight disabled items.
		return false;
	} 

	menu_MenuClick(pTool);
	return true;
}

function menu_MenuClick(sTool) {

	//ignore clicks from 'fixed links' which have no 'id'.
	if (!sTool) return false;
	//new ribbon buttons for utils - ignore click.
	if (sTool.substr(sTool.length - 4).toLowerCase() == "util") return false;

	// Perform the selected menu action.
	var lngRecordID;
	var lngTableID;
	var lngViewID;
	var lngOrderID;
	var lngScreenID;
	var sSubString;
	var sLineage;
	var lngParentRecordID;
	var lngParentTableID;
	var sCurrentWorkPage;
	var frmRefresh;
	var frmDataArea;
	var frmRecEditArea;
	var frmWorkArea;
	var frmFindArea;
	var sToolName;
	var frmData;
	var sToolNameKey;
	var hasChanged;

	hasChanged = -1;
	
	$('.ViewDescription p').text('');

	//added for non-IE compatibility
	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	sToolName = sTool;
	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "FIND") {
		try {
			if (window.top.rowWasModified) {
				//Inform the user that they have unsaved changes on the Find window
				OpenHR.modalMessage("You have unsaved changes.<br/><br/>Please action them before navigating away.");
				return false;
			} else {
				if (rowIsEditedOrNew != "") {
					$('#findGridTable_ilcancel').click();
				}
			}
		}
		catch (e) { //continue with navigation 
		}
	}


	//close History menu if navigating away
	if ($('#' + sTool).hasClass('jstree-leaf')) {
		//context menu item clicked. What group is it in?
		var clickGroup = $('#' + sTool).closest('div').prev().text();
		//remove history menu if clicking away.
		if ((clickGroup != "History") && ($('#mnutoolHistory:visible').length > 0)) menu_setVisibleMenuItem('mnutoolHistory', false);
	}

	//Remapping of menu click ID's for menu refactor.

	// Fixed Links ---------------------------------------------------------------------------------------------------

	if (sToolName == "mnutoolFixedSelfService") {

		saveChangesPrompt('mnutoolFixedSelfService', 'window.location.href = "MainSSI"');

		//hasChanged = menu_saveChanges(sToolName, true, false);
		//if (hasChanged == 0) { // Prompt for navigation

		//	OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
		//		if (answer == 1) { // OK
		//			window.location.href = "MainSSI";
		//			return false;
		//		} else {
		//			return false;
		//		}
		//	});
		//} else {
		//	window.location.href = "MainSSI";
		//}
		return false;
	}

	if (sToolName == "mnutoolFixedLogoff") {
		return false;
	}

	if (sToolName == "mnutoolFixedOpenHR") { 
		saveChangesPrompt(sToolName, 'window.location.href = "MainDMI"');
		//hasChanged = menu_saveChanges(sToolName, true, false);
		//if (hasChanged == 0) { // Prompt for navigation

		//	OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
		//		if (answer == 1) { // OK
		//			window.location.href = "MainDMI";
		//			return false;
		//		} else {
		//			return false;
		//		}
		//	});
		//} else {
		//	window.location.href = "MainDMI";
		//}
		return false;
	}

	if (sToolName == "mnutoolFixedLayout") { // This already has an href target defined in fixedlinks. No action here
		return false;
	}

	if (sToolName == "mnutoolFixedAbout") { // This already has an href target defined in fixedlinks. No action here
		return false;
	}
	
	if (sToolName == "mnutoolFixedPasswordChange") {
		if (menu_isSSIMode()) {
			relocateURL('PasswordChange');
			return false;
		} else {
			$("#mnutoolHistory").hide();
			$("[aria-labelledby='mnutoolHistory']").hide();
			$("#mnutoolAdministration").click();
			sToolName = 'mnutoolPasswordChange';
		}
	}

	if (sToolName == "mnutoolFixedPWFS") {
		if (menu_isSSIMode()) {
			javascript: relocateURL('WorkflowPendingSteps', 0);
			return false;
		} else {
			$("#mnutoolHistory").hide();
			$("[aria-labelledby='mnutoolHistory']").hide();
			$("#mnutoolAdministration").click();
			sToolName = 'mnutoolWorkflowPendingSteps';
		}
	}
	
	if (sToolName == "mnutoolMFRecord") {
			
		toggleMandatoryColumns();			
			
		return false;
	}

	if (sToolName == "mnutoolCurrentUsers") {
		$("#divCurrentUsers").dialog("open");
		return false;
	}


	//------------------------DEFSEL----------------------------//
	//NEW buttons
	if ((sToolName == 'mnutoolNewReportFind') || (sToolName == 'mnutoolNewUtilitiesFind') || (sToolName == 'mnutoolNewToolsFind')) {
		try {		
			showDefaultRibbon();
			setnew();
			$("#toolbarReportNewEditCopy").parent().show();
			$("#toolbarReportNewEditCopy").click();
			switch (sToolName) {
				case 'mnutoolNewReportFind':
					$('#toolbarReportNewEditCopy').text('Report');
					break;
				case 'mnutoolNewUtilitiesFind':
					$('#toolbarReportNewEditCopy').text('Utility');
					HideToolsRibbonButtons();
					break;
				case 'mnutoolNewToolsFind':
					$('#toolbarReportNewEditCopy').text('Tools');
					HideToolsRibbonButtons();
					break;
			}
		} catch (e) {
		} finally {
			return false;
		}
	}

	//COPY buttons
	if ((sToolName == 'mnutoolCopyReportFind') || (sToolName == 'mnutoolCopyUtilitiesFind') || (sToolName == 'mnutoolCopyToolsFind')) {
		try {
			showDefaultRibbon();
			setcopy();
			$("#toolbarReportNewEditCopy").parent().show();
			$("#toolbarReportNewEditCopy").click();
			switch (sToolName) {
				case 'mnutoolCopyReportFind':
					$('#toolbarReportNewEditCopy').text('Report');
					break;
				case 'mnutoolCopyUtilitiesFind':
					$('#toolbarReportNewEditCopy').text('Utility');
					HideToolsRibbonButtons();
					break;
				case 'mnutoolCopyToolsFind':
					$('#toolbarReportNewEditCopy').text('Tools');
					HideToolsRibbonButtons();
					break;
			}
		} catch (e) {
		} finally {
			return false;
		}
	}

	//EDIT buttons
	if ((sToolName == 'mnutoolEditReportFind') || (sToolName == 'mnutoolEditUtilitiesFind') || (sToolName == 'mnutoolEditToolsFind')) {
		try {
			showDefaultRibbon();
			setedit();
			$("#toolbarReportNewEditCopy").parent().show();
			$("#toolbarReportNewEditCopy").click();
			switch (sToolName) {
				case 'mnutoolEditReportFind':
					$('#toolbarReportNewEditCopy').text('Report');
					break;
				case 'mnutoolEditUtilitiesFind':
					$('#toolbarReportNewEditCopy').text('Utility');
					HideToolsRibbonButtons();
					break;
				case 'mnutoolEditToolsFind':
					$('#toolbarReportNewEditCopy').text('Tools');
					HideToolsRibbonButtons();
					break;
			}
		} catch (e) {
		} finally {
			return false;
		}
	}

	//DELETE buttons
	if ((sToolName == 'mnutoolDeleteReportFind') || (sToolName == 'mnutoolDeleteUtilitiesFind') || (sToolName == 'mnutoolDeleteToolsFind')) {
		try {
			setdelete();
		} catch (e) {
		} finally {
			return false;
		}
	}

	//PROPERTIES buttons
	if ((sToolName == 'mnutoolPropertiesReportFind') || (sToolName == 'mnutoolPropertiesUtilitiesFind') || (sToolName == 'mnutoolPropertiesToolsFind')) {
		try {
			showproperties();
		} catch (e) {
		} finally {
			return false;
		}
	}

	//RUN buttons
	if ((sToolName == 'mnutoolRunReportFind') || (sToolName == 'mnutoolRunUtilitiesFind') || (sToolName == 'mnutoolRunRecordMailMerge')) {
		try {
			if (OpenHR.currentWorkPage() == "STDRPT_DEF_ABSENCE" || OpenHR.currentWorkPage() == "UTIL_RUN_PROMPTEDVALUES") {
				absence_okClick();
			} else {
				setrun(6);
			}
		} catch (e) {
		} finally {
			return false;
		}
	}


	// Cancel buttoons
	if (sToolName == 'mnutoolCloseReportFind' || sToolName == 'mnutoolCloseUtilitiesFind') {
		try {

			setcancel();

			//$("#optionframe").hide();
			//$("#workframe").show();
			//$("#workframe").attr("data-framesource", "RECORDEDIT");
			//$("#toolbarRecord").show();
			//$("#toolbarRecord").click();

			//menu_refreshMenu();

		} catch (e) {
		} finally {
			return false;
		}
	}


	//-------------------------- SSI Links Buttons -----------------------//
	if (sToolName == "mnutoolAccessLinksFind") {
		doEdit();
		return false;
	}

	if (sToolName == "mnutoolCancelLinksFind") {
		doCancel();
		return false;
	}

	
//--------------------------PENDING WORKFLOW STEPS-------------------------------//
		// 'RUN'
	if (sToolName == 'mnutoolRunWFPendingStepsFind') {
		try {
				$("#cmdRun").click();
		} catch (e) {
		} finally {
			return false;
		}
	}
		// 'CLOSE'
	if (sToolName == 'mnutoolCloseWFPendingStepsFind') {
			try {
					closeclick();
			} catch (e) {
			} finally {
					return false;
			}
	}
		// 'REFRESH'
	if (sToolName == 'mnutoolRefreshWFPendingStepsFind') {
			try {
					$("#cmdRefresh").click();
			} catch (e) {
			} finally {
					return false;
			}
	}

	//--------------------------CUSTOM REPORT NEW/EDIT/COPY-------------------------------//
	if (sToolName == 'mnutoolSaveReport') {
		try {

			var frmSubmit = $("#frmReportDefintion");
			if (frmSubmit.length == 0 || IsToolsScreenLoadedFromReportDefinition() == true) {
				okClick(); //Should be in scope	
			} else {
				saveReportDefinition(false);
			}

		} catch (e) {
		} finally {
			return false;
		}
	}

	if (sToolName == 'mnutoolCancelReport') {

		try {

			var frmSubmit = $("#frmReportDefintion");
			if (frmSubmit.length == 0 || IsToolsScreenLoadedFromReportDefinition() == true) {
				$("#cmdCancel").click(); //Should be in scope	
			} else {
				cancelReportDefinition();
			}

		} catch (e) {
		} finally {
			return false;
		}
	}

	if (sToolName == "mnutoolLogoff") {
		saveChangesPrompt(sToolName, 'menu_logoffIntranet()');
		return false;
	}


	if (sToolName == "mnutoolAboutHRPro") {
		menu_mnutoolAboutHRPro();
		return;
	}



	if (sToolName == "mnutoolExit") {
		menu_exitIntranet();
		return;
	}

		//RecEdit - Find ---------------------------------------------------------------------------------------------------------------------------
	if (sToolName == "mnutoolNewRecordFind") {
			menu_newRecord(true);
		return;
	}
		
	if ((sToolName == "mnutoolCopyRecordFind") || (sToolName == "mnutoolCopyRecord")) {
			menu_copyRecord();
		return;
	}
		
	if (sToolName == "mnutoolEditRecordFind") {
			menu_editRecord(true);
		return;
	}
		
	if (sToolName == "mnutoolDeleteRecordFind") {
			menu_deleteRecord();
			menu_moveRecord("MOVEFIRST");
			return;
	}

	if (sToolName == "mnutoolParentRecordFind") {
			menu_loadParentRecord();
			return;
	}

	if (sToolName == "mnutoolBackRecordFind") {
			menu_loadBackPage();
			return;
	}

	if ((sToolName == "mnutoolLocateRecordsCaption") || (sToolName == "mnutoolPositionRecordFind")) {
			// Do nothing
			return;
	}

	if (sToolName == "mnutoolChangeOrderRecordFind") {
			menu_loadSelectOrderFilter("ORDER");
			return;
	}

	if (sToolName == "mnutoolFilterRecordFind") {
			menu_loadSelectOrderFilter("FILTER");
			return;
	}

	if (sToolName == "mnutoolClearFilterRecordFind") {
			menu_clearFilter();
			return;
	}

		//Training Booking
	if (sToolName == "mnutoolBulkBookingRecordFind") {
			menu_bulkBooking();
			return;
	}

	if (sToolName == "mnutoolAddFromWaitingListRecordFind") {
			menu_addFromWaitingList();
			return;
	}

	if (sToolName == "mnutoolTransferBookingRecordFind") {
			menu_transferBooking();
			return;
	}

	if (sToolName == "mnutoolCancelBookingRecordFind") {
			menu_cancelBooking();
			return;
	}

	// Course Booking
	if (sToolName == "mnutoolBookCourseFind") {
		menu_bookCourse();    
		return;
	}

		//RecEdit - New, Edit, Copy ----------------------------------------------------------------------------------------------------------------
	if (sToolName == "mnutoolNewRecord") {
			menu_newRecord();
		return false;
	}
		
	if (sToolName == "mnutoolEditRecord") {
			menu_editRecord();
		return false;
	}
							
	if (sToolName == "mnutoolSaveRecord") {
			menu_saveChanges("", false, false);
		return false;
	}
		
	if (sToolName == "mnutoolDeleteRecord") {
			menu_deleteRecord();
		return false;
	}

	if (sToolName == "mnutoolParentRecord") {
			menu_loadParentRecord();
		return false;
	}

	if (sToolName == "mnutoolBackRecord") {
			menu_loadBackPage();
		return false;
	}

	if (sToolName == "mnutoolFirstRecord") {
			menu_moveRecord("MOVEFIRST");
		return false;
	}

	if (sToolName == "mnutoolPreviousRecord") {
			menu_moveRecord("MOVEPREVIOUS");
		return false;
	}

	if (sToolName == "mnutoolNextRecord") {
			menu_moveRecord("MOVENEXT");
		return false;
	}

	if (sToolName == "mnutoolLastRecord") {
			menu_moveRecord("MOVELAST");
		return false;
	}

	if ((sToolName == "mnutoolLocateRecordsCaption") ||
		(sToolName == "mnutoolPositionRecordPosition")) {
		// Do nothing
		return;
	}

	if (sToolName == "mnutoolFindRecord") {
		saveChangesPrompt(sTool, 'menu_disableMenu(); menu_refreshHistoryScreensMenu(0); menu_loadFindPage()');
		return false;
	}

	if (sToolName == "mnutoolQuickFindRecord") {
		saveChangesPrompt('QUICKFIND', 'menu_loadQuickFindNoSaveCheck()');
		return false;
	}

	if (sToolName == "mnutoolChangeOrderRecord") {
		menu_loadSelectOrderFilter("ORDER");     
		return false;
	}
				
	if (sToolName == "mnutoolFilterRecord") {
		menu_loadSelectOrderFilter("FILTER");     
		return false;
	}
				
	if (sToolName == "mnutoolClearFilterRecord") {
		menu_clearFilter();     
		return false;
	}
		
		// Calendar Reports  (from record menu)
	if (sToolName == "mnutoolCalendarReportsRecord") {
		saveChangesPrompt("CALENDAR", 'menu_loadRecordDefSelPage(17, 0, 0, true)');
		return false;
	}
	
		// Individual Absence Breakdown (from record menu)
	if (sToolName == "mnutoolAbsenceBreakdownRecord") {
		saveChangesPrompt("ABSENCEBREAKDOWN", 'menu_LoadStandardReport("ABSENCEBREAKDOWN", "REC")');
		return false;
	}

	// Individual Absence Calendar (from record menu)
	if (sToolName == "mnutoolAbsenceCalendarRecord") {
		saveChangesPrompt("STDRPT_ABSENCECALENDAR", 'menu_LoadAbsenceCalendar()');
		return false;
	}

		// Individual Bradford Factor (from record menu)
	if (sToolName == "mnutoolBradfordRecord") {
		saveChangesPrompt("BRADFORDFACTOR", 'menu_LoadStandardReport("BRADFORDFACTOR", "REC")');
		return false;
	}

		// Mail Merge  (from record menu)
	if (sToolName == "mnutoolMailMergeRecord") {
		saveChangesPrompt("MAILMERGE", 'menu_loadRecordDefSelPage(9, 0, 0, true)');
		return false;		
	}

		// Data Transfer (from record menu)
	if (sToolName == "mnutoolDataTransferRecord") {
			saveChangesPrompt("DATATRANSFER", 'menu_loadRecordDefSelPage(3, 0, 0, true)');
			return false;
	}

		// Course Booking
	if (sToolName == "mnutoolCancelCourseRecord") {
		OpenHR.modalPrompt("Are you sure you want to cancel this course?", 4, "Confirm").then(function (answer) {
			if (answer == 6) { // Yes
				if (menu_saveChanges("CANCELCOURSE", true, false) != 2) { // 2 = vbCancel
					window.top.onbeforeunload = null;
					menu_cancelCourse(); // HC: TODO - Tab and buttons needs to be enabled
				}
				return false;
			}
			return false;

		});
		return false;
	}

		// Reports Menu -------------------------------------------------------------------------------------------------------------------

		// Crosstab Reports
		if (sToolName == "mnutoolCrossTabs") {
			saveChangesPrompt("CROSSTABS", 'menu_loadDefSelPage(1, 0, 0, true)');
			return false;
		}

	// Nine box grid Reports
		if (sToolName == "mnutoolNineBox") {
			saveChangesPrompt("NINEBOXGRID", 'menu_loadDefSelPage(35, 0, 0, true)');
			return false;
		}

		// Custom Reports
		if (sToolName == "mnutoolCustomReports") {
			saveChangesPrompt("CUSTOMREPORTS", 'menu_loadDefSelPage(2, 0, 0, true)');
			return false;
		}
		
		// Calendar Reports
		if (sToolName == "mnutoolCalendarReports") {
			saveChangesPrompt("CALENDAR", 'menu_loadDefSelPage(17, 0, 0, true)');
			return false;
		}
		

		// Absence Breakdown (from reports menu)
		if (sToolName == "mnutoolStdRpt_AbsenceBreakdown") {
			saveChangesPrompt("ABSENCEBREAKDOWN", 'menu_LoadStandardReport("ABSENCEBREAKDOWN", "ALL")');
			return false;
		}

		// Bradford Factor (from reports menu)
		if (sToolName == "mnutoolStdRpt_BradfordFactor") {
			saveChangesPrompt("BRADFORDFACTOR", 'menu_LoadStandardReport("BRADFORDFACTOR", "ALL")');
			return false;
		}
	
		// Utilities Menu -------------------------------------------------------------------------------------------------------------------

		if (sToolName == "mnutoolMailMerge") {
			saveChangesPrompt("MAILMERGE", 'menu_loadDefSelPage(9, 0, 0, true)');
			return false;
		}

		if (sToolName == "mnutoolWorkflow") {
			saveChangesPrompt("WORKFLOW", 'menu_loadDefSelPage(25, 0, 0, true)');
			return false;
		}

		if (sToolName == "mnutoolDataTransfer") {
				saveChangesPrompt("DATATRANSFER", 'menu_loadDefSelPage(3, 0, 0, true)');
				return false;
		}


		// Utilities Menu -------------------------------------------------------------------------------------------------------------------
		
		if (sToolName == "mnutoolCalculations") {
			saveChangesPrompt("CALCULATIONS", 'menu_loadDefSelPage(12, 0, 0, true)');
			return false;
		}

		if (sToolName == "mnutoolFilters") {
			saveChangesPrompt("FILTERS", 'menu_loadDefSelPage(11, 0, 0, true)');
			return false;
		}

		if (sToolName == "mnutoolPicklists") {
			saveChangesPrompt("PICKLISTS", 'menu_loadDefSelPage(10, 0, 0, true)');
			return false;
		}

		/******* Begin Changes related to to user stories : 18362, 18363, 18628 & 18629  *********/

		if (sToolName == "mnutoolCalculationReport") {
			LoadToolsScreen(12);
			return false;
		}

		if (sToolName == "mnutoolFilterReport" || sToolName == "mnutoolFilterReportFind") {
			LoadToolsScreen(11);
			return false;
		}

		if (sToolName == "mnutoolPicklistReport" || sToolName == "mnutoolPicklistReportFind") {
			LoadToolsScreen(10);
			return false;
		}

		// Close toobar button for the tools screen (picklist/filter/calculation) when loaded from report definition
		if ((sToolName == 'mnutoolCloseToolsFind')) {
			try {
				closeTools();
			} catch (e) {
			} finally {
				return false;
			}
		}

	/******* End Changes related to to user stories : 18362, 18363, 18628 & 18629  *********/


	/******* Begin Changes related to to uer story 19436: As a user, I want to run reports and utilities from the Find Window  *********/

		if (sToolName == "mnutoolMultiSelectFind") {			
			var multiSelectText = ($('#mnutoolMultiSelectFind h6').text().indexOf('Off') > -1 ? "Multi-Select <br/>On" : "Multi-Select <br/>Off");
			var tooltipText = ($('#mnutoolMultiSelectFind h6').text().indexOf('Off') > -1 ? "Multi-Select On" : "Multi-Select Off");

			$('#mnutoolMultiSelectFind h6').html(multiSelectText);
			$('#mnutoolMultiSelectFind a').prop("title", tooltipText);

			// Show selected label is multiselect mode is on, hide otherwise
			if (IsMultiSelectionModeOn()) {
				$("#mnutoolPositionRecordFind span.selectedRecordsCount").html("Selected : 0").show();
			}
			else {
				$("#mnutoolPositionRecordFind span.selectedRecordsCount").html("Selected : 0").hide();
			}

			// Reload the find page
			menu_reloadFindPage("RELOAD", "");

			return false;
		}

		if (sToolName == "mnutoolCustomReportsFind") {
			LoadReportOrUtilityScreen(2);
			return false;
		}

		if (sToolName == "mnutoolCalendarReportsFind") {
			LoadReportOrUtilityScreen(17);
			return false;
		}

		if (sToolName == "mnutoolMailMergeFind") {
			LoadReportOrUtilityScreen(9);
			return false;
		}

		if (sToolName == "mnutoolDataTransferFind") {
				LoadReportOrUtilityScreen(3);
			return false;
		}

		
	/******* End Changes related to user story 19436: As a user, I want to run reports and utilities from the Find Window  *********/


	// Administration Menu -------------------------------------------------------------------------------------------------------------------

	
		// Loads the Absence Breakdown report configuration
		if (sToolName == "mnutoolStdRpt_AbsenceBreakdownConfiguration") {
			return false; //not available yet!!
			saveChangesPrompt("ABSENCEBREAKDOWNCONFIGURATION", 'menu_loadPage("AbsenceBreakdownConfiguration")');
			return false;
		}

	// Event Log
	
		if (sToolName == "mnutoolEventLog") {
			menu_setVisibletoolbarGroupById("mnuSectionNavigateRecords", false); //Hide the navigate section of the ribbon
			saveChangesPrompt("EVENTLOG", 'menu_LoadEventLog()');
			return false;
		}

		if (sToolName == "mnutoolViewEventLogFind") {
			EventLog_viewEvent();
			return false;
		}
	
		if (sToolName == "mnutoolPurgeEventLogFind") {
			EventLog_purgeEvent();
			return false;
		}

		if (sToolName == "mnutoolEmailEventLogFind") {
			//EventLog_emailEvent();
			return false;
		}

		if (sToolName == "mnutoolDeleteEventLogFind") {
			EventLog_deleteEvent();
			return false;
		}


		if (sToolName == "mnutoolWorkflowPendingSteps") {
			saveChangesPrompt("WORKFLOWPENDINGSTEPS", 'showDefaultRibbon(); $("#toolbarWFPendingStepsFind").parent().show(); $("#toolbarWFPendingStepsFind").click(); menu_loadWorkflowPendingSteps(false)');
			return false;
		}

		if (sToolName == "mnutoolFirstEventLogFind") {
			menu_moveRecord("MOVEFIRST");
			return false;
		}

		if (sToolName == "mnutoolPreviousEventLogFind") {
			menu_moveRecord("MOVEPREVIOUS");
			return false;
		}

		if (sToolName == "mnutoolNextEventLogFind") {
			menu_moveRecord("MOVENEXT");
			return false;
		}

		if (sToolName == "mnutoolLastEventLogFind") {
			menu_moveRecord("MOVELAST");
			return false;
		}
	
		// User Config and PC Config
		if (sToolName == "mnutoolSaveAdminConfig") {
			Configuration_okClick();
			return false;
		}

		// Report configuration
		if (sToolName == "mnutoolSaveStandardReportConfig") {
			ReportConfiguration_okClick();
			return false;
		}

	//--------------------------------------------------------------------------------------------------------------
		
	// TODO: The following handlers need to be fixed or may be redundant

	// Administration Menu -------------------------------------------------------------------------------------------------------------------
		if ((sToolName == "mnutoolWorkflowOutOfOffice") || (sToolName == "mnutoolFixedWorkflowOutOfOffice")) {
			saveChangesPrompt("WORKFLOWOUTOFOFFICE", 'menu_WorkflowOutOfOffice()');
			return false;
		}
	
	if (sTool == 'mnutoolOrgChartExpand') {
		//Expand all nodes.
		$('.contracted').each(function () {
			$(this).removeClass('contracted').addClass('expanded');
			$(this).nextAll("tr").find(".node").show("blind");
			$(this).nextAll("tr").css('visibility', '');
			$(this).nextAll('tr').css('display', '');
			// Update the <li> appropriately so that if the tree redraws collapsed/non-collapsed nodes
			// maintain their appearance
			$(this).removeClass('collapsed');			
		});

		$('.expandNode').attr('src', window.top.window.ROOT + 'Content/images/minus.gif');

		//enable/disable expand all nodes button
		menu_toolbarEnableItem("mnutoolOrgChartExpand", ($('.contracted').length > 0));

		return false;
	}

	// Has the user clicked on a parent node?
				if ($("#" + sTool).is(".jstree-closed, .jstree-open")) {
					toggle_Leaf(sTool);
					return false;
				}

	hasChanged = menu_saveChanges(sToolName, true, false);
	if (hasChanged == 0) { // Prompt for navigation

		if (sToolName.substr(0, 7) == "mnutool") {

			OpenHR.modalPrompt(GetPromptMessage(), 1, "Confirm").then(function (answer) {
				if (answer == 1) {  // OK
					//not an expandable menu item, so continue.
					window.top.onbeforeunload = null;
					CleanToolsFrameAndResetPageSource();
					menu_loadPage(sToolName.substr(7));
				}
				else {
				}
			});
			return false;
		}
		else {
			//frmData = window.parent.frames("dataframe").document.forms("frmData");
			OpenHR.modalPrompt(GetPromptMessage(), 1, "Confirm").then(function (answer) {
				if (answer == 1) {  // OK
					window.top.onbeforeunload = null;
					CleanToolsFrameAndResetPageSource();
					menu_Navigate_LoadPage(sTool, sToolName, frmMenuInfo);
				}
				else {
				}
			});
			return false;
		}
	}
	else if (hasChanged == 6) {  // Free navigation
		if (sToolName.substr(0, 7) == "mnutool") {
			CleanToolsFrameAndResetPageSource();
			menu_loadPage(sToolName.substr(7));
		}
		else {
			CleanToolsFrameAndResetPageSource();
			menu_Navigate_LoadPage(sTool, sToolName, frmMenuInfo);
		}
		return false;
	}
}


function saveChangesPrompt(sToolName, followonfunction) {

	var hasChanged = menu_saveChanges(sToolName, true, false);
	if (hasChanged === 0) { // Prompt for navigation

		OpenHR.modalPrompt(GetPromptMessage(), 1, "Confirm").then(function (answer) {
			if (answer === 1) { // OK			
				window.top.onbeforeunload = null;
				runPostSaveChangesPrompt(followonfunction);
			}
		});
	}
	else {
		runPostSaveChangesPrompt(followonfunction);
	}	
	return false;
}


function runPostSaveChangesPrompt(followonfunction) {
	try {
		CleanToolsFrameAndResetPageSource();
		setTimeout(followonfunction, 0);// Alerts 200
	}
	catch (e) {
		alert("Function call failed.");
	}

	return false;
}


function menu_Navigate_LoadPage(sTool, sToolName, frmMenuInfo) {
	var frmData;
	var sToolNameKey;

	try {
		//clear down optionframe dialog (as it's reused by other things)
		if ($('#optionframe').dialog('destroy')); //this may well fail if the dialog isn't yet initialised, but as it's in a try/catch....
	} catch (e) { }

	frmData = OpenHR.getForm("dataframe", "frmData");
				sToolNameKey = sToolName.substr(0, 3);

				if ((sToolNameKey == "PT_") ||
								 (sToolNameKey == "PV_")) {
					// PT_ = primary table
					// PV_ = primary table view
					if (frmMenuInfo.txtPrimaryStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "TS_") {
					// TS_ = Table screen
					if (frmMenuInfo.txtLookupStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "QE_") {
					// QE_ = quick entry screen
					if (frmMenuInfo.txtQuickAccessStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "HT_") {
					// HT_ = history table
					if (frmMenuInfo.txtHistoryStartMode.value == 3) {
						// NB. Don't clear the record description, as we'll
						// use the existing recEdit record description
						// value for the history find window.
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				//Default to toggling this leaf (expand/contract)
				toggle_Leaf(sTool);
				
	}

function toggle_Leaf(sTool) {
	//is this clicked item an expandable leaf? If so, toggle it...
	try {
		var jsTreeID = ($("#" + sTool).parent().parent().attr("id"));
		$("#" + jsTreeID).jstree("toggle_node", "#" + sTool);
	} catch (e) { }
}

function menu_ShowWait(sMessage) {
	$('#txtProgressMessage').val(sMessage);	
}


function menu_CloseWait() {

//	var fs = window.parent.parent.document.all.item("mainframeset")
//	if (fs) {
//		fs.rows = "0, *, 0, 0, 0, 0"
//		}
//		
//	return;

}

function showDefaultRibbon() {
	// Hide all tabs except FixedLinks
	window.top.$("#toolbarHome").parent().show();

	window.top.$("#toolbarRecordFind").parent().hide();
	window.top.$("#toolbarRecord").parent().hide();
	window.top.$("#toolbarRecordAbsence").parent().hide();
	window.top.$("#toolbarOrgChart").parent().hide();
	window.top.$("#toolbarRecordQuickFind").parent().hide();
	window.top.$("#toolbarRecordSortOrder").parent().hide();
	window.top.$("#toolbarRecordFilter").parent().hide();
	window.top.$("#toolbarDelegateBookingTransfer").parent().hide();
	window.top.$("#toolbarDelegateBookingBulkBooking").parent().hide();
	window.top.$("#toolbarRecordMailMerge").parent().hide();
	window.top.$("#toolbarReportFind").parent().hide();
	window.top.$("#toolbarReportNewEditCopy").parent().hide();
	window.top.$("#toolbarReportRun").parent().hide();
	window.top.$("#toolbarUtilitiesFind").parent().hide();
	window.top.$("#toolbarUtilitiesNewEditCopy").parent().hide();
	window.top.$("#toolbarToolsFind").parent().hide();
	window.top.$("#toolbarEventLogFind").parent().hide();
	window.top.$("#toolbarEventLogView").parent().hide();
	window.top.$("#toolbarWFPendingStepsFind").parent().hide();
	window.top.$("#toolbarAdminConfig").parent().hide();
	window.top.$("#toolbarStandardReportConfig").parent().hide();
	
	// Hide the Self-service or OpenHR button, as appropriate	
	if (menu_isSSIMode()) {
		window.top.$("#mnutoolFixedSelfService").hide();
		if ((OpenHR.currentWorkPage() == 'LINKSMAIN') && (window.currentLayout == 'tiles'))
			window.top.$('#searchBox').show();
		else
			window.top.$('#searchBox').hide();
	} else {
		window.top.$("#mnutoolFixedOpenHR").hide();
	}

	//activate home ribbon tab, remove history menu and activate database context menu
	window.top.$("#toolbarHome").click();
	if (window.top.$('#mnutoolHistory').hasClass('ui-state-active')) window.top.$('#mnutoolDatabase').click();
	window.top.$('#mnutoolHistory').next('div').find('ul').empty();
	window.top.$("#mnutoolHistory").hide();
}

function menu_refreshMenu() {
		// Refresh the menu.
		var lngRecordID;
	var sCaption;
	var fCancelCourseVisible;
	var fCancelCourseEnabled;
	var fBookCourseVisible;
	var fBookCourseEnabled;
	var fTransferBookingVisible;
	var fTransferBookingEnabled;
	var fAddFromWaitingListVisible;
	var fAddFromWaitingListEnabled;
	var fCancelBookingVisible;
	var fCancelBookingEnabled;
	var fBulkBookingVisible;
	var fBulkBookingEnabled;
	var lngMenuHeight;
	var sCurrentWorkPage;
	var frmRecEdit;
	var frmFind;
	var frmRefresh;
	var frmOption;
	var sTemp;
	var iStartPosition;
	var iEndPosition;
	var dtDummyDate = new Date(1899, 11, 30);
	var sRecEditDate;
	var sDummyDate;
	//Get the frmMenuInfo object for implicit use in this function (non-ie)
	var frmMenuInfo = window.top.$("#frmMenuInfo")[0].children;
	
	// Standard reports
	var fStdRptAbsenceCalendarEnabled;
	var fStdRptAbsenceBreakdownEnabled;
	var fStdRptBradfordFactorEnabled;
	var fStdRptTurnoverEnabled;
	var fStdRptStabilityEnabled;
	var fStdRptAbsenceCalendarVisible;
	var fStdRptAbsenceBreakdownVisible;
	var fStdRptBradfordFactorVisible;
	var fStdRptTurnoverVisible;
	var fStdRptStabilityVisible;
	var fCanSeeLookupTableMenu;

	var fCalendarReportsVisible = false;
	var fCalendarReportsEnabled = false;
	var fCanRunCalendarReports = false;
	var fCanRunMailMerge = false;

	var isDMIUser = (window.parent.$("#txtIsDMIUser")[0].value == "True");

	fCanRunCalendarReports = false;
	if (window.parent.window.txtSysPerm_CALENDARREPORTS_RUN != null) {
		if ((window.parent.window.txtSysPerm_CALENDARREPORTS_RUN.value == 1) && isDMIUser) {
			fCanRunCalendarReports = true;
			fCalendarReportsEnabled = false;
		}
	}

	var fMailMergeVisible = false;
	var fMailMergeEnabled = false;
	var fMailMergeReports = false;
	var fCanRunAbsenceCalendar = false;
	var fCanRunAbsenceBreakdown = false;
	var fCanRunBradfordFactor = false;

	fCanRunMailMerge = false;
	if (window.parent.window.txtSysPerm_MAILMERGE_RUN != null) {
		if ((window.parent.window.txtSysPerm_MAILMERGE_RUN.value == 1) && isDMIUser) {
			fCanRunMailMerge = true;
			fMailMergeEnabled = false;
		}
	}
	
	fCancelCourseVisible = false;
	fCancelCourseEnabled = false;
	fBookCourseVisible = false;
	fBookCourseEnabled = false;
	fTransferBookingVisible = false;
	fTransferBookingEnabled = false;
	fAddFromWaitingListVisible = false;
	fAddFromWaitingListEnabled = false;
	fCancelBookingVisible = false;
	fCancelBookingEnabled = false;
	fBulkBookingVisible = false;
	fBulkBookingEnabled = false;

	fStdRptAbsenceCalendarEnabled = false;
	fStdRptAbsenceBreakdownEnabled = false;
	fStdRptBradfordFactorEnabled = false;
	fStdRptTurnoverEnabled = false;
	fStdRptStabilityEnabled = false;
	fStdRptAbsenceCalendarVisible = false;
	fStdRptAbsenceBreakdownVisible = false;
	fStdRptBradfordFactorVisible = false;
	fStdRptTurnoverVisible = false;
	fStdRptStabilityVisible = false;

	fCanRunAbsenceCalendar = false;
	if (window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_AC != null) {
		if ((window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_AC.value == 1) && isDMIUser) {
			fCanRunAbsenceCalendar = true;
		}
	}
	fCanRunAbsenceBreakdown = false;
	if (window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_AB != null) {
		if ((window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_AB.value == 1) && isDMIUser) {
			fCanRunAbsenceBreakdown = true;
		}
	}
	fCanRunBradfordFactor = false;
	if (window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_BF != null) {
		if ((window.parent.window.txtSysPerm_STANDARDREPORTS_RUN_BF.value == 1) && isDMIUser) {
			fCanRunBradfordFactor = true;
		}
	}
	
	//menu is always available and populated.
	//if (abMainMenu.Bands.Count() > 0) {
	menu_enableMenu();

		//hide the utilities menu block.
	//$("#mnuSectionUtilities").hide();
	
		// HC - Commented out for now
		//menu_toolbarEnableItem("mnutoolNewUtil", false);
		//menu_toolbarEnableItem("mnutoolEditUtil", false);
		//menu_toolbarEnableItem("mnutoolCopyUtil", false);
		//menu_toolbarEnableItem("mnutoolDeleteUtil", false);
		//menu_toolbarEnableItem("mnutoolPrintUtil", false);
		//menu_toolbarEnableItem("mnutoolPropertiesUtil", false);
		//menu_toolbarEnableItem("mnutillRunUtil", false);
		//menu_setVisibleMenuItem("mnuutilCancelUtil", false);
		//menu_toolbarEnableItem("mnuutilCancelUtil", false);

	//$("#toolbarHome").click();

	if (!menu_isSSIMode()) { //Layout button should only be visible in SSI mode
		menu_setVisibleMenuItem("mnutoolFixedLayout", false);
	}
	
	if (window.parent.window.currentLayout != 'winkit') menu_setVisibleMenuItem('toolbarHome', !menu_isSSIMode());

	if (menu_isSSIMode()) {
		//no multi window functionality in SSI.
		menu_setVisibletoolbarGroupById('mnuSectionMultiWindowDisplayFind', false);
		menu_setVisibletoolbarGroupById('mnuSectionMultiWindowDisplayRecord', false);
	} 

		//Standard reports (reports menu)
	fStdRptAbsenceCalendarVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
						isDMIUser &&
						(window.parent.$("#txtAbsenceEnabled").val() == 1));
	fStdRptAbsenceBreakdownVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
						isDMIUser &&
						(window.parent.$("#txtAbsenceEnabled").val() == 1));
	fStdRptBradfordFactorVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
						isDMIUser &&
						(window.parent.$("#txtAbsenceEnabled").val() == 1));
	fStdRptAbsenceCalendarEnabled = ((fCanRunAbsenceCalendar == true) && (fStdRptAbsenceCalendarVisible));
	fStdRptAbsenceBreakdownEnabled = ((fCanRunAbsenceBreakdown == true) && (fStdRptAbsenceBreakdownVisible));
	fStdRptBradfordFactorEnabled = ((fCanRunBradfordFactor == true) && (fStdRptBradfordFactorVisible));

	menu_setVisibleMenuItem("mnutoolStdRpt_AbsenceBreakdown", fStdRptAbsenceCalendarVisible);	//Menu Item - Absence Breakdown
	menu_enableMenuItem("mnutoolStdRpt_AbsenceBreakdown", fStdRptAbsenceBreakdownEnabled);	//Toolbar Icon
	menu_setVisibleMenuItem("mnutoolStdRpt_BradfordFactor", fStdRptBradfordFactorVisible);	//Menu Item - Bradford Factor
	menu_enableMenuItem("mnutoolStdRpt_BradfordFactor", fStdRptBradfordFactorEnabled);	//Toolbar Icon

	sCurrentWorkPage = OpenHR.currentWorkPage();

		if (sCurrentWorkPage == "DEFAULT") {
			showDefaultRibbon();
			$('#toolbarHome').click();
		}
		else { 
	if (sCurrentWorkPage == "RECORDEDIT") {

		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
		var frmData = OpenHR.getForm("dataframe", "frmData");

		showDefaultRibbon();
			window.top.$("#toolbarRecord").parent().show();
			window.top.$("#toolbarRecord").click();

		menu_setVisibletoolbarGroupById('mnuSectionRecordFind', true);
		menu_setVisibletoolbarGroupById('mnuSectionRecordOrder', true);
		menu_setVisibletoolbarGroupById('mnuSectionRecordReports', true);
		menu_setVisibletoolbarGroupById('mnuSectionRecordMailmerge', true);



		//abMainMenu.Bands("mnubandMainToolBar").visible = true;
			menu_setVisibleMenuItem("mnutoolRecord", false);	//Record 'context menu' from old dmi.

		// Enable the record editing options as necessary.
		menu_setVisibleMenuItem("mnutoolNewRecord", true);
				
		var fMnutoolNewRecord = ((frmRecEdit.txtRecEditInsertGranted.value.toUpperCase() == "TRUE") &&
				(isDMIUser ||
					(frmRecEdit.txtCurrentParentTableID.value > 0) ||
					(frmRecEdit.txtQuickEntry.value.toUpperCase() == "TRUE")));
		menu_toolbarEnableItem("mnutoolNewRecord", fMnutoolNewRecord);
						menu_setVisibleMenuItem("mnutoolCopyRecord", true);
						menu_toolbarEnableItem("mnutoolCopyRecord", (fMnutoolNewRecord && (frmRecEdit.txtCurrentRecordID.value > 0)));
		menu_setVisibleMenuItem("mnutoolEditRecord", false);
		menu_setVisibleMenuItem("mnutoolSaveRecord", true);		
			menu_toolbarEnableItem("mnutoolSaveRecord", (OpenHR.activeFrame().find("#ctlRecordEdit #changed").val() == "true"));
		menu_setVisibleMenuItem("mnutoolDeleteRecord", true);
		menu_toolbarEnableItem("mnutoolDeleteRecord", ((frmRecEdit.txtRecEditDeleteGranted.value.toUpperCase() == "TRUE") &&
				(frmRecEdit.txtCurrentRecordID.value > 0) &&
				(isDMIUser ||
					(frmRecEdit.txtCurrentParentTableID.value > 0) ||
					(frmRecEdit.txtQuickEntry.value.toUpperCase() == "TRUE"))));
			menu_setVisibleMenuItem("mnutoolParentRecord", false);
		menu_toolbarEnableItem("mnutoolParentRecord", (frmRecEdit.txtCurrentParentTableID.value > 0));
						menu_setVisibleMenuItem("mnutoolBackRecord", false);
						menu_toolbarEnableItem("mnutoolBackRecord", false);
		menu_setVisibletoolbarGroup("mnutoolNewRecord", true);

		menu_setVisibleMenuItem("mnutoolFirstRecord", true);
		menu_toolbarEnableItem("mnutoolFirstRecord", (parseInt(frmData.txtRecordPosition.value, 10) > 1));
		menu_setVisibleMenuItem("mnutoolPreviousRecord", true);
		menu_toolbarEnableItem("mnutoolPreviousRecord", (parseInt(frmData.txtRecordPosition.value, 10) > 1));
		menu_setVisibleMenuItem("mnutoolNextRecord", true);
		menu_toolbarEnableItem("mnutoolNextRecord", (parseInt(frmData.txtRecordPosition.value, 10) < parseInt(frmData.txtRecordCount.value, 10)));
		menu_setVisibleMenuItem("mnutoolLastRecord", true);
		menu_toolbarEnableItem("mnutoolLastRecord", (parseInt(frmData.txtRecordPosition.value, 10) < parseInt(frmData.txtRecordCount.value, 10)));

		// HC: Not on RecEdit
		//menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", false);
		//menu_setVisibleMenuItem("mnutoolLocateRecords", false);
		//menu_setVisibleMenuItem("mnutoolLocateRecordsLogic", false);
		//menu_setVisibletoolbarGroup("mnutoolLocateRecords", false);	//hide the group too

		// Find Group
		menu_setVisibleMenuItem("mnutoolFindRecord", true);
		menu_toolbarEnableItem('mnutoolFindRecord', true);

		menu_setVisibleMenuItem("mnutoolQuickFindRecord", !menu_isSSIMode());
		menu_toolbarEnableItem("mnutoolQuickFindRecord", ((frmRecEdit.txtLineage.value.length == 0) &&
				(isDMIUser ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
							(frmRecEdit.txtCurrentParentTableID.value > 0))));		

		if (menu_isSSIMode()) {
			menu_setVisibleMenuItem("mnutoolChangeOrderRecord", false);
			menu_setVisibleMenuItem("mnutoolFilterRecord", false);
			menu_setVisibleMenuItem("mnutoolClearFilterRecord", false);
			menu_setVisibleMenuItem("mnuSectionRecordOrder", false);
		}
		else {
		menu_setVisibletoolbarGroup("mnutoolFindRecord", true);

		// Order Group
		//abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolOrder").beginGroup = false;
		menu_setVisibleMenuItem("mnutoolChangeOrderRecord", true);
		menu_toolbarEnableItem("mnutoolChangeOrderRecord", (isDMIUser ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
				(frmRecEdit.txtCurrentParentTableID.value > 0)));
		menu_setVisibleMenuItem("mnutoolFilterRecord", true);
		menu_toolbarEnableItem("mnutoolFilterRecord", (isDMIUser ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
				(frmRecEdit.txtCurrentParentTableID.value > 0)));
		menu_setVisibleMenuItem("mnutoolClearFilterRecord", true);
		menu_toolbarEnableItem("mnutoolClearFilterRecord", (frmRecEdit.txtRecEditFilterDef.value.length > 0));
		}

		// Standard reports group
		fStdRptAbsenceCalendarVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				isDMIUser &&
					(window.parent.txtAbsenceEnabled.value == 1));
		fStdRptAbsenceBreakdownVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				isDMIUser &&
					(window.parent.txtAbsenceEnabled.value == 1));
		fStdRptBradfordFactorVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				isDMIUser &&
					(window.parent.txtAbsenceEnabled.value == 1));

		// Calendar Reports (Record Menu)
		//fCalendarReportsVisible = ((frmRecEdit.txtQuickEntry.value.toUpperCase() != "TRUE"));
		fCalendarReportsVisible = true;
		fCalendarReportsEnabled = ((fCanRunCalendarReports == true) &&
				(fCalendarReportsVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		//Mail Merge (Record Menu)
		//fMailMergeVisible = ((frmRecEdit.txtQuickEntry.value.toUpperCase() != "TRUE"));
		fMailMergeVisible = true;
		fMailMergeEnabled = ((fCanRunMailMerge == true) &&
				(fMailMergeVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		fStdRptAbsenceCalendarEnabled = ((fCanRunAbsenceCalendar == true) &&
				(fStdRptAbsenceCalendarVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));
		fStdRptAbsenceBreakdownEnabled = ((fCanRunAbsenceBreakdown == true) &&
				(fStdRptAbsenceBreakdownVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));
		fStdRptBradfordFactorEnabled = ((fCanRunBradfordFactor == true) &&
				(fStdRptBradfordFactorVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		if (frmRecEdit.txtCurrentRecordID.value > 0) {
			sCaption = "Record " +
					frmData.txtRecordPosition.value +
					" of " +
					frmData.txtRecordCount.value;
			menu_SetmnutoolRecordPositionCaption(sCaption);

			if (frmRecEdit.txtRecEditFilterDef.value.length > 0) {
				sCaption = sCaption + " (filtered)";
			}
			
			if (frmData.txtRecordDescription.value.length > 0) {
				sCaption = frmData.txtRecordDescription.value;
				if (OpenHR.activeFrame().find('#RecordEdit_PageTitle')) {
					var frmRecordEditForm = OpenHR.getForm("workframe", "frmRecordEditForm");

					OpenHR.updateDialogPageTitle();

				}
			}
		}
		else {
			sCaption = "New Record";
			menu_SetmnutoolRecordPositionCaption(sCaption);
			if (OpenHR.activeFrame().find('#RecordEdit_PageTitle')) {
				frmRecordEditForm = OpenHR.getForm("workframe", "frmRecordEditForm");
				OpenHR.activeFrame().find('#RecordEdit_PageTitle').html(frmRecordEditForm.txtOriginalPageTitle.value + ' - ' + sCaption);
			}
			menu_toolbarEnableItem('mnutoolChangeOrderRecord', true);
		}

		menu_setVisibleMenuItem("mnutoolHistory", true);

		//dynamically created function, found in menu.ascx...
			window.top.menu_refreshHistoryScreensMenu(frmRecEdit.txtCurrentScreenID.value);

			window.top.$("#mnutoolHistory").click();

			// Standard reports (toolbar)
		if (menu_isSSIMode() == true) {
				menu_setVisibletoolbarGroup("mnutoolCalendarReportsRecord", false);  //hide for SSI
		}
		else {
				menu_setVisibleMenuItem("mnutoolAbsenceCalendarRecord", fStdRptAbsenceCalendarVisible);	//Menu Item - Absence Calendar
				menu_toolbarEnableItem("mnutoolAbsenceCalendarRecord", fStdRptAbsenceCalendarEnabled);	//Toolbar Icon
				menu_setVisibleMenuItem("mnutoolAbsenceBreakdownRecord", fStdRptAbsenceBreakdownVisible);	//Menu Item - Absence Breakdown
				menu_toolbarEnableItem("mnutoolAbsenceBreakdownRecord", fStdRptAbsenceBreakdownEnabled);	//Toolbar Icon
				menu_setVisibleMenuItem("mnutoolBradfordRecord", fStdRptBradfordFactorVisible);	//Menu Item - Bradford Factor
				menu_toolbarEnableItem("mnutoolBradfordRecord", fStdRptBradfordFactorEnabled);	//Toolbar Icon
				menu_setVisibleMenuItem("mnutoolCalendarReportsRecord", fCalendarReportsVisible);	//Menu Item - Calendar Reports
				menu_toolbarEnableItem("mnutoolCalendarReportsRecord", fCalendarReportsEnabled);	//Toolbar Icon
				//Hide Calendar Reports Group if all items are hidden.
				menu_setVisibletoolbarGroup("mnutoolCalendarReportsRecord", (fCalendarReportsVisible || fStdRptAbsenceCalendarVisible || fStdRptAbsenceBreakdownVisible || fStdRptBradfordFactorVisible || fMailMergeVisible));
		}
	
		// Mail Merge (Toolbar!)
		if (fMailMergeVisible && !menu_isSSIMode()) {
				menu_setVisibleMenuItem("mnutoolMailMergeRecord", true);
				menu_toolbarEnableItem("mnutoolMailMergeRecord", fMailMergeEnabled);
		} else {
				menu_setVisibleMenuItem("mnutoolMailMergeRecord", false);
				menu_setVisibletoolbarGroup("mnutoolMailMergeRecord", false);
				//I think its safe to include not showing Record Position items here
				// menu_setVisibletoolbarGroup("mnutoolRecordPosition", false);
				menu_setVisibletoolbarGroup("mnutoolRecordPosition", true);

		}
			
		//Toggle Mandatory Fields button
		menu_toolbarEnableItem('mnutoolMFRecord', true);

		// Disable the history menu for new records.
		if (frmRecEdit.txtCurrentRecordID.value <= 0) {
			//menu_enableMenuItem("mnutoolHistory", false)
			//The disabling is now done in the Menu.ascx file (around line 300)
		}
		
		//TODO: NPG; 
		//this used to call a function in the ctlRecordEdit activeX control...
		//sRecEditDate = String(frmRecEdit.ctlRecordEdit.TBCourseCancelDateValue());		

			var TB_CourseCancelDateColumnID = window.top.$("#txtTB_CourseCancelDateColumnID").val();
		sRecEditDate = $("[data-columnID='" + TB_CourseCancelDateColumnID + "']").val();		
		if (sRecEditDate) {
			sRecEditDate = sRecEditDate.toUpperCase();
		}
		
		// Course Booking group
		//sDummyDate = String(dtDummyDate.getVarDate());
		//sDummyDate = sDummyDate.toUpperCase();
		//sDummyDate is now a blank, not some weird 1899 baloney.
		sDummyDate = "";

		fCancelCourseVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtTB_CourseTableID.value) &&
			isDMIUser) &&
			(!menu_isSSIMode());
		
		fCancelCourseEnabled = ((frmRecEdit.txtCurrentRecordID.value > 0) &&
					isDMIUser &&
					(frmMenuInfo.txtTB_CourseCancelDateColumnID.value > 0) &&
					(frmMenuInfo.txtTB_TBTableID.value > 0) &&
					(frmMenuInfo.txtTB_TBTableSelect.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnID.value > 0) &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
						(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")) &&
					(sRecEditDate == sDummyDate));				
	}
	else {
		if (sCurrentWorkPage == "FIND") {

				frmFind = OpenHR.getForm("workframe", "frmFindForm");

				lngRecordID = menu_selectedRecordID();

			if (lngRecordID == "" | lngRecordID == null) {
				lngRecordID = 0;
			}

			//toolbar always visible now
			//abMainMenu.Bands("mnubandMainToolBar").visible = true;

			//mnutoolRecord is the context menu record item, which is currently excluded from v8.
			//abMainMenu.Tools("mnutoolRecord").visible = true;

			showDefaultRibbon();

			//New functionality: switch ribbon tab to required item.
				window.parent.$("#toolbarRecordFind").parent().show();
				window.parent.$("#toolbarRecordFind").click();
			
			// Enable the record editing options as necessary.
			menu_setVisibleMenuItem("mnutoolNewRecordFind", true);
			menu_setVisibleMenuItem("mnutoolCopyRecordFind", true);
			menu_setVisibleMenuItem("mnutoolEditRecordFind", true);
			menu_setVisibleMenuItem("mnutoolDeleteRecordFind", true);

			var fMnutoolNewRecordFind = ((frmFind.txtInsertGranted.value.toUpperCase() == "TRUE") &&
		(isDMIUser ||
			(frmFind.txtCurrentParentTableID.value > 0) ||
			(frmFind.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) ||
			(frmFind.txtQuickEntry.value.toUpperCase() == "TRUE")));
			
			if (IsMultiSelectionModeOn()) {
				menu_toolbarEnableItem("mnutoolNewRecordFind", false);
				menu_toolbarEnableItem("mnutoolCopyRecordFind", false);
				menu_toolbarEnableItem("mnutoolEditRecordFind", false);
				menu_toolbarEnableItem("mnutoolDeleteRecordFind", false);
			} else {

				menu_toolbarEnableItem("mnutoolNewRecordFind", fMnutoolNewRecordFind);
				menu_toolbarEnableItem("mnutoolCopyRecordFind", fMnutoolNewRecordFind && (lngRecordID > 0));
				menu_toolbarEnableItem("mnutoolEditRecordFind", (lngRecordID > 0));
				menu_toolbarEnableItem("mnutoolDeleteRecordFind", ((frmFind.txtDeleteGranted.value.toUpperCase() == "TRUE") &&
						(lngRecordID > 0) &&
						(isDMIUser ||
						(frmFind.txtCurrentParentTableID.value > 0) ||
						(frmFind.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) ||
						(frmFind.txtQuickEntry.value.toUpperCase() == "TRUE"))));
			}
		
			if (fMnutoolNewRecordFind) {
				menu_SetmnutoolButtonCaption("mnutoolEditRecordFind", "Edit");
			} else {
				menu_SetmnutoolButtonCaption("mnutoolEditRecordFind", "View");
			}

				menu_setVisibleMenuItem("mnutoolParentRecordFind", false);
			menu_toolbarEnableItem("mnutoolParentRecordFind", (frmFind.txtCurrentParentTableID.value > 0));
				menu_setVisibleMenuItem("mnutoolBackRecordFind", false);
			menu_toolbarEnableItem("mnutoolBackRecordFind", (parseInt(frmFind.txtCurrentRecordID.value) > 0));

			menu_toolbarEnableItem("mnutoolAccessLinksFind", (menu_isSSIMode() && (lngRecordID > 0)));

				menu_setVisibletoolbarGroupById("mnuSectionRecordFindNavigate", (!(window.top.$("#mnutoolAccessLinksFind").hasClass("hidden"))));

			if (menu_isSSIMode()) {
				menu_setVisibletoolbarGroupById('mnuSectionRecordFindOrder', false);
			}
			
			//TODO menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", true);
			//TODO menu_setVisibleMenuItem("mnutoolLocateRecords", (parseInt(frmFind.txtFirstColumnType.value) != -7));
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.Clear();
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("True");
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("False");
			//TODO menu_setVisibleMenuItem("mnutoolLocateRecordsLogic", (parseInt(frmFind.txtFirstColumnType.value) == -7));
			//TODO

			//hide group for SSI...
			if (menu_isSSIMode() == true) {
					menu_setVisibletoolbarGroup("mnutoolFilter", false);
			}
			else {
					menu_setVisibleMenuItem("mnutoolChangeOrderRecordFind", true);
					menu_toolbarEnableItem("mnutoolChangeOrderRecordFind", (isDMIUser ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
					menu_setVisibleMenuItem("mnutoolFilterRecordFind", true);
					menu_toolbarEnableItem("mnutoolFilterRecordFind", (isDMIUser ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
					menu_setVisibleMenuItem("mnutoolClearFilterRecordFind", true);
					menu_toolbarEnableItem("mnutoolClearFilterRecordFind", (frmFind.txtFilterDef.value.length > 0));
					menu_setVisibletoolbarGroupById('mnuSectionReportsAndUtility', true);
			}


			//frmData = window.parent.frames("dataframe").document.forms("frmData");
				frmData = window.parent.document.getElementById("frmData");
			//TODO are we setting this?
				
			if (frmFind.txtRecordCount.value > 0) {
				iStartPosition = parseInt(frmFind.txtFirstRecPos.value);
				iEndPosition = iStartPosition - 1 + parseInt(frmFind.txtRecordCount.value);

				sCaption = "Record(s) : " +
						frmFind.txtTotalRecordCount.value;
			}
			else {
				sCaption = "No Records";
			}

			if (frmFind.txtFilterDef.value.length > 0) {
				sCaption = sCaption + " (filtered)";
			}

			//if ($("#frmData").length > 0) {
			//	if (frmData.txtRecordDescription.value.length > 0) {
			//		sCaption = sCaption + " : " + frmData.txtRecordDescription.value;
			//	}
			//}					



			menu_setVisibleMenuItem("mnutoolPositionRecordFind", true);
			menu_SetmnutoolRecordPositionCaption(sCaption);
				//<MWD change>
				menu_setVisibleMenuItem("mnutoolHistory", false);
				//menu_setVisibletoolbarGroup("mnutoolCalendarReportsRecord", false);
				//</MWD change>

			fBookCourseVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_WaitListTableID.value) &&
				isDMIUser) &&
				(!menu_isSSIMode());

			fBookCourseEnabled = ((lngRecordID > 0) &&
					isDMIUser &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListCourseTitleColumnSelect.value.toUpperCase() == "TRUE"));
			fTransferBookingVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_TBTableID.value) &&
					isDMIUser &&
					((frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_EmpTableID.value) ||
					(frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_CourseTableID.value)));
			fTransferBookingEnabled = ((lngRecordID > 0) &&
					isDMIUser &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBTableUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
					(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")));
			fAddFromWaitingListVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_TBTableID.value) &&
					isDMIUser &&
					(frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_CourseTableID.value));
			fAddFromWaitingListEnabled = ((frmFind.txtCancelDateColumn.value.toUpperCase() == "FALSE") &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					isDMIUser &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListCourseTitleColumnSelect.value.toUpperCase() == "TRUE"));
			fCancelBookingVisible = fTransferBookingVisible;
			fCancelBookingEnabled = ((lngRecordID > 0) &&
					isDMIUser &&
					(frmMenuInfo.txtTB_TBTableUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
					(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")));
			fBulkBookingVisible = fAddFromWaitingListVisible;
			fBulkBookingEnabled = ((frmFind.txtCancelDateColumn.value.toUpperCase() == "FALSE") &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					isDMIUser &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE"));
		}
		else {
			if ((sCurrentWorkPage == "TBTRANSFERCOURSEFIND") ||
					(sCurrentWorkPage == "TBBOOKCOURSEFIND") ||
					(sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") ||
					(sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND")) {
				menu_disableFindMenu();
				var frmOptionData = document.getElementById('frmOptionData');
				if (frmOptionData.txtRecordCount.value > 0) {
					iStartPosition = parseInt(frmOptionData.txtFirstRecPos.value);
					iEndPosition = iStartPosition - 1 + parseInt(frmOptionData.txtRecordCount.value);
					sCaption = "Records " +
							iStartPosition +
							" to " +
							iEndPosition +
							" of " +
							frmOptionData.txtTotalRecordCount.value;
				}
				else {
					sCaption = "No Records";
				}
				menu_setVisibleMenuItem("mnutoolRecordPosition", true);
				menu_SetmnutoolRecordPositionCaption(sCaption);
				$("#mnutoolHistory").hide();

			}
			else if ((sCurrentWorkPage == "LINKFIND") ||
								(sCurrentWorkPage == "LOOKUPFIND")) {

				// TODO: This does not work yet.
				
				//frmOption = window.parent.frames("optiondataframe").document.forms("frmOptionData");
				frmOption = document.getElementById("frmOptionData");

				menu_setVisibleMenuItem("mnubandMainToolBar", true);
				menu_setVisibleMenuItem("mnutoolRecord", false);
				
				// Enable the record editing options as necessary.
				menu_setVisibleMenuItem("mnutoolNewRecord", false);
				menu_toolbarEnableItem("mnutoolNewRecord", false);
				menu_setVisibleMenuItem("mnutoolCopyRecord", false);
				menu_toolbarEnableItem("mnutoolCopyRecord", false);
				menu_setVisibleMenuItem("mnutoolEditRecord", false);
				menu_toolbarEnableItem("mnutoolEditRecord", false);
				menu_setVisibleMenuItem("mnutoolSaveRecord", false);
				menu_setVisibleMenuItem("mnutoolDeleteRecord", false);
				menu_toolbarEnableItem("mnutoolDeleteRecord", false);
				menu_setVisibleMenuItem("mnutoolParentRecord", false);
				menu_toolbarEnableItem("mnutoolParentRecord", false);
				menu_setVisibleMenuItem("mnutoolBackRecord", false);
				menu_toolbarEnableItem("mnutoolBackRecord", false);

				menu_setVisibleMenuItem("mnutoolFirstRecord", true);
				menu_toolbarEnableItem("mnutoolFirstRecord", (frmOption.txtIsFirstPage.value.toUpperCase() == "FALSE"));
				menu_setVisibleMenuItem("mnutoolPreviousRecord", true);
				menu_toolbarEnableItem("mnutoolPreviousRecord", (frmOption.txtIsFirstPage.value.toUpperCase() == "FALSE"));
				menu_setVisibleMenuItem("mnutoolNextRecord", true);
				menu_toolbarEnableItem("mnutoolNextRecord", (frmOption.txtIsLastPage.value.toUpperCase() == "FALSE"));
				menu_setVisibleMenuItem("mnutoolLastRecord", true);
				menu_toolbarEnableItem("mnutoolLastRecord", (frmOption.txtIsLastPage.value.toUpperCase() == "FALSE"));

				menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", true);
				menu_setVisibleMenuItem("mnutoolLocateRecords", (parseInt(frmOption.txtFirstColumnType.value) != -7));
				//TODO:
				//abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.Clear();
				//abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("True");
				//abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("False");
				//abMainMenu.Tools("mnutoolLocateRecordsLogic").visible = (parseInt(frmOption.txtFirstColumnType.value) == -7);

				menu_setVisibleMenuItem("mnutoolFind", false);

				// Hide the QuickFind, Order and Filter options until they're developed.
				menu_setVisibleMenuItem("mnutoolQuickFind", false);
				menu_setVisibleMenuItem("mnutoolOrder", false);
				menu_setVisibleMenuItem("mnutoolFilter", false);
				menu_setVisibleMenuItem("mnutoolClearFilterRecord", false);
				menu_toolbarEnableItem("mnutoolClearFilterRecord", false);
				menu_setVisibleMenuItem("mnutoolPrint", false);

				if (frmOption.txtRecordCount.value > 0) {
					iStartPosition = parseInt(frmOption.txtFirstRecPos.value);
					iEndPosition = iStartPosition - 1 + parseInt(frmOption.txtRecordCount.value);
					sCaption = "Records " +
							iStartPosition +
							" to " +
							iEndPosition +
							" of " +
							frmOption.txtTotalRecordCount.value;
				}
				else {
					sCaption = "No Records";
				}

				menu_setVisibleMenuItem("mnutoolRecordPosition", true);
				//abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolRecordPosition").caption = sCaption;
				menu_SetmnutoolRecordPositionCaption(sCaption);

				//abMainMenu.Tools("mnutoolHistory").visible = false;
				$("#mnutoolHistory").hide();
				
				//hide unused toolbargroups
				menu_setVisibletoolbarGroup("mnutoolFind", false);
				menu_setVisibletoolbarGroup("mnutoolNewRecord", false);
				menu_setVisibletoolbarGroup("mnutoolOrder", false);
			
			}
			else {

				if (sCurrentWorkPage == "DEFSEL" || sCurrentWorkPage == "STD_ABSENCECALENDAR"
						|| sCurrentWorkPage == "STDRPT_DEF_ABSENCE" || sCurrentWorkPage == "UTIL_RUN_PROMPTEDVALUES") {
					$("#toolbarUtilities").show();
					$("#toolbarUtilities").click();
				} else {
					$("#mnutoolRecord").hide();
					$("#mnutoolHistory").hide();
				}


				if (sCurrentWorkPage == "UTIL_DEF_PICKLIST") {

						return;
					// TODO: This does not work yet.

					abMainMenu.Bands("mnubandMainToolBar").visible = true;
					abMainMenu.Tools("mnutoolRecord").visible = false;

					abMainMenu.Tools("mnutoolNewRecord").visible = false;
					abMainMenu.Tools("mnutoolCopyRecord").visible = false;
					abMainMenu.Tools("mnutoolEditRecord").visible = false;
					abMainMenu.Tools("mnutoolSaveRecord").visible = false;
					abMainMenu.Tools("mnutoolDeleteRecord").visible = false;
					abMainMenu.Tools("mnutoolParentRecord").visible = false;
					abMainMenu.Tools("mnutoolBack").visible = false;
					abMainMenu.Tools("mnutoolFirstRecord").visible = false;
					abMainMenu.Tools("mnutoolPreviousRecord").visible = false;
					abMainMenu.Tools("mnutoolNextRecord").visible = false;
					abMainMenu.Tools("mnutoolLastRecord").visible = false;

					abMainMenu.Tools("mnutoolLocateRecordsCaption").visible = false;
					abMainMenu.Tools("mnutoolLocateRecords").visible = false;
					abMainMenu.Tools("mnutoolLocateRecordsLogic").visible = false;

					abMainMenu.Tools("mnutoolFind").visible = false;

					abMainMenu.Tools("mnutoolQuickFind").visible = false;
					abMainMenu.Tools("mnutoolOrder").visible = false;
					abMainMenu.Tools("mnutoolFilter").visible = false;
					abMainMenu.Tools("mnutoolClearFilter").visible = false;
					abMainMenu.Tools("mnutoolPrint").visible = false;

					frmWork = window.parent.frames("workframe").document.forms("frmDefinition");
					if (frmWork.ssOleDBGrid.Rows == 0) {
						sCaption = "No Records";
					}
					else {
						if (frmWork.ssOleDBGrid.Rows == 1) {
							sCaption = "1 Record";
						}
						else {
							sCaption = frmWork.ssOleDBGrid.Rows + " Records";
						}
					}

					abMainMenu.Tools("mnutoolRecordPosition").visible = true;
					abMainMenu.Bands("mnubandMainToolBar").tools("mnutoolRecordPosition").caption = sCaption;

					abMainMenu.Tools("mnutoolHistory").visible = false;

				}
				else {
					if (sCurrentWorkPage == "EVENTLOG") {
							// Hide unwanted tabs
							$("#toolbarRecordFind").parent().hide();
							$("#toolbarRecord").parent().hide();
							$("#toolbarRecordAbsence").parent().hide();
							$("#toolbarRecordQuickFind").parent().hide();
							$("#toolbarRecordSortOrder").parent().hide();
							$("#toolbarRecordFilter").parent().hide();
							$("#toolbarRecordMailMerge").parent().hide();
							$("#toolbarDelegateBookingTransfer").parent().hide();
							$("#toolbarDelegateBookingBulkBooking").parent().hide();
							$("#toolbarReportFind").parent().hide();
							$("#toolbarReportNewEditCopy").parent().hide();
							$("#toolbarReportRun").parent().hide();
							$("#toolbarUtilitiesFind").parent().hide();
							$("#toolbarUtilitiesNewEditCopy").parent().hide();
							$("#toolbarToolsFind").parent().hide();
							//$("#toolbarEventLogFind").parent().hide();
							$("#toolbarEventLogView").parent().hide();
							$("#toolbarWFPendingStepsFind").parent().hide();
							$("#toolbarAdminConfig").parent().hide();
							$("#toolbarStandardReportConfig").parent().hide();

							// Enable buttons
							menu_setVisibleMenuItem("mnutoolViewEventLogFind", true);
							menu_setVisibleMenuItem("mnutoolPurgeEventLogFind", true);
							menu_setVisibleMenuItem("mnutoolEmailEventLogFind", false);
							menu_setVisibleMenuItem("mnutoolDeleteEventLogFind", true);
							
							// Enable the Event Log tab
							$("#toolbarEventLogFind").parent().show();
							$("#toolbarEventLogFind").click();

							var frmLog = document.getElementById("frmLog");

							if (frmLog.txtELLoaded.value == 1) {
								frmData = OpenHR.getForm("dataframe", "frmData");
								var bLastPage = frmData.txtELIsLastPage.value;
								var bFirstPage = frmData.txtELIsFirstPage.value;
								}
							}
							else {
								if ((sCurrentWorkPage == "PCCONFIGURATION") ||
									(sCurrentWorkPage == "CONFIGURATION")) {
									// handled in configuration.configuration_window_onload()
									menu_toolbarEnableItem('mnutoolSaveAdminConfig', !definitionChanged());
								} else {
									if (sCurrentWorkPage == "ORGCHART") {
										$("#toolbarOrgChart").parent().show();
										$("#toolbarOrgChart").click();

										if (window.currentLayout != "winkit") {
											//show the additional 'select nodes' button
											$('#toolbarOrgChart').parent().find('.notwinkit').show();
										}
									}
								}
						}
					}
				}
			}
		}
		}

	if (window.parent.$("#txtSysPerm_INTRANET_NEW_USER").length) {
		if (window.parent.$("#txtSysPerm_INTRANET_NEW_USER").val() == 1) {
			menu_enableMenuItem("mnutoolNewUser", window.parent.$("#txtNewUserGranted").val());
		}
		else {
			menu_enableMenuItem("mnutoolNewUser", false);
		}
	}
	else {
		menu_enableMenu("#mnutoolNewUser", false);
	}

	if (window.parent.$("#txtSysPerm_CONFIGURATION_USER").length) {
		if (window.parent.$("#txtSysPerm_CONFIGURATION_USER").val() == 1) {
			menu_enableMenuItem("mnutoolConfiguration", true);
		}
		else {
			menu_enableMenuItem("mnutoolConfiguration", false);
		}
	}
	else {
		menu_enableMenuItem("mnutoolConfiguration", false);
	}

	menu_enableMenuItem("mnutoolCurrentUsers", window.parent.$("#txtCurrentUsersGranted").val());

	var bChangePassword = (window.parent.$("#txtIsWindowsLogon")[0].value == "False");
	menu_setVisibleMenuItem("mnutoolPasswordChange", bChangePassword);
	menu_setVisibleMenuItem("mnutoolFixedPasswordChange", bChangePassword);

	menu_setVisibleMenuItem("mnutoolAbsenceBreakdownRecord", fStdRptAbsenceBreakdownVisible);
	menu_toolbarEnableItem("mnutoolAbsenceBreakdownRecord", fStdRptAbsenceBreakdownEnabled);
	menu_setVisibleMenuItem("mnutoolBradfordRecord", fStdRptBradfordFactorVisible);
	menu_toolbarEnableItem("mnutoolBradfordRecord", fStdRptBradfordFactorEnabled);
	
	menu_setVisibleMenuItem("mnutoolCancelCourseRecord", fCancelCourseVisible);
	menu_toolbarEnableItem("mnutoolCancelCourseRecord", fCancelCourseEnabled);
	menu_setVisibletoolbarGroupById("mnuSectionRecordCourseBooking", fCancelCourseVisible);
	if (fCancelCourseVisible) window.parent.$('#mnutoolCancelCourseRecord').css('width', '100%');
	
	menu_setVisibleMenuItem("mnutoolBookCourseFind", fBookCourseVisible);
	menu_toolbarEnableItem("mnutoolBookCourseFind", fBookCourseEnabled);
	menu_setVisibletoolbarGroupById("mnuSectionRecordFindCourseBooking", fBookCourseVisible);
	if (fBookCourseVisible) window.parent.$('#mnutoolBookCourseFind').css('width', '100%');
	
	menu_setVisibleMenuItem("mnutoolTransferBookingRecordFind", fTransferBookingVisible);
	menu_toolbarEnableItem("mnutoolTransferBookingRecordFind", fTransferBookingEnabled);
	menu_setVisibleMenuItem("mnutoolAddFromWaitingListRecordFind", fAddFromWaitingListVisible);
	menu_toolbarEnableItem("mnutoolAddFromWaitingListRecordFind", fAddFromWaitingListEnabled);
	menu_setVisibleMenuItem("mnutoolCancelBookingRecordFind", fCancelBookingVisible);
	menu_toolbarEnableItem("mnutoolCancelBookingRecordFind", fCancelBookingEnabled);
	menu_setVisibleMenuItem("mnutoolBulkBookingRecordFind", fBulkBookingVisible);
	menu_toolbarEnableItem("mnutoolBulkBookingRecordFind", fBulkBookingEnabled);

	fCurrentlyInBookingAction = ((sCurrentWorkPage == "TBTRANSFERCOURSEFIND") ||
	(sCurrentWorkPage == "TBBOOKCOURSEFIND") ||
	(sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") ||
	(sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND"));

	menu_setVisibletoolbarGroupById("mnuSectionRecordFindTrainingBooking", (fBulkBookingVisible || fAddFromWaitingListVisible || fTransferBookingVisible || fCancelBookingVisible) && (!fCurrentlyInBookingAction));
	
	fCanSeeLookupTableMenu = true;
	try {
		if (window.parent.$("#txtSysPerm_MENU_VIEWLOOKUPTABLES").val() == 0) {
			fCanSeeLookupTableMenu = false;
		}
	}
	catch (e) { }

	//abMainMenu.Bands("mnubandDatabase").Tools("mnutoolTableScreens").visible = fCanSeeLookupTableMenu;
	//HC: Is this a menu item only?
	//		abMainMenu.Tools("mnutoolCustomReports").enabled = (txtCustomReportsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolCrossTabs").enabled = (txtCrossTabsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolCalendarReports").enabled = (txtCalendarReportsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolMailMerge").enabled = (txtMailMergeGranted.value == "True");
	//HC: Seems redundant
	//JDM: - Oh no its not!!!
	menu_enableMenuItem("mnutoolCustomReports", window.parent.$("#txtCustomReportsGranted").val());
	menu_enableMenuItem("mnutoolCrossTabs", window.parent.$("#txtCrossTabsGranted").val());
	menu_enableMenuItem("mnutoolNineBox", window.parent.$("#txtNineBoxGridGranted").val());
	menu_enableMenuItem("mnutoolCalendarReports", window.parent.$("#txtCalendarReportsGranted").val());
	menu_enableMenuItem("mnutoolMailMerge", window.parent.$("#txtMailMergeGranted").val());
	menu_enableMenuItem("mnutoolDataTransfer", window.parent.$("#txtDataTransferGranted").val());
		
	menu_setVisibleMenuItem("mnutoolTableScreens", fCanSeeLookupTableMenu);

	menu_setVisibleMenuItem("mnutoolWorkflow", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflow", window.parent.$("#txtWorkflowGranted").val());

	menu_setVisibleMenuItem("mnutoolWorkflowPopup", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowPopup", true);

	menu_setVisibleMenuItem("mnutoolWorkflowPendingSteps", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowPendingSteps", true);
	
	menu_setVisibleMenuItem("mnutoolWorkflowOutOfOffice", frmMenuInfo.txtWFOutOfOfficeEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowOutOfOffice", frmMenuInfo.txtWFOutOfOfficeEnabled.value);
	

	menu_enableMenuItem("mnutoolCalculations", window.parent.$("#txtCalculationsGranted").val());
	menu_enableMenuItem("mnutoolFilters", window.parent.$("#txtFiltersGranted").val());
	menu_enableMenuItem("mnutoolPicklists", window.parent.$("#txtPicklistsGranted").val());
	menu_enableMenuItem("mnutoolEventLog", window.parent.$("#txtEventLogGranted").val());
	menu_enableMenuItem("mnutoolNewUser", window.parent.$("#txtNewUserGranted").val());
	menu_enableMenuItem("mnutoolQuickEntry", window.parent.$("#txtQuickAccessGranted").val());

	try {
		
	}
	catch (e) { }

	//NOT REQUIRED
	//		try
	//			{
	//			abMainMenu.Attach();
	//			abMainMenu.RecalcLayout();
	//			abMainMenu.ResetHooks();
	//			abMainMenu.Refresh();
	//			}
	//		catch(e) {}

	//TODO: not sure what this does other than just pb....
	//		frmRefresh = window.parent.frames("refreshframe").document.forms("frmRefresh");
	//		if (frmRefresh != null) {
	//			frmRefresh.submit();
	//		}


	//NOT REQUIRED
	// Adjust the framset dimensions to suit the size of the menu.
	//		lngMenuHeight = abMainMenu.Bands.Item("mnuMainMenu").height;
	//		if (abMainMenu.Bands("mnubandMainToolBar").visible == true) {
	//			lngMenuHeight = lngMenuHeight + 
	//				abMainMenu.Bands("mnubandMainToolBar").height;
	//		}
	//		
	//		sTemp = new String(lngMenuHeight);
	//		if (frmMenuInfo.txtIEVersion.value >= 5.5) {
	//			window.parent.document.all.item("mainframeset").rows = "0, *, 0, 0, " + sTemp;
	//		}
	//		else {
	//			window.parent.document.all.item("mainframeset").rows = sTemp + ", *, 0, 0, 0";
	//		}
	//		
	//		//have to specify this stuff for the actbar control now it's wrapped...
	//		window.parent.document.all.item("mainframeset").rows = sTemp + ", *, 0, 0, 0";
	//		
	//		abMainMenu.style.top = "0px";
	//		abMainMenu.style.left = "0px";
	//		abMainMenu.style.width = screen.width;   //"100%";

	//}

	if (sCurrentWorkPage == "BULKBOOKING") {
		menu_disableFindMenu();
	} else {
		menu_enableMenu();
	}
	
}
//	
function menu_enableMenu() {
	//TODO: run through and re-enable all items.
	if (menu_isSSIMode() && (window.parent.window.currentLayout != "winkit")) {
		//$(".FixedLinksLeft").fadeIn("slow");
		//$("#officebar").show('drop', { direction: 'left' }, 1000);
		$("#officebar").fadeIn("fast");
	}
	//$(".FixedLinksLeft").show("slide", { direction: "left" }, 1000);
	
	//	var iLoop;

	//We now always enable the menu items (NB not the tools), so this section is...
	//NOT REQUIRED

	//	CloseWait();
	//	headings only
	//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnuMainMenu").Tools.Count(); iLoop++) {
	//		abMainMenu.Bands.Item("mnuMainMenu").Tools.Item(iLoop).Enabled = true;
	//	}
	//ribbon icons only.
	//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Count(); iLoop++) {
	//		abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Item(iLoop).Enabled = true;
	//	}

}

function menu_disableMenu() {
	if (menu_isSSIMode() && (window.currentLayout != "winkit")) {
		//$("#officebar").hide('drop', { direction: 'right' }, 1000);
		$("#officebar").fadeOut("fast");
	} else { //disable menu items on Record tab.
		menu_toolbarEnableItem('mnutoolNewRecord', false);
		menu_toolbarEnableItem('mnutoolCopyRecord', false);
		menu_toolbarEnableItem('mnutoolEditRecord', false);
		menu_toolbarEnableItem('mnutoolSaveRecord', false);
		menu_toolbarEnableItem('mnutoolDeleteRecord', false);

		menu_toolbarEnableItem('mnutoolParentRecord', false);
		menu_toolbarEnableItem('mnutoolBackRecord', false);
		menu_toolbarEnableItem('mnutoolFirstRecord', false);
		menu_toolbarEnableItem('mnutoolPreviousRecord', false);
		menu_toolbarEnableItem('mnutoolNextRecord', false);
		menu_toolbarEnableItem('mnutoolLastRecord', false);

		menu_toolbarEnableItem('mnutoolFindRecord', false);
		menu_toolbarEnableItem('mnutoolQuickFindRecord', false);
		menu_toolbarEnableItem('mnutoolChangeOrderRecord', false);
		menu_toolbarEnableItem('mnutoolFilterRecord', false);
		menu_toolbarEnableItem('mnutoolClearFilterRecord', false);

		menu_toolbarEnableItem('mnutoolCancelCourseRecord', false);

		menu_toolbarEnableItem('mnutoolCalendarReportsRecord', false);
		menu_toolbarEnableItem('mnutoolAbsenceBreakdownRecord', false);
		menu_toolbarEnableItem('mnutoolAbsenceCalendarRecord', false);
		menu_toolbarEnableItem('mnutoolBradfordRecord', false);

		menu_toolbarEnableItem('mnutoolMailMergeRecord', false);
		menu_toolbarEnableItem('mnutoolMFRecord', false);
	}

//	var iLoop;
//	
//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnuMainMenu").Tools.Count(); iLoop++) {
//		abMainMenu.Bands.Item("mnuMainMenu").Tools.Item(iLoop).Enabled = false;
//	}

//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Count(); iLoop++) {
//		abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Item(iLoop).Enabled = false;
//	}

//	abMainMenu.RecalcLayout();
//	abMainMenu.ResetHooks();
//	abMainMenu.Refresh();
}


function menu_disableFindMenu() {
	if (menu_isSSIMode() && (window.currentLayout != "winkit")) {
		//$("#officebar").hide('drop', { direction: 'right' }, 1000);
		$("#officebar").fadeOut("fast");
	}
	else { //disable menu items on Record tab.
		menu_toolbarEnableItem('mnutoolNewRecordFind', false);
		menu_toolbarEnableItem('mnutoolEditRecordFind', false);
		menu_toolbarEnableItem('mnutoolCopyRecordFind', false);
		menu_toolbarEnableItem('mnutoolDeleteRecordFind', false);

		menu_toolbarEnableItem('mnutoolParentRecordFind', false);
		menu_toolbarEnableItem('mnutoolBackRecordFind', false);

		menu_toolbarEnableItem('mnutoolChangeOrderRecordFind', false);
		menu_toolbarEnableItem('mnutoolFilterRecordFind', false);
		menu_toolbarEnableItem('mnutoolClearFilterRecordFind', false);

		menu_toolbarEnableItem('mnutoolBulkBookingRecordFind', false);
		menu_toolbarEnableItem('mnutoolAddFromWaitingListRecordFind', false);
		menu_toolbarEnableItem('mnutoolTransferBookingRecordFind', false);
		menu_toolbarEnableItem('mnutoolCancelBookingRecordFind', false);

		// Hide the reports and utility run toolbar when booking in action (e.g. Training Booking, Cancel booking). (E.g. On bulk booking edit a record..) on delegate bookings page
		menu_setVisibletoolbarGroupById('mnuSectionReportsAndUtility', false);
	}
}

function menu_enableFindMenu() {
	if (menu_isSSIMode() && (window.currentLayout != "winkit")) {
		//$("#officebar").hide('drop', { direction: 'right' }, 1000);
		$("#officebar").fadeIn("fast");
	}
	else { //disable menu items on Record tab.		
		menu_toolbarEnableItem('mnutoolNewRecordFind', true);
		menu_toolbarEnableItem('mnutoolEditRecordFind', true);
		menu_toolbarEnableItem('mnutoolCopyRecordFind', true);
		menu_toolbarEnableItem('mnutoolDeleteRecordFind', true);

		menu_toolbarEnableItem('mnutoolParentRecordFind', true);
		menu_toolbarEnableItem('mnutoolBackRecordFind', true);

		menu_toolbarEnableItem('mnutoolChangeOrderRecordFind', true);
		menu_toolbarEnableItem('mnutoolFilterRecordFind', true);
		menu_toolbarEnableItem('mnutoolClearFilterRecordFind', true);

		menu_toolbarEnableItem('mnutoolBulkBookingRecordFind', true);
		menu_toolbarEnableItem('mnutoolAddFromWaitingListRecordFind', true);
		menu_toolbarEnableItem('mnutoolTransferBookingRecordFind', true);
		menu_toolbarEnableItem('mnutoolCancelBookingRecordFind', true);
	}
}

function menu_saveChanges(psAction, pfPrompt, pfTBOverride) {

	// Prompt the user to save changes if required.
	var iResult;
	var sCurrentPage;
	var frmRecEdit;
	var frmDataArea;
	var frmRecEditArea;

	sCurrentPage = OpenHR.currentWorkPage();
	if ((sCurrentPage == "RECORDEDIT") ||
		(sCurrentPage == "LOOKUPFIND") ||
		(sCurrentPage == "LINKFIND") ||
		(sCurrentPage == "TBTRANSFERCOURSEFIND")) {

		if (psAction != "COPY") { //Don't remove the colour picker container if we are copying a record
			$('.sp-container').remove();
		}

		iResult = 6; // Continue navigation

		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");

		if (OpenHR.activeFrame().find("#ctlRecordEdit #changed").val() == "true") {
			
			// If prompting, the choice it between discarding changes or cancelling the navigation
			// If not prompting, it is a straight save
			if (pfPrompt == true) {

				iResult = 0;
				
				//iResult = OpenHR.messageBox("Record changed. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 36);

				//if (iResult == 6) {
				//	// 'OK' -> discard changes and continue navigation
				//}
				//else if (iResult == 7) { // 'Cancel' -> Cancel navigation and return to calling form without saving
				//	// Cancel the changes and do not save them.
				//	iResult = 2; // 2 = vbCancel -> Continue Editing
				//}
				//else {
				//	// Do not save changes, and cancel the operation that called this function.
				//}

			} else {
				// Try to save the changes.
				// Get the data.asp to get the save the current record.
				frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
				frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

				// Validate the record first.				

				if (validateSave() == true) {
					frmDataArea.txtAction.value = "SAVE";
					frmDataArea.txtReaction.value = psAction;

					frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
					frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
					frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
					frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
					frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
					frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
					frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
					frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
					frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
					frmDataArea.txtOriginalRecordID.value = frmRecEditArea.txtOriginalRecordID.value;
					frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
					frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
					frmDataArea.txtDefaultCalcCols.value = CalculatedDefaultColumns();
					frmDataArea.txtInsertUpdateDef.value = insertUpdateDef();
					frmDataArea.txtTimestamp.value = OpenHR.activeFrame().find("#txtRecEditTimeStamp").val();
					frmDataArea.txtTBCourseRecordID.value = TBCourseRecordID();
					frmDataArea.txtTBEmployeeRecordID.value = TBEmployeeRecordID();
					frmDataArea.txtTBBookingStatusValue.value = TBBookingStatusValue();
					frmDataArea.txtTBOverride.value = pfTBOverride;

					if (frmDataArea.txtInsertUpdateDef.value != "") {
						menu_ShowWait("Saving record...");
						menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons

						OpenHR.submitForm(frmDataArea);

						ExecutePostSaveCode();
					}
				}
				iResult = 6;
			}
		}
		else {  // If no change to the data, continue navigation
			iResult = 6;
		}
	}

	else if ((sCurrentPage == "UTIL_DEF_CUSTOMREPORTS") ||
					(sCurrentPage == "UTIL_DEF_CROSSTABS") ||
					(sCurrentPage == "UTIL_DEF_9BOXGRID") ||
					(sCurrentPage == "UTIL_DEF_CALENDARREPORT") ||
					(sCurrentPage == "UTIL_DEF_MAILMERGE")) {
		iResult = saveReportDefinition(true);
		}

		// @TODO : Uncomment below code, if we want to provide a confirmation message to be asked whilst the user attempting to nevigate away from the tools list/edit screen when tools utility defesel is loaded from the report definition.
		//else if ((sCurrentPage == "TOOLS_SCREEN_LOADED_FROM_REPORT_DEFINITION") || (IsToolsScreenLoadedFromReportDefinition() == true)) {
		//	iResult = saveReportDefinition(true);
		//}

	else if ((sCurrentPage == "UTIL_DEF_PICKLIST") ||
		(sCurrentPage == "UTIL_DEF_EXPRESSION") ||
		(sCurrentPage == "UTIL_DEF_EXPRCOMPONENT") ||
		(sCurrentPage == "CONFIGURATION") ||
		(sCurrentPage == "PCCONFIGURATION") ||
		(sCurrentPage == "ABSENCE_BREAKDOWN_CONFIGURATION")) {

		iResult = saveChanges(psAction, pfPrompt, pfTBOverride);
	}
	else {
		iResult = 6;  // Default, allow unprompted navigation
	}

	return iResult;
}

function menu_WorkflowOutOfOffice() {
	OpenHR.postData("WorkflowOutOfOffice_Check", { __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val() }, menu_OutOfOfficeToggle);
}

function menu_OutOfOfficeToggle(status) {

	if (status.error.length > 0) {
			OpenHR.modalPrompt(status.error, 0, "Out of Office Error", "");
		return;
	}

	if (status.recordCount == 0) {
		OpenHR.modalPrompt(sMsg, 0, "Unable to set Workflow Out of Office.<br/><br/>You do not have an identifiable personnel record.");
		return;
	}

	if (status.outOfOfficeOn == true) {
		var sMsg = "Workflow Out of Office is currently on.<br/><br/>Would you like to turn it off";
	}
	else {
		sMsg = "Workflow Out of Office is currently off.<br/><br/>Would you like to turn it on";
	}

	if (status.recordCount > 1) {
		if (status.recordCount == 2) {
			sMsg = sMsg.concat(" for both");
		}
		else {
			sMsg = sMsg.concat(" for all ");
			sMsg = sMsg.concat(status.recordCount);
		}

		sMsg = sMsg.concat(" of your identified personnel records");
	}

	sMsg = sMsg.concat("?");

	OpenHR.modalPrompt(sMsg, 4, "Out of Office").then(function (answer) {
		if (answer == 6) {
			OpenHR.postData("WorkflowOutOfOffice_Enable", { __RequestVerificationToken: $('[name="__RequestVerificationToken"]').val(), enable: !status.outOfOfficeOn }, null);
		}

	});

}


function menu_OutOfOfficeTurnOff(status) {

	if (status.outOfOfficeOn) {
			setTimeout(function () {
					menu_OutOfOfficeToggle(status);
			}, 100);
	}

	if (!menu_isSSIMode()) {
		setTimeout('menu_loadWorkflowPendingSteps(true)', 100);
	}

}



function menu_loadPage(psPage) {

	var frmWorkArea;
	showDefaultRibbon();
	// Submit the current "workframe" form, and then load the required page.
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmWorkArea.txtGotoTableID.value = 0;
	frmWorkArea.txtGotoViewID.value = 0;
	frmWorkArea.txtGotoScreenID.value = 0;
	frmWorkArea.txtGotoPage.value = psPage;
	OpenHR.submitForm(frmWorkArea, "workframe");


}

	function menu_loadWorkflowPendingSteps(pfAuto) {
		OpenHR.submitForm(null, "workframe", null, null, "WorkflowPendingSteps");
}

	function menu_loadDefSelPage(piDefSelType, piUtilID, piTableID, pfFromMenu) {

		// Load the required definition selection screen
		var displayDiv = (pfFromMenu === true ? "workframe" : "optionframe");

		var postData = {
			txtTableID: piTableID,
			utiltype: piDefSelType,
			utilID: piUtilID,
			txtGotoFromMenu: pfFromMenu,
			__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
		};

		OpenHR.submitForm(null, displayDiv, null, postData, "DefSel");
		showDefaultRibbon();

	}

	function menu_loadRecordEditPage(psToolName) {
		var lngTableID;
		var lngViewID;
		var lngScreenID;
		var sSubString;
		var sLineage;
		var frmWorkArea;
		var frmRecEdit;
		var frmData;
		var iIndex;
		var sToolKey;

		var frmMenuInfo = $("#frmMenuInfo")[0].children;

		menu_ShowWait("Loading screen...");
		menu_disableMenu();

		// Get the table, view and screen info from the tool name.
		sSubString = psToolName.substr(3);
		iIndex = sSubString.indexOf("_");
		lngTableID = sSubString.substr(0, iIndex);
		sSubString = sSubString.substr(iIndex + 1);
		iIndex = sSubString.indexOf("_");
		lngViewID = sSubString.substr(0, iIndex);
		lngScreenID = sSubString.substr(iIndex + 1);

		// Submit the current "workframe" form, and then load the required record Edit page.
		frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
		frmWorkArea.txtGotoTableID.value = lngTableID;
		frmWorkArea.txtGotoViewID.value = lngViewID;
		frmWorkArea.txtGotoScreenID.value = lngScreenID;
		frmWorkArea.txtGotoOrderID.value = 0;
		frmWorkArea.txtGotoRecordID.value = 0;

		sToolKey = psToolName.substr(0, 3);
		if (sToolKey == "HT_") {
			//Check if this history screen is already open, only one per parent allowed.
			var windowList = OpenHR.listOpenWindows();
			var result = windowList.filter(function (item) {
				return (item.screenid === lngScreenID && item.viewid === lngViewID);
			});

			if (result) {
				if (result.length > 0) {
					//just give focus.
					OpenHR.activateDialog(result[0].windowNumber);
					return true;
				}
			}

			frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
			frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentTableID.value;
			frmData = OpenHR.getForm("dataframe", "frmData");
			frmWorkArea.txtGotoParentRecordID.value = frmData.txtRecordID.value;

			sLineage = frmRecEdit.txtCurrentTableID.value +
			"_" + frmRecEdit.txtCurrentViewID.value +
			"_" + frmRecEdit.txtCurrentScreenID.value +
			"_" + frmRecEdit.txtCurrentOrderID.value +
			"_" + frmData.txtRecordID.value +
			"_" + frmData.txtParentTableID.value +
			"_" + frmData.txtParentRecordID.value + ":" +
			frmRecEdit.txtLineage.value;
		}
		else {
			frmWorkArea.txtGotoParentTableID.value = 0;
			frmWorkArea.txtGotoParentRecordID.value = 0;
			sLineage = "";
		}

		if ((sToolKey == "PT_")
		|| (sToolKey == "PV_")) {
			// PT_ = primary table
			// PV_ = primary table view
			if (frmMenuInfo.txtPrimaryStartMode.value == 1) {
				frmWorkArea.txtAction.value = "NEW";
			}
			else {
				frmWorkArea.txtAction.value = "";
			}
		}
		else {
			if (sToolKey == "TS_") {
				// TS_ = Table screen
				if (frmMenuInfo.txtLookupStartMode.value == 1) {
					frmWorkArea.txtAction.value = "NEW";
				}
				else {
					frmWorkArea.txtAction.value = "";
				}
			}
			else {
				if (sToolKey == "QE_") {
					// QE_ = quick entry screen
					if (frmMenuInfo.txtQuickAccessStartMode.value == 1) {
						frmWorkArea.txtAction.value = "NEW";
					}
					else {
						frmWorkArea.txtAction.value = "";
					}
				}
				else {
					if (sToolKey == "HT_") {
						// HT_ = history table
						if (frmMenuInfo.txtHistoryStartMode.value == 1) {
							frmWorkArea.txtAction.value = "NEW";
						}
						else {
							frmWorkArea.txtAction.value = "";
						}
					}
					else {
						frmWorkArea.txtAction.value = "";
					}
				}
			}
		}

		frmWorkArea.txtGotoFilterDef.value = "";
		frmWorkArea.txtGotoFilterSQL.value = "";
		frmWorkArea.txtGotoLineage.value = sLineage;
		frmWorkArea.txtGotoPage.value = "recordEdit";
		if (menu_isSSIMode()) OpenHR.submitForm(frmWorkArea, "workframe");
		else OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);
	}

	function menu_loadFindPage() {

	var frmWorkArea;
	var frmRecEdit;
		
	menu_ShowWait("Loading find records...");
	menu_disableMenu();   // HC: Is this correct? It will only disable RecEdit buttons
	
	// Submit the current "workframe" form, and then load the required record Edit page.
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
	
	frmWorkArea.txtGotoTableID.value = frmRecEdit.txtCurrentTableID.value;
	frmWorkArea.txtGotoViewID.value = frmRecEdit.txtCurrentViewID.value;
	frmWorkArea.txtGotoScreenID.value = frmRecEdit.txtCurrentScreenID.value;
	frmWorkArea.txtGotoOrderID.value = frmRecEdit.txtCurrentOrderID.value;
	frmWorkArea.txtGotoRecordID.value = frmRecEdit.txtCurrentRecordID.value;
	frmWorkArea.txtGotoFirstRecPos.value = 1;
	frmWorkArea.txtGotoCurrentRecCount.value = 0;

	//Fault HRPRO-4094.
	//if (frmRecEdit.txtCurrentRecordID.value > 0) {
	//	frmWorkArea.txtGotoLocateValue.value = frmRecEdit.txtCurrentRecordID.value;
	//	frmWorkArea.txtAction.value = "LOCATEID";
	//}

	if (frmRecEdit.txtCurrentParentTableID.value > 0) {
	frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentParentTableID.value;
	frmWorkArea.txtGotoParentRecordID.value = frmRecEdit.txtCurrentParentRecordID.value;
}
	else {
	frmWorkArea.txtGotoParentTableID.value = 0;
	frmWorkArea.txtGotoParentRecordID.value = 0;
}

	frmWorkArea.txtGotoRealSource.value = frmRecEdit.txtRecEditRealSource.value;
	frmWorkArea.txtGotoFilterDef.value = frmRecEdit.txtRecEditFilterDef.value;
	frmWorkArea.txtGotoFilterSQL.value = frmRecEdit.txtRecEditFilterSQL.value;
	frmWorkArea.txtGotoLineage.value = frmRecEdit.txtLineage.value;
	frmWorkArea.txtGotoPage.value = "find";

	if (menu_isSSIMode()) OpenHR.submitForm(frmWorkArea, "workframe");
	else OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);
}

	function menu_loadFindPageFirst(psToolName) {
	var lngTableID;
	var lngViewID;
	var lngScreenID;
	var sSubString;
	var sLineage;
	var frmWorkArea;
	var frmRecEdit;
	var frmFindForm;
	var frmData;
	var iIndex;

	menu_ShowWait("Loading find records...");
	//disableMenu();

	// Get the table, view and screen info from the tool name.
	sSubString = psToolName.substr(3);
	iIndex = sSubString.indexOf("_");
	lngTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngViewID = sSubString.substr(0, iIndex);
	lngScreenID = sSubString.substr(iIndex + 1);

	// Submit the current "workframe" form, and then load the required record Edit page.
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmWorkArea.txtGotoTableID.value = lngTableID;
	frmWorkArea.txtGotoViewID.value = lngViewID;
	frmWorkArea.txtGotoScreenID.value = lngScreenID;
	frmWorkArea.txtGotoOrderID.value = 0;
	frmWorkArea.txtGotoRecordID.value = 0;
	frmWorkArea.txtGotoFirstRecPos.value = 1;
	frmWorkArea.txtGotoCurrentRecCount.value = 0;

	// Sets multi select mode off when loading find window from clicking tree menu item.
	SetMultiSelectionModeOff();
	frmWorkArea.txtSelectedRecordsInFindGrid.value = "";

	if (psToolName.substr(0, 3) == "HT_") {
		//Check if this history screen is already open, only one per parent allowed.
		var windowList = OpenHR.listOpenWindows();
		var result = windowList.filter(function (item) {
			return (item.screenid === lngScreenID && item.viewid === lngViewID);
		});

		if (result) {
			if (result.length > 0) {
				//just give focus.
				OpenHR.activateDialog(result[0].windowNumber);
				return true;
			}
		}
		
		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
		frmFindForm = OpenHR.getForm("workframe", "frmFindForm");

		if (frmRecEdit) {
			frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentTableID.value;
			frmData = OpenHR.getForm("dataframe", "frmData");
			frmWorkArea.txtGotoParentRecordID.value = frmData.txtRecordID.value;

			sLineage = frmRecEdit.txtCurrentTableID.value +
			"_" + frmRecEdit.txtCurrentViewID.value +
			"_" + frmRecEdit.txtCurrentScreenID.value +
			"_" + frmRecEdit.txtCurrentOrderID.value +
			"_" + frmData.txtRecordID.value +
			"_" + frmData.txtParentTableID.value +
			"_" + frmData.txtParentRecordID.value + ":" +
			frmRecEdit.txtLineage.value;
		} else {
			if (frmFindForm) {
				//we're flipping between histories, so recedit is unavailable. Reuse previous values.
				sLineage = "-1"; // flag to reuse session.

				//load up the parent table details, as they're lost after inline editing.
				frmWorkArea.txtGotoParentTableID.value = frmFindForm.txtCurrentParentTableID.value;			
				frmWorkArea.txtGotoParentRecordID.value = frmFindForm.txtCurrentParentRecordID.value;

			}
		}

	}
	else {
		frmWorkArea.txtGotoParentTableID.value = 0;
		frmWorkArea.txtGotoParentRecordID.value = 0;
		sLineage = "";
	}

	frmWorkArea.txtGotoRealSource.value = "";

	frmWorkArea.txtGotoLineage.value = sLineage;
	frmWorkArea.txtGotoPage.value = "find";

	if (menu_isSSIMode()) OpenHR.submitForm(frmWorkArea, "workframe");
	else OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);

}

	function menu_loadLookupPage(plngColumnID, plngLookupColumnID, psLookupValue, pfMandatory, psFilterLookupValue) {
		var frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
		var frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

		menu_ShowWait("Loading lookup find records...");
		menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons

		var postData = {
			txtGotoOptionScreenID: frmRecEditArea.txtCurrentScreenID.value,
			txtGotoOptionTableID: frmRecEditArea.txtCurrentTableID.value,
			txtGotoOptionViewID: frmRecEditArea.txtCurrentViewID.value,
			txtGotoOptionOrderID: frmRecEditArea.txtCurrentOrderID.value,
			txtGotoOptionFilterDef: frmRecEditArea.txtRecEditFilterDef.value,
			txtGotoOptionFilterSQL: frmRecEditArea.txtRecEditFilterSQL.value,
			txtGotoOptionValue: "",
			txtGotoOptionLinkTableID: 0,
			txtGotoOptionLinkOrderID: 0,
			txtGotoOptionLinkViewID: 0,
			txtGotoOptionLinkRecordID: 0,
			txtGotoOptionColumnID: plngColumnID,
			txtGotoOptionLookupColumnID: plngLookupColumnID,
			txtGotoOptionLookupValue: psLookupValue,
			txtGotoOptionLookupMandatory: pfMandatory,
			txtGotoOptionLookupFilterValue: psFilterLookupValue,
			txtGotoOptionAction: "",
			txtGotoOptionPageAction: "LOAD",
			txtGotoOptionFirstRecPos: 1,
			txtGotoOptionCurrentRecCount: 0,
		__RequestVerificationToken: window.top.$('[name="__RequestVerificationToken"]').val()
		};

		OpenHR.submitForm(frmOptionArea, "optionframe", null, postData, "menu_loadLookupPage");
}

	function menu_loadLinkPage(plngLinkTableID, plngLinkOrderID, plngLinkViewID, plngLinkRecordID) {
	var frmRecEditArea;
	var frmOptionArea;

	
	menu_ShowWait("Loading link find records...");
	menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = plngLinkTableID;
	frmOptionArea.txtGotoOptionLinkOrderID.value = plngLinkOrderID;
	frmOptionArea.txtGotoOptionLinkViewID.value = plngLinkViewID;
	frmOptionArea.txtGotoOptionLinkRecordID.value = plngLinkRecordID;
	frmOptionArea.txtGotoOptionPage.value = "linkFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_loadLinkPage");
}

	function menu_loadTransferCoursePage(psCourseTitle) {
	var frmRecEditArea;
	var frmOptionArea;

	menu_ShowWait("Loading matching course records...");		
	menu_disableMenu();
	menu_setVisibletoolbarGroupById('mnuSectionRecordFind', false);
	menu_setVisibletoolbarGroupById('mnuSectionRecordOrder', false);
	menu_setVisibletoolbarGroupById('mnuSectionRecordReports', false);
	menu_setVisibletoolbarGroupById('mnuSectionRecordMailmerge', false);
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
	frmOptionArea.txtGotoOptionPage.value = "tbTransferCourseFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionCourseTitle.value = psCourseTitle;
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "tbTransferCourseFind");
}

	function menu_loadOLEPage(plngColumnID, psFile, plngOLEType, plngMaxEmbedSize, pbIsReadOnly, pbIsPhoto) {
	var frmRecEditArea;
	var frmOptionArea;
	
	if (plngOLEType == 1) {
	menu_ShowWait("Loading OLE (server) list...");
}
	else if (plngOLEType == 0) {
	menu_ShowWait("Loading OLE (local) list...");
}
	else if (plngOLEType > 1) {
	menu_ShowWait("Loading document...");
}

	menu_disableMenu();
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
	frmOptionArea.txtGotoOptionRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = 0;
	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
	frmOptionArea.txtGotoOptionColumnID.value = plngColumnID;
	frmOptionArea.txtGotoOptionLookupColumnID.value = 0;
	frmOptionArea.txtGotoOptionFile.value = psFile;
	//frmOptionArea.txtGotoOptionOLEOnServer.value = pfOLEOnServer;
	frmOptionArea.txtGotoOptionOLEType.value = plngOLEType;
	frmOptionArea.txtGotoOptionOLEMaxEmbedSize.value = plngMaxEmbedSize;
	frmOptionArea.txtGotoOptionOLEReadOnly.value = pbIsReadOnly;
	frmOptionArea.txtGotoOptionIsPhoto.value = pbIsPhoto;
	frmOptionArea.txtGotoOptionLookupMandatory.value = false;
	frmOptionArea.txtGotoOptionPage.value = "oleFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_oleFind");

}

	function menu_reloadFindPage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "FIND");
}

	function menu_reloadLookupPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "LOOKUP");
}

	function menu_reloadLinkPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "LINK");
}

	function menu_reloadTransferCoursePage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "TRANSFERCOURSE");
}

	function menu_reloadBookCoursePage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "BOOKCOURSE");
}

	function menu_reloadAddFromWaitingListPage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "ADDFROMWAITINGLIST");
}

	function menu_reloadTransferBookingPage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "TRANSFERBOOKING");
}

	function menu_reloadPage(psAction, psLocateValue, psPage) {

	var fValidLocateValue;
	var iDataType;
	var frmFindForm;
	var sDecimalSeparator;
	var sThousandSeparator;
	var sPoint;
	var sConvertedValue;
	var iIndex;
	var iSize;
	var iDecimals;
	var iTempSize;
	var iTempDecimals;

	sDecimalSeparator = "\\";
	sDecimalSeparator = sDecimalSeparator.concat(OpenHR.LocaleDecimalSeparator());
	var reDecimalSeparator = new RegExp(sDecimalSeparator, "gi");

	sThousandSeparator = "\\";
	sThousandSeparator = sThousandSeparator.concat(OpenHR.LocaleThousandSeparator());
	var reThousandSeparator = new RegExp(sThousandSeparator, "gi");

	sPoint = "\\.";
	var rePoint = new RegExp(sPoint, "gi");
	
	fValidLocateValue = true;
	
	if (psPage == "FIND") {
	frmFindForm = OpenHR.getForm("workframe", "frmFindForm");
}
	else {
	if ((psPage == "LOOKUP") || 
	(psPage == "LINK") || 
	(psPage == "TRANSFERCOURSE") || 
	(psPage == "BOOKCOURSE") || 
	(psPage == "ADDFROMWAITINGLIST") || 
	(psPage == "TRANSFERBOOKING")) {
	frmFindForm = OpenHR.getForm("optiondataframe", "frmOptionData");
}
	else {
	return;
}
}

	if (psAction == "LOCATE") {
	if (psLocateValue.length == 0) {
	return;
}
	
	// Check that the entered value is valid for the first order column type.
	iDataType = frmFindForm.txtFirstColumnType.value;
	
	if ((iDataType == 2) || (iDataType == 4)) {
	// Numeric/Integer column.
			// Ensure that the value entered is numeric.

			// Convert the value from locale to UK settings for use with the isNaN funtion.
	sConvertedValue = new String(psLocateValue);
	// Remove any thousand separators.
	sConvertedValue = sConvertedValue.replace(reThousandSeparator, "");

	// Convert any decimal separators to '.'.
	if (OpenHR.LocaleDecimalSeparator() != ".") {
	// Remove decimal points.
	sConvertedValue = sConvertedValue.replace(rePoint, "A");
	// replace the locale decimal marker with the decimal point.
	sConvertedValue = sConvertedValue.replace(reDecimalSeparator, ".");
}
	psLocateValue = sConvertedValue;

	if (isNaN(sConvertedValue) == true) {
	fValidLocateValue = false;
	OpenHR.messageBox("Invalid numeric value entered.");
}
	else {
	iIndex = sConvertedValue.indexOf(".");

	if (iDataType == 2) {
	// Ensure numeric columns are compared with numeric values that do not exceed
					// their defined size and decimals settings.
	if (iIndex >= 0) {
	iTempSize = iIndex;
	iTempDecimals = sConvertedValue.length - iIndex - 1;
}
	else {
	iTempSize = sConvertedValue.length;
	iTempDecimals = 0;
}
					
						if ((sConvertedValue.substr(0, 1) == "+") ||
						(sConvertedValue.substr(0, 1) == "-")) {
	iTempSize = iTempSize - 1;
}

	iSize = frmFindForm.txtFirstColumnSize.value;
	iDecimals = frmFindForm.txtFirstColumnDecimals.value;

						if (iTempSize > (iSize - iDecimals)) {
	fValidLocateValue = false;
	OpenHR.messageBox("The column can only be compared to values with " + (iSize - iDecimals) + " digit(s) to the left of the decimal separator.");
}
	else {
							if (iTempDecimals > iDecimals) {
	fValidLocateValue = false;
	OpenHR.messageBox("The column can only be compared to values with " + iDecimals + " decimal place(s).");
}
}
}
	else {
	// Ensure the value is an integer.
	if (iIndex >= 0) {
	fValidLocateValue = false;
	OpenHR.messageBox("Invalid integer value entered.");
}
}
}
}
	else {
	if (iDataType == 11) {
	// Date column.
				// Ensure that the value entered is a date.
	if (psLocateValue.length > 0) {
	// Convert the date to SQL format (use this as a validation check).
					// An empty string is returned if the date is invalid.
	psLocateValue = OpenHR.convertLocaleDateToSQL(psLocateValue);

	if (psLocateValue.length == 0) {
	fValidLocateValue = false;
	OpenHR.messageBox("Invalid date value entered.");
}
}
}
}
}

	if (fValidLocateValue == true) {
	if (psAction == "RELOAD") {
	menu_ShowWait("Reloading find records...");
}
	else {
	menu_ShowWait("Loading find records...");
}
	menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons

	if (psPage == "FIND") {
	
	// Submit the current "workframe" form, and then load the required record Edit page.
	var frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	
	frmWorkArea.txtAction.value = psAction;
	frmWorkArea.txtGotoTableID.value = frmFindForm.txtCurrentTableID.value;
	frmWorkArea.txtGotoViewID.value = frmFindForm.txtCurrentViewID.value;
	frmWorkArea.txtGotoScreenID.value = frmFindForm.txtCurrentScreenID.value;
	frmWorkArea.txtGotoOrderID.value = frmFindForm.txtCurrentOrderID.value;
	frmWorkArea.txtGotoRecordID.value = frmFindForm.txtCurrentRecordID.value;

	frmWorkArea.txtGotoFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmWorkArea.txtGotoCurrentRecCount.value = frmFindForm.txtCurrentRecCount.value;
	frmWorkArea.txtGotoLocateValue.value = psLocateValue;
	
	if (frmFindForm.txtCurrentParentTableID.value > 0) {
	frmWorkArea.txtGotoParentTableID.value = frmFindForm.txtCurrentParentTableID.value;
	frmWorkArea.txtGotoParentRecordID.value = frmFindForm.txtCurrentParentRecordID.value;
}
	else {
	frmWorkArea.txtGotoParentTableID.value = 0;
	frmWorkArea.txtGotoParentRecordID.value = 0;
}

	frmWorkArea.txtGotoRealSource.value = frmFindForm.txtRealSource.value;
	frmWorkArea.txtGotoLineage.value = frmFindForm.txtLineage.value;
	frmWorkArea.txtGotoFilterDef.value = frmFindForm.txtFilterDef.value;
	frmWorkArea.txtGotoFilterSQL.value = frmFindForm.txtFilterSQL.value;

	if (psAction == "RELOAD") {
		if (IsMultiSelectionModeOn() == false) { frmWorkArea.txtSelectedRecordsInFindGrid.value = ""; }
		else { frmWorkArea.txtSelectedRecordsInFindGrid.value = $("#txtSelectedRecordsInFindGrid").val(); }
	} else {
		frmWorkArea.txtSelectedRecordsInFindGrid.value = "";
	}

	frmWorkArea.txtGotoPage.value = "find";

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");

			OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true, true);
}

	if (psPage == "LOOKUP") {
	// Get the optionData.asp to get the lookup find records.
	var frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
	var frmOptionArea = OpenHR.getForm("optionframe", "frmLookupFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADLOOKUPFIND";

	frmOptionGetDataArea.txtOptionColumnID.value = frmOptionArea.txtOptionColumnID.value;		
	frmOptionGetDataArea.txtOptionLookupColumnID.value = frmOptionArea.txtOptionLookupColumnID.value;
	frmOptionGetDataArea.txtOptionLookupFilterValue.value = frmOptionArea.txtOptionLookupFilterValue.value;

	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
	frmOptionGetDataArea.txtOptionIsLookupTable.value = frmOptionArea.txtIsLookupTable.value;

	var frmRecordEditForm = document.getElementById("frmRecordEditForm");
			
	frmOptionGetDataArea.txtOptionRecordID.value = frmRecordEditForm.txtCurrentRecordID.value;
	frmOptionGetDataArea.txtOptionParentTableID.value = frmRecordEditForm.txtCurrentParentTableID.value;
	frmOptionGetDataArea.txtOptionParentRecordID.value = frmRecordEditForm.txtCurrentParentRecordID.value;

	if (frmOptionArea.txtIsLookupTable.value == "False") {
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.selectView.options[frmOptionArea.selectView.selectedIndex].value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.selectOrder.options[frmOptionArea.selectOrder.selectedIndex].value;
}
	else {
	frmOptionGetDataArea.txtOptionTableID.value = 0;
	frmOptionGetDataArea.txtOptionViewID.value = 0;
	frmOptionGetDataArea.txtOptionOrderID.value = 0;
}
			
	//refreshOptionData(); //should be in scope
	refreshOptionData();	//should be in context.

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");
}

	if (psPage == "LINK") {
	// Get the optionData.asp to get the lookup find records.
	frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
	frmOptionArea = OpenHR.getForm("optionframe", "frmLinkFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADFIND";
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;

	refreshOptionData();

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");
}
	//TODO: ALL THESE TB IF's....
	if (psPage == "TRANSFERCOURSE") {
	// Get the optionData.asp to get the lookup find records.
	frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
	frmOptionArea = OpenHR.getForm("optionframe", "frmFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERCOURSE";
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
	frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionCourseTitle.value = frmOptionArea.txtOptionCourseTitle.value;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
	refreshOptionData(); //should be in scope

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");			 
}

		
	if (psPage == "BOOKCOURSE") {
	// Get the optionData.asp to get the lookup find records.
				frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
				frmOptionArea = OpenHR.getForm("optionframe", "frmFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADBOOKCOURSE";
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
	frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
	refreshOptionData(); //should be in scope

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");
}

	if (psPage == "ADDFROMWAITINGLIST") {
	// Get the optionData.asp to get the lookup find records.
				frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
				frmOptionArea = OpenHR.getForm("optionframe", "frmFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADADDFROMWAITINGLIST";
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
	frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
	refreshOptionData(); //should be in scope

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");
}

	if (psPage == "TRANSFERBOOKING") {
	// Get the optionData.asp to get the lookup find records.
				frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
				frmOptionArea = OpenHR.getForm("optionframe", "frmFindForm");
	frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERBOOKING";
	frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
	frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
	frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
	frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
	frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
	frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
	frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
	frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
	refreshOptionData(); //should be in scope

	// Clear the locate value from the menu.
	menu_SetmnutoolLocateRecordsText("");
}
}
}

function menu_spawnWindow(mypage, myname, winprops) {
//	win = window.open(mypage, myname, winprops)
//	if (parseInt(navigator.appVersion) >= 4) { 
//		pausecomp(300);
//		win.window.focus(); 
//	}	
}

function menu_pausecomp(millis) {
//	var date = new Date();
//	var curDate = null;

//	do 
//	{ 
//		curDate = new Date(); 
//	} while(curDate-date < millis);
}
				

				
	function menu_exitIntranet() {

	alert("exit clicked...");
	//	var sCurrentWorkPage;
	//	var frmDataArea;
	//	var frmRecEditArea;
	//	
	//	sCurrentWorkPage = currentWorkPage();

	//	if (saveChanges("EXIT", true, false) != 2) { // 2 = vbCancel
	//		// Quit the browser.
	//		window.parent.close();

	//		// Reload the current record edit form in case the browser was not closed.
	//		if (sCurrentWorkPage == "RECORDEDIT") {
	//			// Get the data.asp to get the reload the current record.
	//			frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
	//			frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");

	//			frmDataArea.txtAction.value = "LOAD";
	//			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
	//			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	//			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
	//			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
	//			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
	//			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	//			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	//			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
	//			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	//			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
	//			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
	//			frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
	//			frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
	//			frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;

	//			data_refreshData();
	//		}
	//	}
}

	function menu_logoffIntranet() {
	//	if (saveChanges("LOGOFF", true, false) != 2) { // 2 = vbCancel
	//		// Return to the login page.
	//		// NB. We use the 'replace' method rather than the 'href' property of the location object
	//		// as this ensures the page is refreshed. Using the 'href' property loads the cached version of the page
	//		// if one exists.
	//		if (frmMenuInfo.txtDefaultStartPage.value.length > 0) {
	//			window.parent.location.replace(frmMenuInfo.txtDefaultStartPage.value);
	//		}
	//		else {
	//			window.parent.location.replace("login.asp");
	//		}
	//	}

	window.location.href = window.top.window.ROOT + "Account/LogOff";

}

	function menu_mnutoolAboutHRPro() {
		OpenHR.showAboutPopup();
	}



	function menu_newRecord(fromFind) {		
	var sCurrentWorkPage;
	var frmDataArea;
	var frmRecEditArea;
	var frmWorkArea;
	var frmFindArea;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	function new_RecordEdit() {
			// Get the data.asp to get the default values for a NEW record.
			frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
			frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

			frmDataArea.txtAction.value = "NEW";
			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
			frmDataArea.txtOriginalRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
			frmDataArea.txtDefaultCalcCols.value = CalculatedDefaultColumns(); //TODO: frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();

			data_refreshData();
		return false;
	}
	
	if (sCurrentWorkPage == "RECORDEDIT") {
		//saveChangesPrompt('NEW', 'new_RecordEdit()');
		if (menu_saveChanges("NEW", true, false) == 0) { // Prompt to cancel
			OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes and create a new record, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
				if (answer == 1) { // OK - Ignore changes
					window.top.onbeforeunload = null;
					new_RecordEdit();
		return false;
				} else {
					return false;
	}
			});
		} else {  // Don't prompt
			new_RecordEdit();
			return false;
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {
			// Submit the current "workframe" form, and then load the required record Edit page.
					// And then get it to create a new record.
					menu_ShowWait("Loading screen...");
			menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons
				
			frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
			frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
			frmWorkArea.txtAction.value = "NEW";
			frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
			frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
			frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
			frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
			frmWorkArea.txtGotoRecordID.value = 0;
			frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
			frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
			frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;

			frmWorkArea.txtGotoPage.value = "recordEdit";
			if (menu_isSSIMode()) {
				OpenHR.submitForm(frmWorkArea, "workframe");
			} else {
				OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);
				if (fromFind) {
					//kill calling find window.
					var activeWindowId = OpenHR.activeWindowID();
					OpenHR.closeDialog(activeWindowId);
				}
			}

		}
	}
}

	function menu_copyRecord() {
	var sCurrentWorkPage;
	var frmDataArea;
	var frmRecEditArea;
	var frmWorkArea;
	var frmFindArea;
	var lngRecordID;
	sCurrentWorkPage = OpenHR.currentWorkPage();

	function copy_RecordEdit() {
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmDataArea = OpenHR.getForm("dataframe", "frmData");
		if (!frmDataArea) alert('empty frmData! menu.js line 3507');

	recEdit_setRecordID(0);			
	frmDataArea.txtRecordPosition.value = frmDataArea.txtRecordCount.value + 1;
			
	ClearUniqueColumnControls();
	$("#ctlRecordEdit #changed").val("true");
	//TODO: frmRecEditArea.ctlRecordEdit.ChangedOLEPhoto(0, "ALL");
	menu_refreshMenu();
	};
	
	if (sCurrentWorkPage == "RECORDEDIT") {
		//saveChangesPrompt('COPY', 'copy_RecordEdit()');
		if (menu_saveChanges("COPY", true, false) == 0) { // 2 = vbCancel
			OpenHR.modalPrompt("You have unsaved changes. Click 'OK' to copy these changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
				if (answer == 1) { // OK - Ignore changes
					window.top.onbeforeunload = null;
					copy_RecordEdit();
					return false;
				} else {
					return false;
				}
			});
		} else {  // Don't prompt
			copy_RecordEdit();
		return false;
	}
	}
	else {
	if (sCurrentWorkPage == "FIND") {			
	// Submit the current "workframe" form, and then load the required record Edit page.
			// And then get it to create a new record.
			menu_ShowWait("Loading screen...");
	menu_disableMenu();
				
			lngRecordID = menu_selectedRecordID();	// function in find.aspx

	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
	frmWorkArea.txtAction.value = "COPY";
	frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
	frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
	frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
	frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
	frmWorkArea.txtGotoRecordID.value = lngRecordID;
	frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
	frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
	frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
	frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
	frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

	frmWorkArea.txtGotoPage.value = "recordEdit";
			if (menu_isSSIMode()) OpenHR.submitForm(frmWorkArea, "workframe");
			else OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);
		}
}
}

function menu_selectedRecordID() {
	var findGridTable = OpenHR.activeFrame().find('#findGridTable');
	return findGridTable.getGridParam('selrow');
}


function menu_editRecord(fromFind) {
	var lngRecordID;
	var frmWorkArea;
	var frmFindArea;

	lngRecordID = menu_selectedRecordID();

	if (lngRecordID > 0) {
		menu_ShowWait("Loading screen...");
		menu_disableMenu();

		// Submit the current "workframe" form, and then load the required record Edit page.
		frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
		frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

		frmWorkArea.txtAction.value = "LOAD";
		frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
		frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
		frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
		frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
		frmWorkArea.txtGotoRecordID.value = lngRecordID;
		frmWorkArea.txtGotoOriginalRecordID.value = lngRecordID;
		frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
		frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
		frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
		frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
		frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

		frmWorkArea.txtGotoPage.value = "recordEdit";

		if (menu_isSSIMode()) {
			OpenHR.submitForm(frmWorkArea, "workframe");
		}
		else {
			OpenHR.submitForm(frmWorkArea, "workframe", true, null, null, null, true);
			if (fromFind) {
				//kill calling find window.
				var activeWindowId = OpenHR.activeWindowID();
				OpenHR.closeDialog(activeWindowId);
			}
		}

	}
}

	function menu_deleteRecord() {
	var sCurrentWorkPage;
	var frmDataArea;
	var frmRecEditArea;
	var frmFindArea;
	var lngRecordID;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
	if (OpenHR.messageBox("Delete the current record, are you sure ?", 36) == 6) { // 36 = vbQuestion + vbYesNo, 6 = vbYes
	menu_ShowWait("Deleting record...");
			//disableMenu();
					
			// Get the data.asp to get the save the current record.
	frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

	frmDataArea.txtAction.value = "DELETE";
	frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
	frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
	frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
	frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
	frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
	frmDataArea.txtDefaultCalcCols.value = CalculatedDefaultColumns();
	frmDataArea.txtInsertUpdateDef.value = insertUpdateDef();

	//TODO: check this works:
	frmDataArea.txtTimestamp.value = OpenHR.activeFrame().find("#txtRecEditTimeStamp").val();	// frmRecEditArea.ctlRecordEdit.timestamp;

	data_refreshData();
}
}
	else {
	if (sCurrentWorkPage == "FIND") {
			
			lngRecordID = menu_selectedRecordID();
		
	if (lngRecordID > 0) {
	if (OpenHR.messageBox("Delete the current record, are you sure ?", 36) == 6) { // 36 = vbQuestion + vbYesNo, 6 = vbYes
	// Get the data.asp to get the save the current record.
					menu_ShowWait("Deleting record...");
					//disableMenu()	;
						
	frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

	frmDataArea.txtAction.value = "DELETE";
	frmDataArea.txtReaction.value = "REFRESHFINDAFTERDELETE";
	frmDataArea.txtCurrentTableID.value = frmFindArea.txtCurrentTableID.value;
	frmDataArea.txtCurrentScreenID.value = frmFindArea.txtCurrentScreenID.value;
	frmDataArea.txtCurrentViewID.value = frmFindArea.txtCurrentViewID.value;
	frmDataArea.txtSelectSQL.value = "";
	frmDataArea.txtFromDef.value = "";
	frmDataArea.txtFilterSQL.value = "";
	frmDataArea.txtFilterDef.value = "";
	frmDataArea.txtRealSource.value = frmFindArea.txtRealSource.value;
	frmDataArea.txtRecordID.value = lngRecordID;
	frmDataArea.txtParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
	frmDataArea.txtParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
	frmDataArea.txtDefaultCalcCols.value = "";
	frmDataArea.txtInsertUpdateDef.value = "";
	frmDataArea.txtTimestamp.value = 0;

	data_refreshData();
}
}
}
}
}

	function menu_loadParentRecord() {
	var lngTableID;
	var lngViewID;
	var lngScreenID;
	var lngOrderID;
	var lngRecordID;
	var lngParentTableID;
	var lngParentRecordID;
	var sSubString;
	var sLineage;
	var iIndex;
	var frmWorkArea;
	var frmFindArea;
	var sCurrentWorkPage;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	// Submit the current "workframe" form, and then load the required Record Edit page.
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	
	if (sCurrentWorkPage == "RECORDEDIT") {
		saveChangesPrompt('PARENT', 'menu_loadParent()');
		//		if (menu_saveChanges("PARENT", true, false) == 0) { // 0 = Prompt for navigation
		//			OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function(answer) {
		//				if (answer == 1) { // OK - Ignore changes
		//					menu_loadParent();
		//					return false;
		//				} else {
		//					return false;
		//				}
		//			});
		//		} else {  // Don't prompt
		//	menu_loadParent();
		//			return false;
		//}
		return false;
	}
	else {
	if (sCurrentWorkPage == "FIND") {
	menu_ShowWait("Loading screen...");
			
	menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons
				
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
		
				
	// Get the table, view and screen info from the tool name.
	sSubString = frmFindArea.txtLineage.value;
	iIndex = sSubString.indexOf("_");
	lngTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngViewID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngScreenID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngOrderID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngRecordID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngParentTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf(":");
	lngParentRecordID = sSubString.substr(0, iIndex);
	sLineage = sSubString.substr(iIndex + 1);

	frmWorkArea.txtAction.value = "LOAD";
	frmWorkArea.txtGotoTableID.value = lngTableID;
	frmWorkArea.txtGotoViewID.value = lngViewID;
	frmWorkArea.txtGotoScreenID.value = lngScreenID;
	frmWorkArea.txtGotoOrderID.value = lngOrderID;
	frmWorkArea.txtGotoRecordID.value = lngRecordID;
	frmWorkArea.txtGotoParentTableID.value = lngParentTableID;
	frmWorkArea.txtGotoParentRecordID.value = lngParentRecordID;
	frmWorkArea.txtGotoLineage.value = sLineage;

	frmWorkArea.txtGotoPage.value = "recordEdit";
	OpenHR.submitForm(frmWorkArea, "workframe");
}
}
}

	function menu_loadParent() {
	var lngTableID;
	var lngViewID;
	var lngScreenID;
	var lngOrderID;
	var lngRecordID;
	var lngParentTableID;
	var lngParentRecordID;
	var sSubString;
	var sLineage;
	var frmWorkArea;
	var frmRecEditArea;
	var iIndex;

	menu_ShowWait("Loading screen...");
	menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons
					
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
				
	// Get the table, view and screen info from the tool name.
	sSubString = frmRecEditArea.txtLineage.value;
	iIndex = sSubString.indexOf("_");
	lngTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngViewID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngScreenID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngOrderID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngRecordID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngParentTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf(":");
	lngParentRecordID = sSubString.substr(0, iIndex);
	sLineage = sSubString.substr(iIndex + 1);
	
	frmWorkArea.txtAction.value = "LOAD";
	frmWorkArea.txtGotoTableID.value = lngTableID;
	frmWorkArea.txtGotoViewID.value = lngViewID;
	frmWorkArea.txtGotoScreenID.value = lngScreenID;
	frmWorkArea.txtGotoOrderID.value = lngOrderID;
	frmWorkArea.txtGotoRecordID.value = lngRecordID;
	frmWorkArea.txtGotoParentTableID.value = lngParentTableID;
	frmWorkArea.txtGotoParentRecordID.value = lngParentRecordID;
	frmWorkArea.txtGotoLineage.value = sLineage;

	frmWorkArea.txtGotoPage.value = "recordEdit";
	OpenHR.submitForm(frmWorkArea, "workframe");
}

	function menu_loadBackPage() {

	var frmFindArea;
	var lngRecordID;
	var frmWorkArea;
	
	// Submit the current "workframe" form, and then load the required Record Edit page.
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
	
	lngRecordID = frmFindArea.txtCurrentRecordID.value;
	
	if (lngRecordID > 0) {
	menu_ShowWait("Loading screen...");
	menu_disableMenu(); // HC: Is this correct? It will only disable RecEdit buttons
	
	
	// Submit the current "workframe" form, and then load the required record Edit page.
	frmWorkArea = OpenHR.getForm("workframeset", "frmWorkAreaRefresh");
	frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
	frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
	frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
	frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
	frmWorkArea.txtGotoRecordID.value = lngRecordID;
	frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
	frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
	frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
	frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
	frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

	frmWorkArea.txtGotoPage.value = "recordEdit";
	OpenHR.submitForm(frmWorkArea, "workframe");
}
}

	function menu_moveRecord(psMovement) {
	var sCurrentWorkPage;
	var sSaveChangesTag;
	var sAction;
	var frmDataArea;
	var frmRecEditArea;
	var frmOptionGetDataArea;
	var frmOptionDataArea;
	var frmOptionArea;
	var frmEventLog;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();	
	sSaveChangesTag = psMovement;
	sAction = psMovement;
	
	function move_RecordEdit() {
		// Get the data.asp to get the move to the FIRST record.
		menu_ShowWait("Locating record...");
		menu_disableMenu();

		frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
		frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

		if ((psMovement == "MOVEPREVIOUS") && (frmRecEditArea.txtCurrentRecordID.value == 0)) {
			sAction = "MOVELAST";
		}

		frmDataArea.txtAction.value = sAction;

		frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
		frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
		frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
		frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
		frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
		frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
		frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
		frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
		frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
		frmDataArea.txtOriginalRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
		frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
		frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
		data_refreshData();
	}


	if (sCurrentWorkPage == "EVENTLOG") {
		EventLog_moveRecord(psMovement);  //should be in scope.
		return;
	}

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (menu_saveChanges(sSaveChangesTag, true, false) == 0) { // 0 = Prompt
			OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
				if (answer == 1) { // OK - Ignore changes
					window.top.onbeforeunload = null;
					move_RecordEdit();
					return false;
				} else {
					return false;
				}
			});
		} else {  // Don't prompt
			move_RecordEdit();
			return false;
		}
		return false;
	}

	if (sCurrentWorkPage == "FIND") {
		menu_reloadFindPage(sAction, "");
		return;
	}

	if (sCurrentWorkPage == "LINKFIND") {
		// Get the optionData.asp to get the link find records.
		frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
		frmOptionDataArea = OpenHR.getForm("optiondataframe", "frmOptionData");
		frmOptionArea = OpenHR.getForm("optionframe", "frmLinkFindForm");
		frmOptionGetDataArea.txtOptionAction.value = "LOADFIND";
		frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
		frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
		frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;

		refreshOptionData(); //should be in scope
		return;
	}

	if (sCurrentWorkPage == "LOOKUPFIND") {
		// Get the optionData.asp to get the link find records.
		frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
		frmOptionDataArea = OpenHR.getForm("optiondataframe", "frmOptionData");
		frmOptionArea = OpenHR.getForm("optionframe", "frmLookupFindForm");
		frmOptionGetDataArea.txtOptionAction.value = "LOADLOOKUPFIND";
		frmOptionGetDataArea.txtOptionColumnID.value = frmOptionArea.txtOptionColumnID.value;
		frmOptionGetDataArea.txtOptionLookupColumnID.value = frmOptionArea.txtOptionLookupColumnID.value;
		frmOptionGetDataArea.txtOptionLookupFilterValue.value = frmOptionArea.txtOptionLookupFilterValue.value;
		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;
		frmOptionGetDataArea.txtOptionIsLookupTable.value = frmOptionArea.txtIsLookupTable.value;
		frmOptionGetDataArea.txtOptionRecordID.value = OpenHR.getForm("workframe", "frmRecordEditForm").txtCurrentRecordID.value;

		frmOptionGetDataArea.txtOptionParentTableID.value = OpenHR.getForm("workframe", "frmRecordEditForm").txtCurrentParentTableID.value;
		frmOptionGetDataArea.txtOptionParentRecordID.value = OpenHR.getForm("workframe", "frmRecordEditForm").txtCurrentParentRecordID.value;

		if (frmOptionArea.txtIsLookupTable.value == "False") {
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.selectView.options[frmOptionArea.selectView.selectedIndex].value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.selectOrder.options[frmOptionArea.selectOrder.selectedIndex].value;
		}
		else {
			frmOptionGetDataArea.txtOptionTableID.value = 0;
			frmOptionGetDataArea.txtOptionViewID.value = 0;
			frmOptionGetDataArea.txtOptionOrderID.value = 0;
		}

		refreshOptionData(); //should be in scope
		return;
	}

	if ((sCurrentWorkPage == "TBBOOKCOURSEFIND") ||
	(sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") ||
	(sCurrentWorkPage == "TBTRANSFERCOURSEFIND") ||
	(sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND")) {
		// Get the optionData.asp to get the find records.
		frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
		frmOptionDataArea = OpenHR.getForm("optiondataframe", "frmOptionData");
		frmOptionArea = OpenHR.getForm("optionframe", "frmFindForm");

		if (sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") {
			frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERBOOKING";
		}
		else {
			if (sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND") {
				frmOptionGetDataArea.txtOptionAction.value = "LOADADDFROMWAITINGLIST";
			}
			else {
				if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
					frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERCOURSE";
				}
				else {
					frmOptionGetDataArea.txtOptionAction.value = "LOADBOOKCOURSE";
				}
			}
		}

		frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;;
		frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
		frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;

		if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
			frmOptionGetDataArea.txtOptionCourseTitle.value = frmOptionArea.txtOptionCourseTitle.value;
		}

		frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;

		refreshOptionData(); //should be in scope
	}
}

function menu_loadQuickFindNoSaveCheck() {
	var frmRecEditArea;
	var frmOptionArea;
	
	// NPG20100824 Fault HRPRO1065 - leave menus disabled in these modal screens
	menu_disableMenu();	
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionAction.value = "";
	
	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_loadQuickFindNoSaveCheck");

}

function menu_loadSelectOrderFilter(psType) {
	var sCurrentWorkPage;
	var frmRecEditArea;
	var frmOptionArea;
	var frmFindArea;
	var sSaveChangesTag;
	var sOptionPage;

	function orderfilter_RecordEdit() {
		frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
		frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

		frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
		frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
		frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;

		if (psType == "ORDER") {
			frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
		}

		frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
		frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
		frmOptionArea.txtGotoOptionValue.value = "";
		frmOptionArea.txtGotoOptionPage.value = sOptionPage;
		frmOptionArea.txtGotoOptionAction.value = "";
		
		OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "orderfilter_RecordEdit");

	}
	
	//disable the menu
	// NPG20100824 Fault HRPRO1065 - leave menus disabled in these modal screens	
	menu_disableMenu();
	
	if (psType == "ORDER") {
		sSaveChangesTag = "SELECTORDER";
		sOptionPage = "orderselect";

		//Disable all ribbon items
		menu_disableFindMenu();
	}
	else {
		sSaveChangesTag = "SELECTFILTER";
		sOptionPage = "filterselect";
		menu_disableFindMenu();		
	}

	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (menu_saveChanges(sSaveChangesTag, true, false) == 0) { // 0 = Prompt
			OpenHR.modalPrompt("You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.", 1, "Confirm").then(function (answer) {
				if (answer == 1) { // OK - Ignore changes
					window.top.onbeforeunload = null;
					orderfilter_RecordEdit();
					return false;
				} else {
					menu_refreshMenu();
					return false;
			}
			});
		} else {  // Don't prompt
			orderfilter_RecordEdit();
			return false;
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {
			frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
			frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

			frmOptionArea.txtGotoOptionScreenID.value = frmFindArea.txtCurrentScreenID.value;
			frmOptionArea.txtGotoOptionTableID.value = frmFindArea.txtCurrentTableID.value;
			frmOptionArea.txtGotoOptionViewID.value = frmFindArea.txtCurrentViewID.value;
			frmOptionArea.txtGotoOptionOrderID.value = frmFindArea.txtCurrentOrderID.value;
			frmOptionArea.txtGotoOptionFilterDef.value = frmFindArea.txtFilterDef.value;
			frmOptionArea.txtGotoOptionFilterSQL.value = frmFindArea.txtFilterSQL.value;
			frmOptionArea.txtGotoOptionValue.value = "";
			frmOptionArea.txtGotoOptionPage.value = sOptionPage;
			frmOptionArea.txtGotoOptionAction.value = "";

			//Sets the selected row ids. It will be empty when multiselection is off.
			frmOptionArea.txtGotoLocateSelectedRecordsInFindGrid.value = $("#txtSelectedRecordsInFindGrid").val();

			OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_loadSelectOrderFilter");

		}
	}	
}

function menu_clearFilter() {
	var sCurrentWorkPage;
	var frmRecEditArea;
	var frmFindArea;

	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (menu_saveChanges("CLEARFILTER", true, false) != 2) { // 2 = vbCancel
			frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

			frmRecEditArea.txtRecEditFilterDef.value = "";
			frmRecEditArea.txtRecEditFilterSQL.value = "";
			refreshData(); //workframe
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {

			frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

			var postData = {
				Action: optionActionType.SELECTFILTER,
				ScreenID: window.top.$("#frmWorkAreaRefresh #txtGotoScreenID").val(),
				TableID: window.top.$("#frmWorkAreaRefresh #txtGotoTableID").val(),
				ViewID: window.top.$("#frmWorkAreaRefresh #txtGotoViewID").val(),
				FilterSQL: "",
				FilterDef: "",
				SelectedRecordsInFindGrid: $("#txtSelectedRecordsInFindGrid").val(),
				//SelectedRecordsInFindGrid: frmFindArea.txtSelectedRecordsInFindGrid.value,
				__RequestVerificationToken: $("[name=__RequestVerificationToken]")[0].value
			}
			OpenHR.submitForm(null, "optionframe", null, postData, "filterselect_Submit");
			menu_reloadFindPage("RELOAD", "");
		}
	}
}

	function menu_currentWorkPage() {
	// Return the current page in the work frameset.
	// var iIndex;
	var sCurrentPage;
	// var sColumnDefn;
	//	
	//	sColumnDefn = window.parent.document.all.item("workframeset").cols;
	//	while (sColumnDefn.substr(0, 1) == " ") {
	//		sColumnDefn = sColumnDefn.substr(1);
	//	}
	//	
	//	if (sColumnDefn.substr(0, 1) == "*") {
	//		// Work frame is in view.
	//		sCurrentPage = new String(window.parent.frames("workframe").document.location);
	//	}
	//	else {
	//		// Option frame is in view.
	//		sCurrentPage = new String(window.parent.frames("optionframe").document.location);
	//	}
	//	
	//	iIndex = sCurrentPage.lastIndexOf("/");
	//	if (iIndex >= 0) {
	//		sCurrentPage = sCurrentPage.substr(iIndex + 1);
	//	}
	//	
	//	iIndex = sCurrentPage.indexOf(".");
	//	if (iIndex >= 0) {
	//		sCurrentPage = sCurrentPage.substr(0, iIndex);
	//	}
	//	
	//	sCurrentPage = sCurrentPage.toUpperCase();

	//	return sCurrentPage;

	if (!($("#workframe").css('display') == 'none')) {
	//Work frame is in view.
		sCurrentPage = $("#workframe").attr("data-framesource");
} else {
	//Option frame is in view.
		sCurrentPage = $("#optionframe").attr("data-framesource");
}

		try {
			sCurrentPage = sCurrentPage.toUpperCase();
		} catch (e) { }

		return sCurrentPage;
	
//	var sCurrentPage = $("#workframe").attr("data-framesource");

//	var iIndex = sCurrentPage.lastIndexOf("/");
//	if (iIndex >= 0) {
//		sCurrentPage = sCurrentPage.substr(iIndex + 1);
//	}

//	iIndex = sCurrentPage.indexOf(".");
//	if (iIndex >= 0) {
//		sCurrentPage = sCurrentPage.substr(0, iIndex);
//	}

//	sCurrentPage = sCurrentPage.toUpperCase();
//	return sCurrentPage;

}

	function menu_selectFolder(psKey, psPath) {
//	var frmOptionArea;

//	ShowWait("Loading folder list. Please wait...");
//	disableMenu();

//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionFile.value = psPath;
//	frmOptionArea.txtGotoOptionPage.value = "folderOption.asp";
//	frmOptionArea.txtGotoOptionAction.value = psKey;

//	frmOptionArea.submit();
}

function menu_LoadEventLog() {
	showDefaultRibbon();

	var postData = {
		__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
	};

	OpenHR.submitForm(null, "workframe", false, postData, "EventLog");
}

	function menu_cancelCourse() {
	var frmDataArea;
	var frmRecEditArea;
	
	// Get the number of course bookings 
	// (to see if we need to prompt for them to be transferred).
	menu_disableMenu();
					
	frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

	frmDataArea.txtAction.value = "CANCELCOURSE";
	frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
	frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
	frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
	frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
	frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;	
	frmDataArea.txtDefaultCalcCols.value = CalculatedDefaultColumns();	
	frmDataArea.txtInsertUpdateDef.value = insertUpdateDef();	// frmRecEditArea.ctlRecordEdit.insertUpdateDef();
	frmDataArea.txtTimestamp.value = $("#txtRecEditTimeStamp").val();	//frmRecEditArea.ctlRecordEdit.timestamp;

	data_refreshData();
}

	function menu_bookCourse() {
		var lngRecordID;
		var frmOptionArea;

	lngRecordID = menu_selectedRecordID();	//shold be in scope

		if (lngRecordID > 0) {
			menu_ShowWait("Loading matching courses...");
			menu_disableFindMenu();

			frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
			var frmMenuInfo = $("#frmMenuInfo")[0].children;

			frmOptionArea.txtGotoOptionScreenID.value = 0;
			frmOptionArea.txtGotoOptionTableID.value = 0;
			frmOptionArea.txtGotoOptionViewID.value = 0;
			frmOptionArea.txtGotoOptionOrderID.value = 0;
			frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
			frmOptionArea.txtGotoOptionFilterDef.value = "";
			frmOptionArea.txtGotoOptionFilterSQL.value = "";
			frmOptionArea.txtGotoOptionValue.value = "";
			frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
			frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
			frmOptionArea.txtGotoOptionLinkViewID.value = 0;
			frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
			frmOptionArea.txtGotoOptionPage.value = "tbBookCourseFind";
			frmOptionArea.txtGotoOptionAction.value = "";
			frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
			frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
			frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

			OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "tbBookCourseFind");
		}
		else {
			OpenHR.messageBox("You must select a course to book.");
		}
	}

	function menu_transferBooking() {
	var lngRecordID;
	var frmOptionArea;
	
	lngRecordID = menu_selectedRecordID();

	if (lngRecordID > 0) {
	menu_ShowWait("Loading matching courses...");
	menu_disableMenu();

	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	frmOptionArea.txtGotoOptionScreenID.value = 0;
	frmOptionArea.txtGotoOptionTableID.value = 0;
	frmOptionArea.txtGotoOptionViewID.value = 0;
	frmOptionArea.txtGotoOptionOrderID.value = 0;
	frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
	frmOptionArea.txtGotoOptionFilterDef.value = "";
	frmOptionArea.txtGotoOptionFilterSQL.value = "";
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
	frmOptionArea.txtGotoOptionPage.value = "tbTransferBookingFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "tbTransferBookingFind");
}
	else {
	OpenHR.messageBox("You must select a booking to transfer.");
}
}

	function menu_cancelBooking() {
	var lngRecordID;
	var frmDataArea;
	var iUserChoice;
	lngRecordID = menu_selectedRecordID();
	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	if (lngRecordID > 0) {
	if ((frmMenuInfo.txtTB_WaitListTableInsert.value.toUpperCase() == "TRUE") &&
	(frmMenuInfo.txtTB_WaitListCourseTitleColumnUpdate.value.toUpperCase() == "TRUE")) {

	OpenHR.modalPrompt("Transfer the booking to the employee's waiting list ?", 3, '', menu_cancelBookingResponse);			
}
	else {
	//iUserChoice = 7; // No
	menu_cancelBookingResponse(7);
}

	//function continues from popup to menu_cancelBookingResponse
}
	else {
	OpenHR.messageBox("You must select a booking to transfer.");
}
}

	function menu_cancelBookingResponse(iUserChoice) {	
		if (iUserChoice != 2) {
			menu_disableMenu();
			var frmDataArea;
		var lngRecordID = menu_selectedRecordID();

			frmDataArea = OpenHR.getForm("dataframe", "frmGetData");

			frmDataArea.txtAction.value = "CANCELBOOKING";
			frmDataArea.txtRecordID.value = lngRecordID;
			frmDataArea.txtUserChoice.value = (iUserChoice != 7);

			data_refreshData();
		}
}

	function menu_bulkBooking() {

		var frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
		var lngRecordID = frmFindArea.txtCurrentParentRecordID.value;

		if (lngRecordID > 0) {
			menu_disableMenu();

			var frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
			frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;

			OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "BulkBooking");

		}
	}

	function menu_addFromWaitingList() {
	var lngRecordID;
	var frmFindArea;
	var frmOptionArea;
	
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
	lngRecordID = frmFindArea.txtCurrentParentRecordID.value;

	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	if (lngRecordID > 0) {
	menu_ShowWait("Loading matching employees...");
	menu_disableFindMenu();

	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

	frmOptionArea.txtGotoOptionScreenID.value = 0;
	frmOptionArea.txtGotoOptionTableID.value = 0;
	frmOptionArea.txtGotoOptionViewID.value = 0;
	frmOptionArea.txtGotoOptionOrderID.value = 0;
	frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
	frmOptionArea.txtGotoOptionFilterDef.value = "";
	frmOptionArea.txtGotoOptionFilterSQL.value = "";
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_EmpTableID.value;
	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
	frmOptionArea.txtGotoOptionPage.value = "tbAddFromWaitingListFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "tbAddFromWaitingListFind");
}
}

	function menu_transferCourse(plngNewCourseRecordID, pfBookingsExist) {
	var iResult;
	var frmDataArea;
	var frmRecEditArea;
	var frmMenuInfo = $("#frmMenuInfo")[0].children;

	// Get the number of course bookings 
	// (to see if we need to prompt for them to be transferred).
	menu_disableMenu();

	iResult = 7; // Default to No.

	if ((plngNewCourseRecordID == 0) &&
	(pfBookingsExist == true) &&
	(frmMenuInfo.txtTB_WaitListTableInsert.value.toUpperCase() == "TRUE") &&
	(frmMenuInfo.txtTB_WaitListCourseTitleColumnUpdate.value.toUpperCase() == "TRUE")) {
	// Prompt the user to create waiting list
	iResult = OpenHR.messageBox("Create waiting list entries for the cancelled bookings ?", 36); // 36 = yesNo + question
}
	
	frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

	frmDataArea.txtAction.value = "CANCELCOURSE_2";
	frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
	frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
	frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
	frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
	frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
	frmDataArea.txtDefaultCalcCols.value = CalculatedDefaultColumns();
	frmDataArea.txtInsertUpdateDef.value = insertUpdateDef();	// frmRecEditArea.ctlRecordEdit.insertUpdateDef();
	frmDataArea.txtTimestamp.value = $("#txtRecEditTimeStamp").val(); //frmRecEditArea.ctlRecordEdit.timestamp;
	frmDataArea.txtTBCourseRecordID.value = plngNewCourseRecordID;
	frmDataArea.txtTBCreateWLRecords.value = (iResult != 7);
	
	data_refreshData();
}

	function menu_loadRecordDefSelPage(piDefSelType) {
		if (menu_saveChanges("CALENDARREPORTSREC", true, false) != 2) { // 2 = vbCancel
			menu_loadRecordDefSelPageNoSaveCheck(piDefSelType);
		}
	}

	function menu_loadRecordDefSelPageNoSaveCheck(piDefSelType) {

		// Show loading screen
		menu_disableMenu();
		// Load the required definition selection screen
		var postData = {
		txtTableID: OpenHR.activeFrame().find('#txtCurrentTableID').val(),
			utiltype: piDefSelType,
			utilID: 0,
		RecordID: OpenHR.activeFrame().find('#txtCurrentRecordID').val(),
			__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
		};

		OpenHR.submitForm(null, "optionframe", null, postData, "DefSel");

	}

	function menu_LoadAbsenceCalendar() {

	var frmOptionArea;
	var frmRecEdit;
	var lngRecordID;
	var strRealSource;

	// Show loading screen
	OpenHR.disableMenu();

	// Submit the current "workframe" form, and then load the required page.
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");
	frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");

	lngRecordID = frmRecEdit.txtCurrentRecordID.value;
	frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;

	strRealSource = frmRecEdit.txtRecEditRealSource.value;
	frmOptionArea.txtGotoOptionRealsource.value = strRealSource;

	frmOptionArea.txtGotoOptionAction.value = "";

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_LoadAbsenceCalendar");

}

	function menu_LoadAbsenceCalendarNoSaveCheck() {

	var frmOptionArea;
	var lngRecordID;
	var lngTableID;
	var strRealSource;

	// Show loading screen
	menu_ShowWait("Loading absence calendar...");
	menu_disableMenu();

	// Submit the current "workframe" form, and then load the required page.
	frmOptionArea = OpenHR.getForm("optionframeset", "frmGotoOption");

	lngRecordID = $('#txtCurrentRecordID').val();
	frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;

	strRealSource = $('#txtRecEditRealSource').val();	
	frmOptionArea.txtGotoOptionRealsource.value = strRealSource;
		frmOptionArea.txtGotoOptionAction.value = "";

	OpenHR.submitForm(frmOptionArea, "optionframe", null, null, "menu_LoadAbsenceCalendarNoSaveCheck");

}

	function menu_LoadStandardReport(psReportType, psRecordSelection) {

		var iCurrentRecordID = 0;
		var displayDiv = "workframe";

		// If we came from an individual record
		if (psRecordSelection === "REC") {
			iCurrentRecordID = $('#txtCurrentRecordID')[0].value;
			displayDiv = "optionframe";
		}

		var postData = {
			Action: optionActionType.STDREPORT_DATEPROMPT,
			UtilType: ((psReportType === "ABSENCEBREAKDOWN") ? utilityType.AbsenceBreakdown : utilityType.BradfordFactor),
			EmployeeID: iCurrentRecordID,
			__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
		};
		OpenHR.submitForm(null, displayDiv, null, postData, "LoadStandardReport");

	}

function menu_LoadStandardReportNoSaveCheck(psReportType, psRecordSelection) {
}

function menu_displayVersionInfo() {
//	window.open("VersionInfo.htm",null,"height=550,width=650,resizable=yes,scrollbars=yes,status=yes,toolbar=yes,menubar=yes,location=no");
//	return;
}

function menu_NewWindow(mypage, myname, w, h, scroll) {
//	var winl = (screen.width - w) / 2;
//	var wint = (screen.height - h) / 2;
//	winprops = 'height='+h+',width='+w+',top='+wint+',left='+winl+',scrollbars='+scroll+',resizable'
//	win = window.open(mypage, myname, winprops)
//	if (parseInt(navigator.appVersion) >= 4) 
//		{ 
//		win.window.focus(); 
//		}
}

function menu_refreshDefSel() {
//	if(currentWorkPage() == "DEFSEL")
//	{
//		try
//		{
//			frmDefSel = window.parent.frames("workframe").document.forms("frmDefSel");
//			loadDefSelPage(frmDefSel.utiltype.value, frmDefSel.utilid.value, frmDefSel.txtTableID.value, false);
//		}
//		catch (e) {}
//	}
}		

//NEW FUNCTIONS.

	function menu_insertMenuItem(parentULID, NewLICaption, NewLIID) {
		var insertRef = "#" + parentULID;
		if ($(insertRef).length > 0) {
			$(insertRef).prepend("<li id='" + NewLIID + "'><a href='#'>" + NewLICaption + "</a></li>");
		} else {

			var insertRefULParent = insertRef.replace("#mnuband", "mnutool");

			$("#contextmenu div[aria-labelledby='" + insertRefULParent + "']>ul").attr("id", insertRef.replace("#", ""));
			$(insertRef).prepend("<li id='" + NewLIID + "'><a href='#'>" + NewLICaption + "</a></li>");
		}
	}

	function menu_insertSubMenuItem(parentULID, NewLICaption, NewLIID, NewULID) {
	var insertRef = "#" + parentULID;
	$(insertRef).prepend("<li id='" + NewLIID + "'><a href='#'>" + NewLICaption + "</a><ul id='" + NewULID + "'></ul></li>");
}

	function menu_sortULMenuItems(parentULID) {
	var ulID = "#" + parentULID + " li";
	$(ulID).sort(asc_sort).appendTo('.list');

	// accending sort
	function asc_sort(a, b) {
	return ($(b).text()) < ($(a).text());
}

	// decending sort
	//function dec_sort(a, b) {
	//	return ($(b).text()) > ($(a).text());
	//}	
}

	function menu_enableMenuItem(itemId, fNewSetting) {
		// Note: we use class 'disabled' instead of actually disabling the elements because jsTree removes disabled attributes.
		// the function 'menu_abMainMenu_Click' looks for the disabled class and rejects the click.

		if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		window.parent.$("#" + itemId + " a:first").removeClass("disabled");
		} else {
		window.parent.$("#" + itemId + " a:first").addClass("disabled");
		window.parent.$("#" + itemId + " a:first").css({ cursor: "default" });
		if ((window.parent.$("#" + itemId + " a:first").hasClass("ui-menu-item")) || (itemId.substr(0, 3) == "HT_")) { //Apply lightgrey color to disabled items on the context mennu only, not on the ribbon
			window.parent.$("#" + itemId + " a:first").css({ color: "lightgrey" });
			}
		}
}

	function menu_toolbarEnableItem(itemId, fNewSetting) {

	if (((window.parent.$("#" + itemId).length) == 0) || (window.parent.$("#" + itemId) == undefined)) {
			//console.log('Wrong menu item ID in menu_toolbarEnableItem: ' + itemId); //To detect menu items that exist in menu.js but not on fixedlinks.ascx
			return;
		}

	var currSrc = window.parent.$("#" + itemId + " img:first").attr("src");

	if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		//apply enable icon
		if (currSrc.indexOf("HOVER") <= 0) {
			window.parent.$("#" + itemId + " img:first").attr("src", currSrc.replace("DIS.png", "HOVER.png"));
			window.parent.$("#" + itemId).removeClass("disabled");
			window.parent.$("#" + itemId + " a").removeClass("disabled");
			window.parent.$("#" + itemId + " a h6").removeClass("disabled");
			window.parent.$('#' + itemId + " a h6").removeClass('ui-state-disabled');
		}
	} else {
		//apply disable icon
		if (currSrc.indexOf("DIS") <= 0) {
			window.parent.$("#" + itemId + " img:first").attr("src", currSrc.replace("HOVER.png", "DIS.png"));
			window.parent.$("#" + itemId).addClass("disabled");
			window.parent.$("#" + itemId + " a").addClass("disabled");
			window.parent.$("#" + itemId + " a h6").addClass("disabled");
			window.parent.$('#' + itemId + " a h6").addClass('ui-state-disabled');
		}
	}
}


	function menu_setVisibleMenuItem(itemId, fNewSetting) {
	var sNewValue = "";

	if (window.parent.$("#" + itemId).length == 0) {
	//console.log('Wrong menu item ID in menu_setVisibleMenuItem: ' + itemId); //To detect menu items that exist in menu.js but not on fixedlinks.ascx
}

	if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		window.parent.$("#" + itemId + " a:first").show();
		if (itemId == "mnutoolFixedWorkflowOutOfOffice") { //This menu item is not placed inside a div, so the code that shows it has to be slightly different
			window.parent.$("#" + itemId).show();
		}
		if (window.parent.$("#" + itemId).hasClass("hidden")) {
			window.parent.$("#" + itemId).removeClass("hidden");
}
	} else {
		window.parent.$("#" + itemId + " a:first").hide();
		if (itemId == "mnutoolFixedWorkflowOutOfOffice") { //This menu item is not placed inside a div, so the code that hides it has to be slightly different
			window.parent.$("#" + itemId).hide();
}
		if (!window.parent.$("#" + itemId).hasClass("hidden")) {
			window.parent.$("#" + itemId).addClass("hidden");
}
}

	if (itemId == "mnutoolHistory") {
		//In some instances the accordion has not been completely initialized so the following JQuery UI exception is thrown:
		//"cannot call methods on accordion prior to initialization; attempted to call method 'resize'"
		//so I'm try-catching the statement
		try {
			window.parent.$(".accordion").accordion("refresh");

		} catch (e) { }
	}
}

	function frmMenuInfo(newCaption) {
	if (newCaption != null && newCaption.length > 0) $("#mnutoolRecordPosition span").text(newCaption);
}


	function menu_toolCount(itemId) {
	return $("#" + itemId + " li").length;
}

	function menu_setVisibletoolbarGroup(itemId, fNewSetting) {
	if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
	$("#" + itemId).parent().show();
}
	else {
		window.top.$("#" + itemId).parent().hide();
}
}

	function menu_setVisibletoolbarGroupById(itemId, fNewSetting) {
		if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		window.top.$("#" + itemId).show();
}
		else {
		window.top.$("#" + itemId).hide();
}
}

	function menu_GetItemValue(itemID) {
	//return window.parent.frames("menuframe").document.all.item("txtSysPerm_EVENTLOG_DELETE").value;
	return $("#menuframe #" + itemID).val();
}


	function applyJSTree(element) {
	//Add treeview functionality to all divs in the accordion
	if (element == undefined) element = "";
	


	$(".accordion div" + element).jstree({
		"themes": {
			"dots": false,
			"icons": true
		},
		"plugins": ["html_data", "ui", "themeroller"],
		types: {
			"types": {
				"disabled": {
					"select_node": false,
					"open_node": false,
					"close_node": false,
					"create_node": false,
					"delete_node": false
				}
			}
		},
		"themeroller": {
			"item_leaf": false,
			"item_clsd": false,
			"item_open": false,
			"item": "ui-menu-item"
		}
	});

	$('.accordion div' + element).removeClass('ui-widget-content');
		$('.ui-accordion-content').addClass('ui-widget-content');
}

	function menu_SetmnutoolRecordPositionCaption(newCaption) {
	//update the record position text.
	window.parent.$("#mnutoolRecordPosition span").text(newCaption);
	window.parent.$("#mnutoolPositionRecordFind span.totalRecordsCount").text(newCaption);
}

	function menu_SetmnutoolEventLogRecordPositionCaption(newCaption) {
		//update the record position text.
		$("#mnutoolRecordEventLog span").text(newCaption);
		$("#mnutoolRecordEventLog span").text(newCaption);
	}

	function menu_SetmnutoolLocateRecordsText(newCaption) {
	//update the locate record text.
	$("#mnutoolLocateRecords input:text").val(newCaption);
}


	function menu_isSSIMode() {
	if ((window.parent.window.SSIMode.toLowerCase() == "true") || (window.parent.window.SSIMode == true)) {
			return true;
		} else {
			return false;
		}
	}

function menu_SetmnutoolButtonCaption(itemID, newCaption) {
	try {
		window.parent.$('#' + itemID + ' a').attr('title', newCaption);
		window.parent.$('#' + itemID + ' h6').text(newCaption);
	}
	catch (e) { }
}

function showDatabaseMenuGroup() {
	setTimeout("$('#mnutoolDatabase').click()", 100);	
}

function toggleMandatoryColumns(pfSetting) {
	
	OpenHR.activeFrame().find('#ctlRecordEdit *[data-Mandatory="1"]').each(function () {
		var controlType = $(this).attr('data-controlType');

		if (controlType == "4096") {
			//working pattern
			if ($(this).children('input:enabled').length > 0) $(this).toggleClass('ui-state-highlight');
		}
		else if ((controlType == "32") && ($(this).is(':enabled'))) {
			//Spinner
			$(this).parent().toggleClass('ui-state-highlight');
		}
		else if ((controlType == "1") && ($(this).is(':enabled'))) {
			//checkbox
			$(this).parent().toggleClass('ui-state-highlight');
		}
		else if ((controlType == "16") && (!$(this).prop('disabled'))) {
			//Option Group
			$(this).toggleClass('ui-state-highlight');
		} else {
			if ($(this).is(':enabled')) {
				$(this).toggleClass('ui-state-highlight');
			}
		}
	});

	$('#mnutoolMFRecord').toggleClass('toolbarButtonOn');

	//Store user setting to cookie		
	if (!pfSetting) {
		setCookie("toolMFRecord", ($('#mnutoolMFRecord').hasClass('toolbarButtonOn')), 100);
	}
}

/******* Begin Changes related to to user stories : 18362, 18363, 18628 & 18629  *********/

// Loads the defsel for the provided utiltype when the cancel button of the tools details screen (picklist/filter/calc) clicked.
function menu_LoadDefSel_Inside_Frame(piDefSelType, piUtilId, piTableId, pfFromMenu) {

	// Load the required definition selection screen
	var displayDiv = (pfFromMenu === true ? "workframe" : "optionframe");

	// If the tools screen loaded from the report definition then set ToolsFrame
	if ((piDefSelType == 10) || (piDefSelType == 11) || (piDefSelType == 12)) {
		if ((IsToolsScreenLoadedFromReportDefinition() == true) || OpenHR.currentWorkPage() == "TOOLS_SCREEN_LOADED_FROM_REPORT_DEFINITION") {
			displayDiv = "ToolsFrame";
			pfFromMenu = false;
		}
	}

	var postData = {
		txtTableID: piTableId,
		utiltype: piDefSelType,
		utilID: piUtilId,
		txtGotoFromMenu: pfFromMenu,
		__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
	};

	OpenHR.submitForm(null, displayDiv, null, postData, "DefSel");
	showDefaultRibbon();
}

// Check if the user has loaded the tools screen (picklist/filter/cal) from the report definition.
function IsToolsScreenLoadedFromReportDefinition() {
	var retVal = false;
	var frmUseful = OpenHR.getForm("ToolsFrame", "frmUseful");
	if (frmUseful != null && frmUseful.txtFlag_To_Identify_Page_Source.value != null) {
		if (frmUseful.txtFlag_To_Identify_Page_Source.value.toLowerCase() == "true") {
			retVal = true;
		}
	}
	return retVal;
}

// Loads the Tools (Piclist/Filter/Calculation) screen based on its utility type. 
// Also set a value indicating that the screen is loaded from the report definition screen. This value will be used to identify that in which frame this screen is loaded.
function LoadToolsScreen(utilityType) {
	var postSessionData = {
		isLoadedFromReportDefinition: true,
		__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
	};

	OpenHR.submitForm(null, null, false, postSessionData, "ResetPageSourceFlag", function () { LoadToolsScreenInToolsFrame(utilityType); });
}

// Loads Tools screen (Piclist/Filter/Calculation) into tools frame based on its type. 
function LoadToolsScreenInToolsFrame(utilityType) {
	var displayDiv = "ToolsFrame";
	var postData = {
		txtTableID: 0,
		utiltype: utilityType,
		utilID: 0,
		txtGotoFromMenu: true,
		__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
	};

	//// @TODO : Uncomment below code, if we want to provide a confirmation message to be asked whilst the user attempting to nevigate away from the tools screen which is loaded from the report definition.
	// enableSaveButton();

	SetOptionFrameToEmpty();

	OpenHR.submitForm(null, displayDiv, null, postData, "DefSel");
	showDefaultRibbon();
}

// Clear the option frame html
function SetOptionFrameToEmpty() {
	// If any report definition tree menu item is clicked after loading the record edit screen from the database section. (E.g. Calendar Report, Mail Mearge) then clean up the option frame. 
	// Steps to reproduce the issue : Go to DatabaseMenu -> Personaal Record -> Edit Record -> click on the Calender Report/Mail Mearge button in ribbonbar -> Now click on any Report Definition -> Edit it -> Click on Picklist ribbon button = App will break.
	if (OpenHR.getForm("optionframe", "frmDefSel") != null) {
		$('#optionframe').html('');
	}
}

// Hide Tools (Piclist/Filter/Calculation) ribbon buttons. 
function HideToolsRibbonButtons() {
	menu_setVisibleMenuItem("mnutoolFilterReport", false);
	menu_setVisibleMenuItem("mnutoolPicklistReport", false);
	menu_setVisibleMenuItem("mnutoolCalculationReport", false);
}

// Sets the ribbon buttons for the AbsenceBreakdown and BradfordFactor reports
function SetsRibbonButtonsForAbsenceBreakdownAndBradfordFactor() {

	// Set the report find toolbar group name to 'Tools' and show the picklist/filter menu items
	menu_setVisibletoolbarGroupById('mnuSectionReportToolsFind', true);
	$('#toolbarReportFind').text('Tools');

	menu_setVisibleMenuItem("mnutoolNewReportFind", false);
	menu_setVisibleMenuItem("mnutoolCopyReportFind", false);
	menu_setVisibleMenuItem("mnutoolEditReportFind", false);
	menu_setVisibleMenuItem("mnutoolDeleteReportFind", false);
	menu_setVisibleMenuItem("mnutoolPropertiesReportFind", false);
	menu_toolbarEnableItem("mnutoolRunReportFind", true);
	menu_setVisibleMenuItem("mnutoolRunReportFind", true);
	menu_setVisibleMenuItem('mnutoolCloseReportFind', false);

}

// Cleans the tools frame and reset the page source.
function CleanToolsFrameAndResetPageSource() {
	if (OpenHR.currentWorkPage() == 'TOOLS_SCREEN_LOADED_FROM_REPORT_DEFINITION' || IsToolsScreenLoadedFromReportDefinition() == true) {

		var utilType = null;
		var reportDefinitionForm = OpenHR.getForm("workframe", "frmReportDefintion");

		if (reportDefinitionForm != null) {
			utilType = reportDefinitionForm.txtReportType.value;
		}

		// Post data to reset the session variables which was indicating that we have loaded the defsel into toolsframe from the report definition.
		var postSessionData = {
			utiltype: utilType,
			isLoadedFromReportDefinition: false,
			__RequestVerificationToken: $('[name="__RequestVerificationToken"]').val()
		};

		OpenHR.submitForm(null, null, false, postSessionData, "ResetPageSourceFlag", function () {
			$("#ToolsFrame").html('');
		});
	}
}

// Gets the prompted message
function GetPromptMessage() {

	var defaultPromptMessage = "You have made changes. Click 'OK' to discard your changes, or 'Cancel' to continue editing.";

	//// @TODO : Uncomment below code and update with the proper message, if we want to provide a confirmation message to be asked whilst the user attempting to nevigate away from the tools screen which is loaded from the report definition.
	//if (OpenHR.currentWorkPage() == "TOOLS_SCREEN_LOADED_FROM_REPORT_DEFINITION") {
	//	defaultPromptMessage = "You are trying to move from the report definition source. Click 'OK' to discard your changes, or 'Cancel' to continue editing.";
	//}

	return defaultPromptMessage;
}

/******* End Changes related to to user stories : 18362, 18363, 18628 & 18629  *********/


/******* Begin Changes for the user story 19436: As a user, I want to run reports and utilities from the Find Window  *********/

// Enable Multi Select ribbon button if the multifind param is false and find grid has non editable grid
function EnableMultiSelectRibbonButton(enableMultiSelectButton) {

	// Hide multi select button if ssi mode is enabledgroup for SSI...
	if (menu_isSSIMode() == true) {
		SetMultiSelectionModeOff();
		menu_setVisibletoolbarGroupById("mnuSectionReportsAndUtility", false);
		$("#mnutoolPositionRecordFind span.selectedRecordsCount").hide();
	}
	else {
		//var frmFind = document.getElementById("frmFindForm");
		var frmFind = OpenHR.getForm("workframe", "frmFindForm");	//todo: could this be optionframe??
		menu_setVisibleMenuItem("mnutoolMultiSelectFind", true);
		menu_toolbarEnableItem("mnutoolMultiSelectFind", enableMultiSelectButton && frmFind.txtTotalRecordCount.value > 0);
		ToggleSelectedRecordOption(enableMultiSelectButton);
	}
}

// Toggle the multi select button in find window ribbon
function ToggleMultiSelectionButton(enable) {
	menu_toolbarEnableItem("mnutoolMultiSelectFind", enable);
}

// Toggle the selected count span in find window ribbon
function ToggleSelectedRecordOption(show) {
	if (show && IsMultiSelectionModeOn()) { $("#mnutoolPositionRecordFind span.selectedRecordsCount").show(); }
	else { $("#mnutoolPositionRecordFind span.selectedRecordsCount").hide(); }
}

// Refresh the find window ribbon buttons
function RefreshFindWindowRibbonButtons(isNonMultiFindLinkType, isNonEditableGrid) {
	var canRunCustomReports = false;
	var canRunCalendarReports = false;
	var canRunMailMerge = false;
	var canRunDataTransfer = false;
	var isMultiSelectOn = IsMultiSelectionModeOn();
	//var frmFind = document.getElementById("frmFindForm");
	var frmFind = OpenHR.getForm("workframe", "frmFindForm");
	var isDmiUser = (window.top.$("#txtIsDMIUser")[0].value == "True");

	if (isMultiSelectOn) {
		if (window.top.window.txtSysPerm_MAILMERGE_RUN != null && window.top.window.txtSysPerm_MAILMERGE_RUN.value == 1 && isDmiUser) {
			canRunMailMerge = true;
		}

		if (window.top.window.txtSysPerm_CALENDARREPORTS_RUN != null && window.top.window.txtSysPerm_CALENDARREPORTS_RUN.value == 1 && isDmiUser) {
			canRunCalendarReports = true;
		}

		if (window.top.window.txtSysPerm_CUSTOMREPORTS_RUN != null && window.top.window.txtSysPerm_CUSTOMREPORTS_RUN.value == 1 && isDmiUser) {
			canRunCustomReports = true;
		}

		if (window.top.window.txtSysPerm_DATATRANSFER_RUN != null && window.top.window.txtSysPerm_DATATRANSFER_RUN.value == 1 && isDmiUser) {
			canRunDataTransfer = true;
		}
	}

	menu_toolbarEnableItem("mnutoolCustomReportsFind", isNonMultiFindLinkType && canRunCustomReports && frmFind.txtCustomReportGrantedForFindWindow.value.toUpperCase() == "TRUE");
	menu_toolbarEnableItem("mnutoolMailMergeFind", isNonMultiFindLinkType && canRunMailMerge && frmFind.txtMailMergeGrantedForFindWindow.value.toUpperCase() == "TRUE");
	menu_toolbarEnableItem("mnutoolCalendarReportsFind", isNonMultiFindLinkType && canRunCalendarReports && frmFind.txtCalendarReportGrantedForFindWindow.value.toUpperCase() == "TRUE");
	menu_toolbarEnableItem("mnutoolDataTransferFind", false);

	//Enable below line and remove above line, when implementing DataTransfter functionality. Till that time the button should be disabled.
	//menu_toolbarEnableItem("mnutoolDataTransferFind", isNonMultiFindLinkType && canRunDataTransfer);

	// Enable multiselect button is multi find is false
	EnableMultiSelectRibbonButton(isNonMultiFindLinkType, isNonEditableGrid);
	
	if (isMultiSelectOn) {		
		menu_toolbarEnableItem("mnutoolNewRecordFind", false);
		menu_toolbarEnableItem("mnutoolCopyRecordFind", false);
		menu_toolbarEnableItem("mnutoolEditRecordFind", false);
		menu_toolbarEnableItem("mnutoolDeleteRecordFind", false);
	}
	else {
		var selectedRecordId = menu_selectedRecordID();
		if (selectedRecordId == "" | selectedRecordId == null) {
			selectedRecordId = 0;
		}

		var fMnutoolNewRecordFind = (frmFind.txtInsertGranted.value.toUpperCase() == "TRUE" && isDmiUser);
		menu_toolbarEnableItem("mnutoolNewRecordFind", fMnutoolNewRecordFind);
		menu_toolbarEnableItem("mnutoolCopyRecordFind", (fMnutoolNewRecordFind && selectedRecordId > 0));
		menu_toolbarEnableItem("mnutoolEditRecordFind", (selectedRecordId > 0));
		menu_toolbarEnableItem("mnutoolDeleteRecordFind", frmFind.txtDeleteGranted.value.toUpperCase() == "TRUE" && selectedRecordId > 0 && isDmiUser);
	}
}


// Returns true if multi select is on, False otherwise
function IsMultiSelectionModeOn() {
	var isMultiSelectOn = false;
	if (window.parent.$('#mnutoolMultiSelectFind h6').text().indexOf('On') > -1) { isMultiSelectOn = true; }
	return isMultiSelectOn;
}

// Sets multi select mode off and multi select tooltip text
function SetMultiSelectionModeOff() {
	window.parent.$('#mnutoolMultiSelectFind h6').html("Multi-Select <br/>Off");
	window.parent.$('#mnutoolMultiSelectFind a').prop("title", "Multi-Select Off");
}

// Load report or utility screeen from the find window
function LoadReportOrUtilityScreen(utilityType) {
	var multiSelectedRecords = OpenHR.activeFrame().find("#txtSelectedRecordsInFindGrid").val();

	if (multiSelectedRecords === "" || multiSelectedRecords.split(",").length < 1) {
		OpenHR.modalMessage("Please select at least one record to run the report or utility");
	} else {

		var frmFind = OpenHR.getForm("workframe", "frmFindForm");
		// Load the required definition selection screen
		var postData = {
			txtTableID: frmFind.txtCurrentTableID.value,
			utiltype: utilityType,
			utilID: 0,
			RecordID: 0,
			MultipleRecordIDs: multiSelectedRecords,
			__RequestVerificationToken: window.top.$('[name="__RequestVerificationToken"]').val()
		};

		OpenHR.submitForm(null, "optionframe", null, postData, "DefSel");
	}
}

/******* End Changes for the user story 19436: As a user, I want to run reports and utilities from the Find Window  *********/