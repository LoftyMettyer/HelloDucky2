function menu_window_onload() {
	var iLoop;
	var iVisibleCount;

    //Hide menu subitems until it's been set up. NB the application of the JSTree plug-in makes them visible again.
    $("#contextmenu ul").hide();

	//call the three functions that were generated by menu.ascx
	window.refreshDatabaseMenu();
	window.refreshQuickEntryMenu();
	window.refreshTableScreensMenu();
	window.menuErrorShown = false;

	//add onclick to all the menuitems.
	$("#contextmenu a").live('click', function (e) {
		var pTool = ($(this).closest("li").attr("id"));
		menu_abMainMenu_Click(pTool);
	});
    
    //add onclick to all ribbon items.
	$(".officetab a").live('click', function (e) {
	    var pTool = ($(this).closest("div").attr("id"));	    
	    menu_abMainMenu_Click(pTool);
	});



	//Add accordion functionality to the context menu
	$(".accordion").accordion({
	    heightStyle: "fill",
	    icons: false
	});

    //apply tree control
    applyJSTree();

	if ($("#txtErrorDescription").val().length > 0) {
		//ASRIntranetFunctions.MessageBox(window.txtErrorDescription.value, 0, "OpenHR Intranet"); // 0 = vbOKonly
		OpenHR.messageBox(window.txtErrorDescription.value, 0, "OpenHR Intranet"); // 0 = vbOKonly
		window.parent.location.replace("login");
	}
	else {
		//The following values don't seem to be used in the solution. I'll rem it. Might be in the activeX stuff.
		//ASRIntranetFunctions.LC_SaveSettingsToRegistry(txtCFG_PCL.value, txtCFG_BA.value, txtCFG_RT.value, txtCFG_LD.value);

		//TODO check for existence of menu control/page I guess.
		//		if (abMainMenu == null) {
		//			// The menu control was not loaded properly.
		//			ASRIntranetFunctions.MessageBox("Menu control not loaded.", 0, "OpenHR Intranet"); // 0 = vbOKOnly
		//			window.parent.location.replace("login.asp");
		//		}
		//		else {

		//Load the standard menu options into the menubar.
		//DON'T NEED - STYLING IS CSS NOW.
		//setMenuFont(abMainMenu);

		//Forces the ActiveBar to initialize and attach itself to the current form.
		//DON'T NEED - PART OF MENU.ASCX NOW
		//abMainMenu.Attach();

		//Starts an asynchronous download of a layout file
		//DON'T NEED - THE TEMPLATED CONTENT IS NOW IN MENU.ASCX
		//abMainMenu.DataPath = "misc\\mainmenu.htm";



		//When asynchronous data download is complete (.DataPath event) it fires the DataReady Function, so call that now.		
		setTimeout("$(menu_abMainMenu_DataReady())", 0);




		//Refreshes toolbars display and layout after modifying any of the properties at runtime.
		//DON'T NEED.
		//abMainMenu.RecalcLayout();
		//		}

		//TODO 
		//ASRIntranetFunctions.DatabaseName = frmMenuInfo.txtDatabase.value;

	}
}



function menu_abMainMenu_DataReady() {
	var iVisibleCount;
	var iLoop;
	var sKey;

	//Get the frmMenuInfo object for implicit use in this function (non-ie)
	var frmMenuInfo = document.getElementById("frmMenuInfo");


	//THIS BLOCK WAS USED TO READ MENU LAYOUTS. 
	//NOT REQUIRED
	//	sKey = new String("tempmenufilepath_");
	//	sKey = sKey.concat(frmMenuInfo.txtDatabase.value);	
	//	sPath = ASRIntranetFunctions.GetRegistrySetting("HR Pro", "DataPaths", sKey);
	//	if(sPath == "") {
	//		sPath = "c:\\";
	//	}

	//	if(sPath == "<NONE>") {
	//		frmMenuInfo.txtMenuSaved.value = 1;
	//		abMainMenu.RecalcLayout();
	//	}
	//	else {
	//		if (sPath.substr(sPath.length - 1, 1) != "\\") {
	//			sPath = sPath.concat("\\");
	//		}
	//		
	//		sPath = sPath.concat("tempmenu.asp");
	//		if ((abMainMenu.Bands.Count() > 0) && (frmMenuInfo.txtMenuSaved.value == 0) && (window.menuErrorShown = false)) {
	//			try {
	//				abMainMenu.save(sPath, "");
	//			}
	//			catch(e) {
	//				sKey = new String("tempMenuFilePath_");
	//				sKey = sKey.concat(frmMenuInfo.txtDatabase.value);	
	//				ASRIntranetFunctions.SaveRegistrySetting("HR Pro", "DataPaths", sKey, "<%=cleanStringForJavaScript(session('dfltTempMenuFilePath'))%>");
	//				
	//				ASRIntranetFunctions.MessageBox("The specified temporary menu file path cannot be written to. The default temporary menu file path will be applied."); 
	//        menuErrorShown = true;
	//			}			
	//			frmMenuInfo.txtMenuSaved.value = 1;
	//		}
	//		else {
	//			if ((abMainMenu.Bands.Count() == 0) && (frmMenuInfo.txtMenuSaved.value == 1)) {
	//				abMainMenu.DataPath = sPath;
	//				abMainMenu.RecalcLayout();
	//				return;
	//			}
	//		}
	//	}

	//Disable/Hide menu items that are irrelevent for this user...
	menu_refreshMenu();

	//	if ((abMainMenu.Bands.Count() > 0) &&
	//		(frmMenuInfo.txtUserType.value == 1)) {
	//		abMainMenu.Tools("mnutoolReports").visible = false;
	//		abMainMenu.Tools("mnutoolTools").visible = false;
	//		abMainMenu.Tools("mnutoolNewUser").visible = false;

	if ((frmMenuInfo.txtUserType.value == 1)) {
		//abMainMenu.Tools("mnutoolReports").visible = false;
		menu_setVisibleMenuItem("mnutoolReports", false);
		//abMainMenu.Tools("mnutoolTools").visible = false;
		menu_setVisibleMenuItem("mnutoolTools", false);
		//abMainMenu.Tools("mnutoolNewUser").visible = false;
		menu_setVisibleMenuItem("mnutoolNewUser", false);



//		for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnubandUtilities").Tools.Count(); iLoop++) {
//			if (abMainMenu.Bands.Item("mnubandUtilities").Tools.Item(iLoop).name != "mnutoolDiary") {
//				abMainMenu.Bands.Item("mnubandUtilities").Tools.Item(iLoop).visible = false;
//			}
//			else {
//				if (abMainMenu.Bands.Item("mnubandUtilities").Tools.Item(iLoop).visible == true) {
//					iVisibleCount = iVisibleCount + 1;
//				}
//			}
//		}

//		if (iVisibleCount == 0) {
//			abMainMenu.Tools("mnutoolUtilities").visible = false;
		//		}
		
		iVisibleCount = 0;
		if ($("#mnutoolDiary").css("display") != "none") {
			iVisibleCount = 1;
		}
		$("#mnubandUtilities li").hide();
		if (iVisibleCount > 0) {
			$("#mnutoolDiary").show();
		} else {
			$("#mnutoolUtilities").hide();
		}	
	}



	//NOT REQUIRED
	//	// Try to use the height property of the menu.
	//	// If this fails then the menu has failed to load properly, so we need to define
	//	// a temporary menu file path.
	//	try 
	//	{
	//		a = abMainMenu.Bands.Item("mnuMainMenu").height;
	//	}
	//	catch (e) 
	//	{
	//		// The menu has failed to load properly, so we need to define
	//		// a temporary menu file path.
	//		ASRIntranetFunctions.MessageBox("Please define the Temporary Menu File Path.");
	//		frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
	//		frmWorkArea.txtReloadMenu.value = 1;
	//		loadPage("pcConfiguration");
	//		return;
	//	}

	if (OpenHR.currentWorkPage() == "DEFAULT") {

		//window.parent.frames("workframe").hideMessage();
		//window.hideMessage();
		
		var iReset = 0;

		if ("TRUE" == "<%=ucase(session('WF_OutOfOffice'))%>") {
			var sMsg = "Workflow Out of Office is currently on.\nWould you like to turn it off";

			var iWF_RecordCount;
			if (isNaN(parseInt("<%=session('WF_RecordCount')%>"))) {
				iWF_RecordCount = 0;
			}
			else {
				iWF_RecordCount = parseInt("<%=session('WF_RecordCount')%>");
			}

			if (iWF_RecordCount > 1) {
				if (iWF_RecordCount == 2) {
					sMsg = sMsg.concat(" for both");
				}
				else {
					sMsg = sMsg.concat(" for all ");
					sMsg = sMsg.concat(iWF_RecordCount);
				}

				sMsg = sMsg.concat(" of your identified personnel records");
			}

			sMsg = sMsg.concat("?");

			//answer = ASRIntranetFunctions.MessageBox(sMsg, 4); // 4 = Yes/No
			var answer = confirm(sMsg);
			//if (answer == 6) {
			if (answer == true) {
				// Yes
				iReset = 1;
			}
		}

		//frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
		var frmWorkArea = document.getElementById("frmGoto");
	    try {
	        frmWorkArea.txtReset.value = iReset;
	    } catch(e) {
	    }
	    //TODO 
		//autoLoadPage("workflowPendingSteps", true);
	}
}


//function menu_abMainMenu_PreCustomizeMenu(pfCancel) {
//DON'T KEEP

//Called when user right-clicks menu.
//	// Do not let the user modify the layout.
//	ASRIntranetFunctions.MessageBox("The menu cannot be customized. Errors will occur if you attempt to customize it. Click anywhere in your browser to remove the dummy customisation menu."); 
//}

//function menu_abMainMenu_KeyDown(piKeyCode, piShift) {
//Triggered when users presses a key in a combo box or a textbox while the tool has the focus.  ie. locate record or search.
//TODO RIBBON FUNCTIONALITY.

//	var  iIndex;
//	var sCurrentWorkPage;
//	var sLocateValue;

//	iIndex = abMainMenu.ActiveBand.CurrentTool;
//	
//	if (abMainMenu.ActiveBand.Tools(iIndex).Name == "mnutoolLocateRecords") {
//		if (piKeyCode == 13) {
//			sCurrentWorkPage = currentWorkPage();
//			sLocateValue = abMainMenu.ActiveBand.Tools(iIndex).Text;

//			if (sCurrentWorkPage == "FIND") {
//				reloadFindPage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "LINKFIND") {
//				reloadLinkPage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "LOOKUPFIND") {
//				reloadLookupPage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
//				reloadTransferCoursePage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "TBBOOKCOURSEFIND") {
//				reloadBookCoursePage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") {
//				reloadTransferBookingPage("LOCATE", sLocateValue);
//			}
//			if (sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND") {
//				reloadAddFromWaitingListPage("LOCATE", sLocateValue);
//			}
//		}
//	}
//}

//function menu_abMainMenuComboSelChange(pTool) {

//TODO - toolbar functionality

//	var sCurrentWorkPage;
//	var sLocateValue;

//	if (pTool.Name == "mnutoolLocateRecordsLogic") {
//		sCurrentWorkPage = currentWorkPage();
//		sLocateValue = pTool.Text;

//		if (sCurrentWorkPage == "FIND") {
//			reloadFindPage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "LINKFIND") {
//			reloadLinkPage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "LOOKUPFIND") {
//			reloadLookupPage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
//			reloadTransferCoursePage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "TBBOOKCOURSEFIND") {
//			reloadBookCoursePage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") {
//			reloadTransferBookingPage("LOCATE", sLocateValue);
//		}
//		if (sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND") {
//			reloadAddFromWaitingListPage("LOCATE", sLocateValue);
//		}
//	}
//}

//function menu_abMainMenu_BandOpen(pBand) {
//DON'T KEEP - Don't think we need this any more.

//	// Refresh the opened menu band (if required). 
//	if (pBand.name == "mnubandDatabase") {
//		// Insert menu items for each of the tables that the user is permitted to see.
//		refreshDatabaseMenu();
//		refreshQuickEntryMenu();
//		refreshTableScreensMenu();
//	}
//}

//function menu_abMainMenu_PreSysMenu(pBand) {
//DON'T KEEP - NO NEED TO INITIALISE.
//	if (pBand.Name == "SysCustomize") {
//		pBand.Tools.RemoveAll();
//	}
//}

function menu_abMainMenu_Click(pTool) {
	menu_MenuClick(pTool);
}


function menu_MenuClick(sTool) {
	
    //ignore clicks from 'fixed links' which have no 'id'.
    if (!sTool) return false;
    //new ribbon buttons for utils - ignore click.
    if (sTool.substr(sTool.length - 4).toLowerCase() == "util") return false;
    
	// Perform the selected menu action.
	var lngRecordID;
	var lngTableID;
	var lngViewID;
	var lngOrderID;
	var lngScreenID;
	var sSubString;
	var sLineage;
	var lngParentRecordID;
	var lngParentTableID;
	var sCurrentWorkPage;
	var frmRefresh;
	var frmDataArea;
	var frmRecEditArea;
	var frmWorkArea;
	var frmFindArea;
	var frmData;
	var sToolName;
	var sToolNameKey;

	//added for non-IE compatibility
	var frmMenuInfo = document.getElementById("frmMenuInfo");


	sToolName = sTool;
	sCurrentWorkPage = OpenHR.currentWorkPage();
	//	
	//	frmRefresh = window.parent.frames("refreshframe").document.forms("frmRefresh");
	//	frmRefresh.submit();

	if (sToolName == "mnutoolLogoff") {
		menu_logoffIntranet();
		return;
	}


	if (sToolName == "mnutoolAboutHRPro") {
		menu_mnutoolAboutHRPro();
		return;
	}



	if (sToolName == "mnutoolExit") {
		menu_exitIntranet();
		return;
	}

	if (sToolName == "mnutoolDownloadControls") {
		menu_DownloadControls();		
		return;
	}	
			
	if (sToolName == "mnutoolNewRecord") {
	    menu_newRecord();
		return;
	}
		
	if (sToolName == "mnutoolCopyRecord") {
	    menu_copyRecord();
		return;
	}
		
	if (sToolName == "mnutoolSaveRecord") {
	    menu_saveChanges("", false, false);
		return;
	}
		
	if (sToolName == "mnutoolEditRecord") {
	    menu_editRecord();
		return;
	}
							
	if (sToolName == "mnutoolDeleteRecord") {
	    menu_deleteRecord();
		return;
	}

	if (sToolName == "mnutoolParentRecord") {
	    menu_loadParentRecord();
		return;
	}

	if (sToolName == "mnutoolBack") {
	    menu_loadBackPage();
		return;
	}

	if (sToolName == "mnutoolFirstRecord") {
	    menu_moveRecord("MOVEFIRST");
		return;
	}

	if (sToolName == "mnutoolPreviousRecord") {
	    menu_moveRecord("MOVEPREVIOUS");
		return;
	}

	if (sToolName == "mnutoolNextRecord") {
	    menu_moveRecord("MOVENEXT");
		return;
	}

	if (sToolName == "mnutoolLastRecord") {
	    menu_moveRecord("MOVELAST");
		return;
	}

	if ((sToolName == "mnutoolLocateRecordsCaption")  ||
		(sToolName == "mnutoolRecordPosition")) {
		// Do nothing
		return;
	}

	if (sToolName == "mnutoolFind") {
	    if (menu_saveChanges(sTool, true, false) != 2) { // 2 = vbCancel
			ShowWait("Loading find records. Please wait...");
			menu_disableMenu();
					
			menu_loadFindPage();
		}
		return;
	}

	if (sToolName == "mnutoolQuickFind") {
	    menu_loadQuickFind();
		return;
	}

	if (sToolName == "mnutoolOrder") {
	    menu_loadSelectOrderFilter("ORDER");
		return;
	}
				
	if (sToolName == "mnutoolFilter") {
	    menu_loadSelectOrderFilter("FILTER");
		return;
	}
				
	if (sToolName == "mnutoolClearFilter") {
	    menu_clearFilter();
		return;
	}
		
	if (sToolName == "mnutoolPrint") {
		// Print the browser display.
		// Get the data.asp to get the save the current record.
		OpenHR.getForm("workframe", "frmRecordEditForm");
		frmRecEditArea.ctlRecordEdit.printScreen();
		return;
	}
		
		if (sToolName == "mnutoolCrossTabs") {
		    if (menu_saveChanges("CROSSTABS", true, false) != 2) { // 2 = vbCancel
				menu_loadDefSelPage(1, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolCustomReports") {
		    if (menu_saveChanges("CUSTOMREPORTS", true, false) != 2) { // 2 = vbCancel
				menu_loadDefSelPage(2, 0, 0, true);
			}
			return;
		}
		
		if (sToolName == "mnutoolCalendarReports") {
		    if (menu_saveChanges("CALENDARREPORTS", true, false) != 2) { // 2 = vbCancel
				menu_loadDefSelPage(17, 0, 0, true);
			}
			return;
		}
		
		if (sToolName == "mnutoolMailMerge") {
		    if (menu_saveChanges("MAILMERGE", true, false) != 2) { // 2 = vbCancel
			menu_loadDefSelPage(9, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolWorkflow") {
		    if (menu_saveChanges("WORKFLOW", true, false) != 2) { // 2 = vbCancel
			menu_loadDefSelPage(25, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolWorkflowPendingSteps") {
		    if (menu_saveChanges("WORKFLOWPENDINGSTEPS", true, false) != 2) { // 2 = vbCancel
			    menu_autoLoadPage("workflowPendingSteps", false);
			}
			return;
		}
		
		if (sToolName == "mnutoolWorkflowOutOfOffice") {
		    if (menu_saveChanges("WORKFLOWOUTOFOFFICE", true, false) != 2) { // 2 = vbCancel
			    menu_WorkflowOutOfOffice();
			}
			return;
		}

		if (sToolName == "mnutoolCalculations") {
		    if (menu_saveChanges("CALCULATIONS", true, false) != 2) { // 2 = vbCancel
			menu_loadDefSelPage(12, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolFilters") {
		    if (menu_saveChanges("FILTERS", true, false) != 2) { // 2 = vbCancel
			menu_loadDefSelPage(11, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolPicklists") {
			if (menu_saveChanges("PICKLISTS", true, false) != 2) { // 2 = vbCancel
			menu_loadDefSelPage(10, 0, 0, true);
			}
			return;
		}

		if (sToolName == "mnutoolEventLog") {
		    if (menu_saveChanges("EVENTLOG", true, false) != 2) {
				menu_loadPage("eventLog");
			}
			return;
		}
		
		if (sToolName == "mnutoolCancelCourse") {
			if (OpenHR.messageBox("Are you sure you want to cancel this course?", 36,"OpenHR Intranet") == 6) { // 36 = vbQuestion + vbYesNo, 6 = vbYes
			    if (menu_saveChanges("CANCELCOURSE", true, false) != 2) { // 2 = vbCancel
			        menu_cancelCourse();
				}
			}
			return;
		}

		if (sToolName == "mnutoolBookCourse") {
		    menu_bookCourse();
			return;
		}

		if (sToolName == "mnutoolTransferBooking") {
		    menu_transferBooking();
			return;
		}

		if (sToolName == "mnutoolAddFromWaitingList") {
		    menu_addFromWaitingList();
			return;
		}

		if (sToolName == "mnutoolCancelBooking") {
		    menu_cancelBooking();
			return;
		}

		if (sToolName == "mnutoolBulkBooking") {
		    menu_bulkBooking();
			return;
		}

		if (sToolName == "mnutoolStdRpt_AbsenceCalendar") {
		    menu_LoadAbsenceCalendar();
			return;
		}
		
		// Calendar Reports  (from record menu)
		if (sToolName == "mnutoolCalendarReportsRec") {
		    menu_loadRecordDefSelPage(17, 0, 0, true);
			return;
		}

		// Mail Merge  (from record menu)
		if (sToolName == "mnutoolMailMergeRec") {
		    menu_loadRecordDefSelPage(9, 0, 0, true);
			return;
		}
		
		// Absence Breakdown (from reports menu)
		if (sToolName == "mnutoolStdRpt_AbsenceBreakdown") {
		    menu_LoadStandardReport("ABSENCEBREAKDOWN", "ALL");
			return;
		}

		// Bradford Factor (from reports menu)
		if (sToolName == "mnutoolStdRpt_BradfordFactor") {
		    menu_LoadStandardReport("BRADFORDFACTOR", "ALL");
			return;
		}

		// Individual Absence Breakdown (from record menu)
		if (sToolName == "mnutoolStdRpt_BreakdownREC") {
		    menu_LoadStandardReport("ABSENCEBREAKDOWN", "REC");
			return;
		}

		// Individual Bradford Factor (from record menu)
		if (sToolName == "mnutoolStdRpt_BradfordREC") {
		    menu_LoadStandardReport("BRADFORDFACTOR", "REC");
			return;
		}
		
		if (sToolName == "mnutoolVersionInfo") {
		    menu_displayVersionInfo();
			return;
		}
		

		if (menu_saveChanges(sToolName, true, false) != 2) { // 2 = vbCancel
			if (sToolName.substr(0, 7) == "mnutool") {
				
				//if selected item is an expandable menu item, toggle it instead of going to menu_loadPage.
				if ($("#" + sTool).is(".jstree-closed, .jstree-open")) {
					toggle_Leaf(sTool);
					return false;
				}

				//not an expandable menu item, so continue.
				menu_loadPage(sToolName.substr(7));
			}
			else {
				//frmData = window.parent.frames("dataframe").document.forms("frmData");
				frmData = OpenHR.getForm("dataframe", "frmData");
				sToolNameKey = sToolName.substr(0, 3);

				if ((sToolNameKey == "PT_") ||
								 (sToolNameKey == "PV_")) {
					// PT_ = primary table
					// PV_ = primary table view
					if (frmMenuInfo.txtPrimaryStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "TS_") {
					// TS_ = Table screen
					if (frmMenuInfo.txtLookupStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "QE_") {
					// QE_ = quick entry screen
					if (frmMenuInfo.txtQuickAccessStartMode.value == 3) {
						frmData.txtRecordDescription.value = "";
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				if (sToolNameKey == "HT_") {
					// HT_ = history table
					if (frmMenuInfo.txtHistoryStartMode.value == 3) {
						// NB. Don't clear the record description, as we'll
						// use the existing recEdit record description
						// value for the history find window.
						menu_loadFindPageFirst(sToolName);
					}
					else {
						menu_loadRecordEditPage(sToolName);
					}

					return;
				}

				//Default to toggling this leaf (expand/contract)
				toggle_Leaf(sTool);
				
				//OpenHR.messageBox("Unrecognised menu option '" + sToolName + "'.", 0, "OpenHR Intranet"); // 0 = vbOKOnly
			}
		}
	}

function toggle_Leaf(sTool) {
	//is this clicked item an expandable leaf? If so, toggle it...
	try {
		var jsTreeID = ($("#" + sTool).parent().parent().attr("id"));
		$("#" + jsTreeID).jstree("toggle_node", "#" + sTool);
	} catch(e) {}
}

function menu_ShowWait(sMessage) {

//	window.parent.parent.frames("waitframe").SetDisplayText(sMessage);

//	var fs = window.parent.parent.document.all.item("mainframeset")
//	if (fs) {
//		fs.rows = "0, 0, 0, 0, 0, *";
//		}
//	//ASRIntranetFunctions.ShowPopup(sMessage);

}


function menu_CloseWait() {

//	var fs = window.parent.parent.document.all.item("mainframeset")
//	if (fs) {
//		fs.rows = "0, *, 0, 0, 0, 0"
//		}
//		
//	return;

}

function menu_refreshMenu() {

	// Refresh the menu.
	var lngRecordID;
	var sCaption;
	var fCancelCourseVisible;
	var fCancelCourseEnabled;
	var fBookCourseVisible;
	var fBookCourseEnabled;
	var fTransferBookingVisible;
	var fTransferBookingEnabled;
	var fAddFromWaitingListVisible;
	var fAddFromWaitingListEnabled;
	var fCancelBookingVisible;
	var fCancelBookingEnabled;
	var fBulkBookingVisible;
	var fBulkBookingEnabled;
	var lngMenuHeight;
	var sCurrentWorkPage;
	var frmRecEdit;
	var frmFind;
	var frmRefresh;
	var frmOption;
	var sTemp;
	var iStartPosition;
	var iEndPosition;
	var dtDummyDate = new Date(1899, 11, 30);
	var sRecEditDate;
	var sDummyDate;
	//Get the frmMenuInfo object for implicit use in this function (non-ie)
	var frmMenuInfo = document.getElementById("frmMenuInfo");
    
	// Standard reports
	var fStdRptAbsenceCalendarEnabled;
	var fStdRptAbsenceBreakdownEnabled;
	var fStdRptBradfordFactorEnabled;
	var fStdRptTurnoverEnabled;
	var fStdRptStabilityEnabled;
	var fStdRptAbsenceCalendarVisible;
	var fStdRptAbsenceBreakdownVisible;
	var fStdRptBradfordFactorVisible;
	var fStdRptTurnoverVisible;
	var fStdRptStabilityVisible;
	var fCanSeeLookupTableMenu;

	var fCalendarReportsVisible = false;
	var fCalendarReportsEnabled = false;
	var fCanRunCalendarReports = false;
	var fCanRunMailMerge = false;

	fCanRunCalendarReports = false;
	if (window.txtSysPerm_CALENDARREPORTS_RUN != null) {
		if ((window.txtSysPerm_CALENDARREPORTS_RUN.value == 1) &&
			(frmMenuInfo.txtUserType.value == 0)) {
			fCanRunCalendarReports = true;
			fCalendarReportsEnabled = false;
		}
	}

	var fMailMergeVisible = false;
	var fMailMergeEnabled = false;
	var fMailMergeReports = false;
	var fCanRunAbsenceCalendar = false;
	var fCanRunAbsenceBreakdown = false;
	var fCanRunBradfordFactor = false;

	fCanRunMailMerge = false;
	if (window.txtSysPerm_MAILMERGE_RUN != null) {
		if ((window.txtSysPerm_MAILMERGE_RUN.value == 1) &&
			(frmMenuInfo.txtUserType.value == 0)) {
			fCanRunMailMerge = true;
			fMailMergeEnabled = false;
		}
	}

	fCancelCourseVisible = false;
	fCancelCourseEnabled = false;
	fBookCourseVisible = false;
	fBookCourseEnabled = false;
	fTransferBookingVisible = false;
	fTransferBookingEnabled = false;
	fAddFromWaitingListVisible = false;
	fAddFromWaitingListEnabled = false;
	fCancelBookingVisible = false;
	fCancelBookingEnabled = false;
	fBulkBookingVisible = false;
	fBulkBookingEnabled = false;

	fStdRptAbsenceCalendarEnabled = false;
	fStdRptAbsenceBreakdownEnabled = false;
	fStdRptBradfordFactorEnabled = false;
	fStdRptTurnoverEnabled = false;
	fStdRptStabilityEnabled = false;
	fStdRptAbsenceCalendarVisible = false;
	fStdRptAbsenceBreakdownVisible = false;
	fStdRptBradfordFactorVisible = false;
	fStdRptTurnoverVisible = false;
	fStdRptStabilityVisible = false;

	fCanRunAbsenceCalendar = false;
	if (window.txtSysPerm_STANDARDREPORTS_RUN_AC != null) {
		if ((window.txtSysPerm_STANDARDREPORTS_RUN_AC.value == 1) &&
			(frmMenuInfo.txtUserType.value == 0)) {
			fCanRunAbsenceCalendar = true;
		}
	}
	fCanRunAbsenceBreakdown = false;
	if (window.txtSysPerm_STANDARDREPORTS_RUN_AB != null) {
		if ((window.txtSysPerm_STANDARDREPORTS_RUN_AB.value == 1) &&
			(frmMenuInfo.txtUserType.value == 0)) {
			fCanRunAbsenceBreakdown = true;
		}
	}
	fCanRunBradfordFactor = false;
	if (window.txtSysPerm_STANDARDREPORTS_RUN_BF != null) {
		if ((window.txtSysPerm_STANDARDREPORTS_RUN_BF.value == 1) &&
			(frmMenuInfo.txtUserType.value == 0)) {
			fCanRunBradfordFactor = true;
		}
	}
	
	//menu is always available and populated.
	//if (abMainMenu.Bands.Count() > 0) {
	menu_enableMenu();

    //hide the utilities menu block.
    $("#mnuSectionUtilities").hide();
	
	sCurrentWorkPage = OpenHR.currentWorkPage();
	
	if (sCurrentWorkPage == "RECORDEDIT") {
		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
		var frmData = OpenHR.getForm("dataframe", "frmData");

		//abMainMenu.Bands("mnubandMainToolBar").visible = true;
		menu_setVisibleMenuItem("mnutoolRecord", true);

		// Enable the record editing options as necessary.
		menu_setVisibleMenuItem("mnutoolNewRecord", true);
        
		var fMnutoolNewRecord = ((frmRecEdit.txtRecEditInsertGranted.value.toUpperCase() == "TRUE") &&
				((frmMenuInfo.txtUserType.value == 0) ||
					(frmRecEdit.txtCurrentParentTableID.value > 0) ||
					(frmRecEdit.txtQuickEntry.value.toUpperCase() == "TRUE")));
	    
		menu_toolbarEnableItem("mnutoolNewRecord", fMnutoolNewRecord);
		menu_setVisibleMenuItem("mnutoolCopyRecord", true);
		menu_toolbarEnableItem("mnutoolCopyRecord", (fMnutoolNewRecord && (frmRecEdit.txtCurrentRecordID.value > 0)));
		menu_setVisibleMenuItem("mnutoolEditRecord", false);
		menu_setVisibleMenuItem("mnutoolSaveRecord", true);
		//TODO: menu_enableMenuItem("mnutoolSaveRecord", (frmRecEdit.ctlRecordEdit.changed == true));
		menu_toolbarEnableItem("mnutoolSaveRecord", false);
		menu_setVisibleMenuItem("mnutoolDeleteRecord", true);
		menu_toolbarEnableItem("mnutoolDeleteRecord", ((frmRecEdit.txtRecEditDeleteGranted.value.toUpperCase() == "TRUE") &&
				(frmRecEdit.txtCurrentRecordID.value > 0) &&
				((frmMenuInfo.txtUserType.value == 0) ||
					(frmRecEdit.txtCurrentParentTableID.value > 0) ||
					(frmRecEdit.txtQuickEntry.value.toUpperCase() == "TRUE"))));
		menu_setVisibleMenuItem("mnutoolParentRecord", true);
		menu_toolbarEnableItem("mnutoolParentRecord", (frmRecEdit.txtCurrentParentTableID.value > 0));
		menu_setVisibleMenuItem("mnutoolBack", false);
		menu_toolbarEnableItem("mnutoolBack", false);

		menu_setVisibleMenuItem("mnutoolFirstRecord", true);
		menu_toolbarEnableItem("mnutoolFirstRecord", (parseInt(frmData.txtRecordPosition.value, 10) > 1));
		menu_setVisibleMenuItem("mnutoolPreviousRecord", true);
		menu_toolbarEnableItem("mnutoolPreviousRecord", (parseInt(frmData.txtRecordPosition.value, 10) > 1));
		menu_setVisibleMenuItem("mnutoolNextRecord", true);
		menu_toolbarEnableItem("mnutoolNextRecord", (parseInt(frmData.txtRecordPosition.value, 10) < parseInt(frmData.txtRecordCount.value, 10)));
		menu_setVisibleMenuItem("mnutoolLastRecord", true);
		menu_toolbarEnableItem("mnutoolLastRecord", (parseInt(frmData.txtRecordPosition.value, 10) < parseInt(frmData.txtRecordCount.value, 10)));

		menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", false);
		menu_setVisibleMenuItem("mnutoolLocateRecords", false);
		menu_setVisibleMenuItem("mnutoolLocateRecordsLogic", false);
		menu_setVisibletoolbarGroup("mnutoolLocateRecords", false);	//hide the group too.

		menu_setVisibleMenuItem("mnutoolFind", true);

		menu_setVisibleMenuItem("mnutoolQuickFind", true);
		menu_toolbarEnableItem("mnutoolQuickFind", ((frmRecEdit.txtLineage.value.length == 0) &&
				((frmMenuInfo.txtUserType.value == 0) ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
	            (frmRecEdit.txtCurrentParentTableID.value > 0))));
		menu_setVisibletoolbarGroup("mnutoolFind", true);

		//abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolOrder").beginGroup = false;
		menu_setVisibleMenuItem("mnutoolOrder", true);
		menu_toolbarEnableItem("mnutoolOrder", ((frmMenuInfo.txtUserType.value == 0) ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
				(frmRecEdit.txtCurrentParentTableID.value > 0)));
		menu_setVisibleMenuItem("mnutoolFilter", true);
		menu_toolbarEnableItem("mnutoolFilter", ((frmMenuInfo.txtUserType.value == 0) ||
				(frmRecEdit.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value) ||
				(frmRecEdit.txtCurrentParentTableID.value > 0)));
		menu_setVisibleMenuItem("mnutoolClearFilter", true);
		menu_toolbarEnableItem("mnutoolClearFilter", (frmRecEdit.txtRecEditFilterDef.value.length > 0));
		menu_setVisibleMenuItem("mnutoolPrint", true);

		// Standard reports (record menu)
		fStdRptAbsenceCalendarVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				(frmMenuInfo.txtUserType.value == 0) &&
				(txtAbsenceEnabled.value == 1));
		fStdRptAbsenceBreakdownVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				(frmMenuInfo.txtUserType.value == 0) &&
				(txtAbsenceEnabled.value == 1));
		fStdRptBradfordFactorVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) &&
				(frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
				(frmMenuInfo.txtUserType.value == 0) &&
				(txtAbsenceEnabled.value == 1));

		// Calendar Reports (Record Menu)
		//fCalendarReportsVisible = ((frmRecEdit.txtQuickEntry.value.toUpperCase() != "TRUE"));
		fCalendarReportsVisible = true;
		fCalendarReportsEnabled = ((fCanRunCalendarReports == true) &&
				(fCalendarReportsVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		//Mail Merge (Record Menu)
		//fMailMergeVisible = ((frmRecEdit.txtQuickEntry.value.toUpperCase() != "TRUE"));
		fMailMergeVisible = true;
		fMailMergeEnabled = ((fCanRunMailMerge == true) &&
				(fMailMergeVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		fStdRptAbsenceCalendarEnabled = ((fCanRunAbsenceCalendar == true) &&
				(fStdRptAbsenceCalendarVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));
		fStdRptAbsenceBreakdownEnabled = ((fCanRunAbsenceBreakdown == true) &&
				(fStdRptAbsenceBreakdownVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));
		fStdRptBradfordFactorEnabled = ((fCanRunBradfordFactor == true) &&
				(fStdRptBradfordFactorVisible) &&
				(frmRecEdit.txtCurrentRecordID.value > 0));

		if (frmRecEdit.txtCurrentRecordID.value > 0) {
			sCaption = "Record " +
					frmData.txtRecordPosition.value +
					" of " +
					frmData.txtRecordCount.value;

			if (frmRecEdit.txtRecEditFilterDef.value.length > 0) {
				sCaption = sCaption + " (filtered)";
			}
		}
		else {
			sCaption = "New Record";
		}

		if (frmData.txtRecordDescription.value.length > 0) {
			sCaption = sCaption + " : " + frmData.txtRecordDescription.value;
		}

		menu_setVisibleMenuItem("mnutoolRecordPosition", true);
		menu_SetmnutoolRecordPositionCaption(sCaption);

		menu_setVisibleMenuItem("mnutoolHistory", true);
		$("#mnutoolHistory").click();

        //dynamically created function, found in menu.ascx...
		menu_refreshHistoryScreensMenu(frmRecEdit.txtCurrentScreenID.value);

		// Disable the history menu for new records.
		if (frmRecEdit.txtCurrentRecordID.value <= 0) {
			menu_enableMenuItem("mnutoolHistory", false);
		}

        //TODO: NPG; 
		//sRecEditDate = String(frmRecEdit.ctlRecordEdit.TBCourseCancelDateValue());
		//sRecEditDate = sRecEditDate.toUpperCase();
		//sDummyDate = String(dtDummyDate.getVarDate());
		//sDummyDate = sDummyDate.toUpperCase();

		//fCancelCourseVisible = ((frmRecEdit.txtCurrentTableID.value == frmMenuInfo.txtTB_CourseTableID.value) &&
		//		(frmMenuInfo.txtUserType.value == 0));
		//fCancelCourseEnabled = ((frmRecEdit.txtCurrentRecordID.value > 0) &&
		//			(frmMenuInfo.txtUserType.value == 0) &&
		//			(frmMenuInfo.txtTB_CourseCancelDateColumnID.value > 0) &&
		//			(frmMenuInfo.txtTB_TBTableID.value > 0) &&
		//			(frmMenuInfo.txtTB_TBTableSelect.value.toUpperCase() == "TRUE") &&
		//			(frmMenuInfo.txtTB_TBStatusColumnID.value > 0) &&
		//			(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
		//			((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
		//				(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")) &&
		//			(sRecEditDate == sDummyDate));

	}
	else {
		if (sCurrentWorkPage == "FIND") {						
			//frmFind = window.parent.frames("workframe").document.forms("frmFindForm");

			frmFind = document.getElementById("frmFindForm");	

			lngRecordID = selectedRecordID(); //should be in scope at runtime.

			if (lngRecordID == "" | lngRecordID == null) {
				lngRecordID = 0;
			}

			//toolbar always visible now
			//abMainMenu.Bands("mnubandMainToolBar").visible = true;

			//mnutoolRecord is the context menu record item, which is currently excluded from v8.
			//abMainMenu.Tools("mnutoolRecord").visible = true;

			//New functionality: switch ribbon tab to required item.
			$("#toolbarRecord").show();
			$("#toolbarRecord").click();			

			// Enable the record editing options as necessary.
			menu_setVisibleMenuItem("mnutoolNewRecord", true);
			
			menu_toolbarEnableItem("mnutoolNewRecord", ((frmFind.txtInsertGranted.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtUserType.value == 0) ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) ||
					(frmFind.txtQuickEntry.value.toUpperCase() == "TRUE"))));
			menu_setVisibleMenuItem("mnutoolCopyRecord",true);
			menu_toolbarEnableItem("mnutoolCopyRecord", true);
			menu_setVisibleMenuItem("mnutoolEditRecord", true);
			menu_toolbarEnableItem("mnutoolEditRecord", (lngRecordID > 0));
			menu_setVisibleMenuItem("mnutoolSaveRecord", false);
			menu_setVisibleMenuItem("mnutoolDeleteRecord", true);
			menu_toolbarEnableItem("mnutoolDeleteRecord", ((frmFind.txtDeleteGranted.value.toUpperCase() == "TRUE") &&
					(lngRecordID > 0) &&
					((frmMenuInfo.txtUserType.value == 0) ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value == frmMenuInfo.txtPersonnel_EmpTableID.value) ||
					(frmFind.txtQuickEntry.value.toUpperCase() == "TRUE"))));
			menu_setVisibleMenuItem("mnutoolParentRecord", true);
			menu_toolbarEnableItem("mnutoolParentRecord", (frmFind.txtCurrentParentTableID.value > 0));
			menu_setVisibleMenuItem("mnutoolBack", true);
			menu_toolbarEnableItem("mnutoolBack", (parseInt(frmFind.txtCurrentRecordID.value) > 0));
			
			menu_setVisibleMenuItem("mnutoolFirstRecord", true);
			menu_toolbarEnableItem("mnutoolFirstRecord", (frmFind.txtIsFirstPage.value.toUpperCase() == "FALSE"));
			menu_setVisibleMenuItem("mnutoolPreviousRecord", true);
			menu_toolbarEnableItem("mnutoolPreviousRecord", (frmFind.txtIsFirstPage.value.toUpperCase() == "FALSE"));
			menu_setVisibleMenuItem("mnutoolNextRecord", true);
			menu_toolbarEnableItem("mnutoolNextRecord", (frmFind.txtIsLastPage.value.toUpperCase() == "FALSE"));
			menu_setVisibleMenuItem("mnutoolLastRecord", true);
			menu_toolbarEnableItem("mnutoolLastRecord", (frmFind.txtIsLastPage.value.toUpperCase() == "FALSE"));

			//TODO menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", true);
			//TODO menu_setVisibleMenuItem("mnutoolLocateRecords", (parseInt(frmFind.txtFirstColumnType.value) != -7));
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.Clear();
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("True");
			//TODO abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("False");
			//TODO menu_setVisibleMenuItem("mnutoolLocateRecordsLogic", (parseInt(frmFind.txtFirstColumnType.value) == -7));
			//TODO
//			menu_toolbarEnableItem("mnutoolLocateRecordsCaption", ((frmMenuInfo.txtUserType.value == 0) ||
//					(frmFind.txtCurrentParentTableID.value > 0) ||
//					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
//			menu_toolbarEnableItem("mnutoolLocateRecords", ((frmMenuInfo.txtUserType.value == 0) ||
//					(frmFind.txtCurrentParentTableID.value > 0) ||
//					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
//			menu_toolbarEnableItem("mnutoolLocateRecordsLogic", ((frmMenuInfo.txtUserType.value == 0) ||
//					(frmFind.txtCurrentParentTableID.value > 0) ||
//					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));

			menu_setVisibleMenuItem("mnutoolFind", false);

			//New functionality: OK, so we've hidden both the find and quickfind - need to hide the group placeholder too.
			menu_setVisibletoolbarGroup("mnutoolFind", false);

			// Hide the QuickFind, Order and Filter options until they're developed.
			menu_setVisibleMenuItem("mnutoolQuickFind",  false);
			// Not required - hard coded.   abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolOrder").beginGroup = true;
			menu_setVisibleMenuItem("mnutoolOrder", true);
			menu_toolbarEnableItem("mnutoolOrder", ((frmMenuInfo.txtUserType.value == 0) ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
			menu_setVisibleMenuItem("mnutoolFilter", true);
			menu_toolbarEnableItem("mnutoolFilter", ((frmMenuInfo.txtUserType.value == 0) ||
					(frmFind.txtCurrentParentTableID.value > 0) ||
					(frmFind.txtCurrentTableID.value != frmMenuInfo.txtPersonnel_EmpTableID.value)));
			menu_setVisibleMenuItem("mnutoolClearFilter", true);
			menu_toolbarEnableItem("mnutoolClearFilter", (frmFind.txtFilterDef.value.length > 0));
			menu_setVisibleMenuItem("mnutoolPrint", false);

			//frmData = window.parent.frames("dataframe").document.forms("frmData");
			frmData = document.getElementById("frmData");
			//TODO are we setting this?
		    
			if (frmFind.txtRecordCount.value > 0) {
				iStartPosition = parseInt(frmFind.txtFirstRecPos.value);
				iEndPosition = iStartPosition - 1 + parseInt(frmFind.txtRecordCount.value);

				sCaption = "Records " +
						iStartPosition +
						" to " +
						iEndPosition +
						" of " +
						frmFind.txtTotalRecordCount.value;
			}
			else {
				sCaption = "No Records";
			}

			if (frmFind.txtFilterDef.value.length > 0) {
				sCaption = sCaption + " (filtered)";
			}

			if ($("#frmData").length > 0) {
				if (frmData.txtRecordDescription.value.length > 0) {
					sCaption = sCaption + " : " + frmData.txtRecordDescription.value;
				}
			}
			menu_setVisibleMenuItem("mnutoolRecordPosition", true);
			menu_SetmnutoolRecordPositionCaption(sCaption);

			menu_setVisibleMenuItem("mnutoolHistory", false);
		    $("#mnutoolDatabase").click();
		    
            

			fBookCourseVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_WaitListTableID.value) &&
					(frmMenuInfo.txtUserType.value == 0));

			fBookCourseEnabled = ((lngRecordID > 0) &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListCourseTitleColumnSelect.value.toUpperCase() == "TRUE"));
			fTransferBookingVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_TBTableID.value) &&
					(frmMenuInfo.txtUserType.value == 0) &&
					((frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_EmpTableID.value) ||
					(frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_CourseTableID.value)));
			fTransferBookingEnabled = ((lngRecordID > 0) &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBTableUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
					(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")));
			fAddFromWaitingListVisible = ((frmFind.txtCurrentTableID.value == frmMenuInfo.txtTB_TBTableID.value) &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmFind.txtCurrentParentTableID.value == frmMenuInfo.txtTB_CourseTableID.value));
			fAddFromWaitingListEnabled = ((frmFind.txtCancelDateColumn.value.toUpperCase() == "FALSE") &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_WaitListCourseTitleColumnSelect.value.toUpperCase() == "TRUE"));
			fCancelBookingVisible = fTransferBookingVisible;
			fCancelBookingEnabled = ((lngRecordID > 0) &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmMenuInfo.txtTB_TBTableUpdate.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE") &&
					((frmMenuInfo.txtTB_TBCancelDateColumnID.value == 0) ||
					(frmMenuInfo.txtTB_TBCancelDateColumnUpdate.value.toUpperCase() == "TRUE")));
			fBulkBookingVisible = fAddFromWaitingListVisible;
			fBulkBookingEnabled = ((frmFind.txtCancelDateColumn.value.toUpperCase() == "FALSE") &&
					(frmMenuInfo.txtTB_TBTableInsert.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtUserType.value == 0) &&
					(frmMenuInfo.txtTB_WaitListTableDelete.value.toUpperCase() == "TRUE") &&
					(frmMenuInfo.txtTB_TBStatusColumnUpdate.value.toUpperCase() == "TRUE"));
		}
		else {
			if ((sCurrentWorkPage == "LINKFIND") ||
					(sCurrentWorkPage == "LOOKUPFIND") ||
					(sCurrentWorkPage == "TBTRANSFERCOURSEFIND") ||
					(sCurrentWorkPage == "TBBOOKCOURSEFIND") ||
					(sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") ||
					(sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND")) {

				//frmOption = window.parent.frames("optiondataframe").document.forms("frmOptionData");
				frmOption = document.getElementById("frmOptionData");

				menu_setVisibleMenuItem("mnubandMainToolBar", true);
				menu_setVisibleMenuItem("mnutoolRecord", true);
				return;
				// Enable the record editing options as necessary.
				abMainMenu.Tools("mnutoolNewRecord").visible = false;
				abMainMenu.Tools("mnutoolNewRecord").enabled = false;
				abMainMenu.Tools("mnutoolCopyRecord").visible = false;
				abMainMenu.Tools("mnutoolCopyRecord").enabled = false;
				abMainMenu.Tools("mnutoolEditRecord").visible = false;
				abMainMenu.Tools("mnutoolEditRecord").enabled = false;
				abMainMenu.Tools("mnutoolSaveRecord").visible = false;
				abMainMenu.Tools("mnutoolDeleteRecord").visible = false;
				abMainMenu.Tools("mnutoolDeleteRecord").enabled = false;
				abMainMenu.Tools("mnutoolParentRecord").visible = false;
				abMainMenu.Tools("mnutoolParentRecord").enabled = false;
				abMainMenu.Tools("mnutoolBack").visible = false;
				abMainMenu.Tools("mnutoolBack").enabled = false;

				abMainMenu.Tools("mnutoolFirstRecord").visible = true;
				abMainMenu.Tools("mnutoolFirstRecord").enabled = (frmOption.txtIsFirstPage.value.toUpperCase() == "FALSE");
				abMainMenu.Tools("mnutoolPreviousRecord").visible = true;
				abMainMenu.Tools("mnutoolPreviousRecord").enabled = (frmOption.txtIsFirstPage.value.toUpperCase() == "FALSE");
				abMainMenu.Tools("mnutoolNextRecord").visible = true;
				abMainMenu.Tools("mnutoolNextRecord").enabled = (frmOption.txtIsLastPage.value.toUpperCase() == "FALSE");
				abMainMenu.Tools("mnutoolLastRecord").visible = true;
				abMainMenu.Tools("mnutoolLastRecord").enabled = (frmOption.txtIsLastPage.value.toUpperCase() == "FALSE");

				abMainMenu.Tools("mnutoolLocateRecordsCaption").visible = true;
				abMainMenu.Tools("mnutoolLocateRecords").visible = (parseInt(frmOption.txtFirstColumnType.value) != -7);
				abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.Clear();
				abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("True");
				abMainMenu.Tools("mnutoolLocateRecordsLogic").CBList.AddItem("False");
				abMainMenu.Tools("mnutoolLocateRecordsLogic").visible = (parseInt(frmOption.txtFirstColumnType.value) == -7);

				abMainMenu.Tools("mnutoolFind").visible = false;

				// Hide the QuickFind, Order and Filter options until they're developed.
				abMainMenu.Tools("mnutoolQuickFind").visible = false;
				abMainMenu.Tools("mnutoolOrder").visible = false;
				abMainMenu.Tools("mnutoolFilter").visible = false;
				abMainMenu.Tools("mnutoolClearFilter").visible = false;
				abMainMenu.Tools("mnutoolClearFilter").enabled = false;
				abMainMenu.Tools("mnutoolPrint").visible = false;

				if (frmOption.txtRecordCount.value > 0) {
					iStartPosition = parseInt(frmOption.txtFirstRecPos.value);
					iEndPosition = iStartPosition - 1 + parseInt(frmOption.txtRecordCount.value);
					sCaption = "Records " +
							iStartPosition +
							" to " +
							iEndPosition +
							" of " +
							frmOption.txtTotalRecordCount.value;
				}
				else {
					sCaption = "No Records";
				}

				abMainMenu.Tools("mnutoolRecordPosition").visible = true;
				abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolRecordPosition").caption = sCaption;

				abMainMenu.Tools("mnutoolHistory").visible = false;
			}
			else {
				if (sCurrentWorkPage == "UTIL_DEF_PICKLIST") {

				    return;

					abMainMenu.Bands("mnubandMainToolBar").visible = true;
					abMainMenu.Tools("mnutoolRecord").visible = false;

					abMainMenu.Tools("mnutoolNewRecord").visible = false;
					abMainMenu.Tools("mnutoolCopyRecord").visible = false;
					abMainMenu.Tools("mnutoolEditRecord").visible = false;
					abMainMenu.Tools("mnutoolSaveRecord").visible = false;
					abMainMenu.Tools("mnutoolDeleteRecord").visible = false;
					abMainMenu.Tools("mnutoolParentRecord").visible = false;
					abMainMenu.Tools("mnutoolBack").visible = false;
					abMainMenu.Tools("mnutoolFirstRecord").visible = false;
					abMainMenu.Tools("mnutoolPreviousRecord").visible = false;
					abMainMenu.Tools("mnutoolNextRecord").visible = false;
					abMainMenu.Tools("mnutoolLastRecord").visible = false;

					abMainMenu.Tools("mnutoolLocateRecordsCaption").visible = false;
					abMainMenu.Tools("mnutoolLocateRecords").visible = false;
					abMainMenu.Tools("mnutoolLocateRecordsLogic").visible = false;

					abMainMenu.Tools("mnutoolFind").visible = false;

					abMainMenu.Tools("mnutoolQuickFind").visible = false;
					abMainMenu.Tools("mnutoolOrder").visible = false;
					abMainMenu.Tools("mnutoolFilter").visible = false;
					abMainMenu.Tools("mnutoolClearFilter").visible = false;
					abMainMenu.Tools("mnutoolPrint").visible = false;

					frmWork = window.parent.frames("workframe").document.forms("frmDefinition");
					if (frmWork.ssOleDBGrid.Rows == 0) {
						sCaption = "No Records";
					}
					else {
						if (frmWork.ssOleDBGrid.Rows == 1) {
							sCaption = "1 Record";
						}
						else {
							sCaption = frmWork.ssOleDBGrid.Rows + " Records";
						}
					}

					abMainMenu.Tools("mnutoolRecordPosition").visible = true;
					abMainMenu.Bands("mnubandMainToolBar").tools("mnutoolRecordPosition").caption = sCaption;

					abMainMenu.Tools("mnutoolHistory").visible = false;

				}
				else {
					//mnubandMainToolBar = ribbon.
					//abMainMenu.Bands("mnubandMainToolBar").visible = false;

					//abMainMenu.Tools("mnutoolRecord").visible = false;
					$("#mnutoolRecord").hide();

					//abMainMenu.Tools("mnutoolHistory").visible = false;
					$("#mnutoolHistory").hide();
				}
			}
		}
	}

    // enable/disable the tools required for the event log
	if ((sCurrentWorkPage == "EVENTLOG")) {

	    //New functionality: switch ribbon tab to required item.
	    $("#toolbarRecord").show();
	    $("#toolbarRecord").click();


	    var frmLog = document.getElementById("frmLog");

		menu_setVisibleMenuItem("mnubandMainToolBar", true);
		menu_setVisibleMenuItem("mnutoolRecord", false);

		menu_setVisibleMenuItem("mnutoolNewRecord", false);
		menu_setVisibleMenuItem("mnutoolCopyRecord", false);
		menu_setVisibleMenuItem("mnutoolEditRecord", false);
		menu_setVisibleMenuItem("mnutoolSaveRecord", false);
		menu_setVisibleMenuItem("mnutoolDeleteRecord", false);
		menu_setVisibleMenuItem("mnutoolParentRecord", false);
		menu_setVisibleMenuItem("mnutoolBack", false);

		if (frmLog.txtELLoaded.value == 1) {
		    frmData = OpenHR.getForm("dataframe", "frmData");
			var bLastPage = frmData.txtELIsLastPage.value;
			var bFirstPage = frmData.txtELIsFirstPage.value;

			menu_enableMenuItem("mnutoolFirstRecord", bFirstPage.toUpperCase() == "FALSE");
			menu_enableMenuItem("mnutoolPreviousRecord", bFirstPage.toUpperCase() == "FALSE");
			menu_enableMenuItem("mnutoolNextRecord", bLastPage.toUpperCase() == "FALSE");
			menu_enableMenuItem("mnutoolLastRecord", bLastPage.toUpperCase() == "FALSE");
		}

		menu_setVisibleMenuItem("mnutoolFirstRecord", true);
		menu_setVisibleMenuItem("mnutoolPreviousRecord", true);
		menu_setVisibleMenuItem("mnutoolNextRecord", true);
		menu_setVisibleMenuItem("mnutoolLastRecord", true);

		menu_setVisibleMenuItem("mnutoolRecordPosition", true);

		menu_setVisibleMenuItem("mnutoolLocateRecordsCaption", false);
		menu_setVisibleMenuItem("mnutoolLocateRecords", false);
		menu_setVisibleMenuItem("mnutoolLocateRecordsLogic", false);
		menu_setVisibleMenuItem("mnutoolFind", false);
		menu_setVisibleMenuItem("mnutoolQuickFind", false);
		menu_setVisibleMenuItem("mnutoolOrder", false);
		menu_setVisibleMenuItem("mnutoolFilter", false);
		menu_setVisibleMenuItem("mnutoolClearFilter", false);
		menu_setVisibleMenuItem("mnutoolPrint", false);
	}

	//if (txtSysPerm_INTRANET_NEW_USER != null) {
	if ($("#txtSysPerm_INTRANET_NEW_USER").length) {
		if ($("#txtSysPerm_INTRANET_NEW_USER").val() == 1) {
			//abMainMenu.Tools("mnutoolNewUser").enabled = (txtNewUserGranted.value == "True");				
			menu_enableMenuItem("mnutoolNewUser", $("#txtNewUserGranted").val());
		}
		else {
			//abMainMenu.Tools("mnutoolNewUser").enabled = false;				
			menu_enableMenuItem("mnutoolNewUser", false);
		}
	}
	else {
		//abMainMenu.Tools("mnutoolNewUser").enabled = false;
		menu_enableMenu("#mnutoolNewUser", false);
	}

	//if (txtSysPerm_CONFIGURATION_USER != null) {
	if ($("#txtSysPerm_CONFIGURATION_USER").length) {
		if ($("#txtSysPerm_CONFIGURATION_USER").val() == 1) {
			//abMainMenu.Tools("mnutoolConfiguration").enabled = true;
			menu_enableMenuItem("mnutoolConfiguration", true);
		}
		else {
			//abMainMenu.Tools("mnutoolConfiguration").enabled = false;
			menu_enableMenuItem("mnutoolConfiguration", false);
		}
	}
	else {
		//abMainMenu.Tools("mnutoolConfiguration").enabled = false;
		menu_enableMenuItem("mnutoolConfiguration", false);
	}

	//TODO	
	//<%
	//	if session("WinAuth") then
	//%>	
	//		abMainMenu.Tools("mnutoolPasswordChange").enabled = false;
	//<%
	//	end if
	//%>

	
			menu_setVisibleMenuItem("mnutoolCancelCourse", fCancelCourseVisible);
			menu_toolbarEnableItem("mnutoolCancelCourse", fCancelCourseEnabled);
			menu_setVisibleMenuItem("mnutoolBookCourse", fBookCourseVisible);
			menu_toolbarEnableItem("mnutoolBookCourse", fBookCourseEnabled);
			menu_setVisibleMenuItem("mnutoolTransferBooking", fTransferBookingVisible);
			menu_toolbarEnableItem("mnutoolTransferBooking", fTransferBookingEnabled);
			menu_setVisibleMenuItem("mnutoolAddFromWaitingList", fAddFromWaitingListVisible);
			menu_toolbarEnableItem("mnutoolAddFromWaitingList", fAddFromWaitingListEnabled);
			menu_setVisibleMenuItem("mnutoolCancelBooking", fCancelBookingVisible);
			menu_toolbarEnableItem("mnutoolCancelBooking", fCancelBookingEnabled);
			menu_setVisibleMenuItem("mnutoolBulkBooking", fBulkBookingVisible);
			menu_toolbarEnableItem("mnutoolBulkBooking", fBulkBookingEnabled);

			//new functionality
			//if all these are false, then hide the Training Booking group.			
			menu_setVisibletoolbarGroup("mnutoolBulkBooking", ((fBulkBookingVisible) || 
																				(fAddFromWaitingListVisible) || 
																					(fTransferBookingVisible) || 
																						(fCancelBookingVisible)));			

			//if all these are false, then hide the Course Booking group.			
			menu_setVisibletoolbarGroup("mnutoolBookCourse", ((fBookCourseVisible) || (fCancelCourseVisible)));			

			// Standard reports (toolbar)
			menu_setVisibleMenuItem("mnutoolStdRpt_AbsenceCalendar", fStdRptAbsenceCalendarVisible);	//Toolbar Icon
			menu_toolbarEnableItem("mnutoolStdRpt_AbsenceCalendar", fStdRptAbsenceCalendarEnabled);	//Toolbar Icon
			menu_setVisibleMenuItem("mnutoolStdRpt_BreakdownREC", fStdRptAbsenceBreakdownVisible);	//Toolbar Icon
			menu_toolbarEnableItem("mnutoolStdRpt_BreakdownREC", fStdRptAbsenceBreakdownEnabled);	//Toolbar Icon
			menu_setVisibleMenuItem("mnutoolStdRpt_BradfordREC", fStdRptBradfordFactorVisible);	//Toolbar Icon
			menu_toolbarEnableItem("mnutoolStdRpt_BradfordREC", fStdRptBradfordFactorEnabled);	//Toolbar Icon

	// Calendar Reports (toolbar)
			menu_setVisibleMenuItem("mnutoolCalendarReportsRec", fCalendarReportsVisible);	//Toolbar icon
			menu_toolbarEnableItem("mnutoolCalendarReportsRec", fCalendarReportsEnabled);	//Toolbar Icon

			// Mail Merge (Toolbar!)
			menu_setVisibleMenuItem("mnutoolMailMergeRec", fMailMergeVisible);
			menu_toolbarEnableItem("mnutoolMailMergeRec", fMailMergeEnabled);

	 //Standard reports (reports menu)
	fStdRptAbsenceCalendarVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
			(frmMenuInfo.txtUserType.value == 0) &&
			($("#txtAbsenceEnabled").val() == 1));
	fStdRptAbsenceBreakdownVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
			(frmMenuInfo.txtUserType.value == 0) &&
			($("#txtAbsenceEnabled").val() == 1));
	fStdRptBradfordFactorVisible = ((frmMenuInfo.txtPersonnel_EmpTableID.value > 0) &&
			(frmMenuInfo.txtUserType.value == 0) &&
			($("#txtAbsenceEnabled").val() == 1));

	fStdRptAbsenceCalendarEnabled = ((fCanRunAbsenceCalendar == true) &&
			(fStdRptAbsenceCalendarVisible));
	fStdRptAbsenceBreakdownEnabled = ((fCanRunAbsenceBreakdown == true) &&
			(fStdRptAbsenceBreakdownVisible));
	fStdRptBradfordFactorEnabled = ((fCanRunBradfordFactor == true) &&
			(fStdRptBradfordFactorVisible));

	//		abMainMenu.Tools("mnutoolStdRpt_AbsenceBreakdown").visible = fStdRptAbsenceBreakdownVisible;
	//		abMainMenu.Tools("mnutoolStdRpt_AbsenceBreakdown").enabled = fStdRptAbsenceBreakdownEnabled;
	//		abMainMenu.Tools("mnutoolStdRpt_BradfordFactor").visible = fStdRptBradfordFactorVisible;
	//		abMainMenu.Tools("mnutoolStdRpt_BradfordFactor").enabled = fStdRptBradfordFactorEnabled;
	//		abMainMenu.Tools("mnutoolStdRpt_TurnoverReport").visible = fStdRptTurnoverVisible;
	//		abMainMenu.Tools("mnutoolStdRpt_TurnoverReport").enabled = fStdRptTurnoverEnabled;
	//		abMainMenu.Tools("mnutoolStdRpt_StabilityReport").visible = fStdRptStabilityVisible;
	//		abMainMenu.Tools("mnutoolStdRpt_StabilityReport").enabled = fStdRptStabilityEnabled;

	menu_setVisibleMenuItem("mnutoolStdRpt_AbsenceBreakdown", fStdRptAbsenceBreakdownVisible);	//Context menu item
	menu_enableMenuItem("mnutoolStdRpt_AbsenceBreakdown", fStdRptAbsenceBreakdownEnabled);	//Context menu item
	menu_setVisibleMenuItem("mnutoolStdRpt_BradfordFactor", fStdRptBradfordFactorVisible);	//Context menu item
	menu_enableMenuItem("mnutoolStdRpt_BradfordFactor", fStdRptBradfordFactorEnabled);	//Context menu item
	menu_setVisibleMenuItem("mnutoolStdRpt_TurnoverReport", fStdRptTurnoverVisible);	//Context menu item
	menu_enableMenuItem("mnutoolStdRpt_TurnoverReport", fStdRptTurnoverEnabled);	//Context menu item
	menu_setVisibleMenuItem("mnutoolStdRpt_StabilityReport", fStdRptStabilityVisible);	//Context menu item
	menu_enableMenuItem("mnutoolStdRpt_StabilityReport", fStdRptStabilityEnabled);	//Context menu item

    //Hide Calendar Reports Group if all items are hidden.
	menu_setVisibletoolbarGroup("mnutoolCalendarReportsRec", (fCalendarReportsVisible && fStdRptAbsenceCalendarVisible && fStdRptAbsenceBreakdownVisible && fStdRptBradfordFactorVisible && fMailMergeVisible));



	//no beginGroup functionality 
	//		if ((abMainMenu.Tools("mnutoolStdRpt_AbsenceBreakdown").visible == false) && 
	//			(abMainMenu.Tools("mnutoolStdRpt_BradfordFactor").visible == true)) {
	//			abMainMenu.Bands("mnubandReports").Tools("mnutoolStdRpt_BradfordFactor").beginGroup = true;
	//		}

	//		if ((abMainMenu.Tools("mnutoolStdRpt_BreakdownREC").visible == false) && 
	//			(abMainMenu.Tools("mnutoolStdRpt_AbsenceCalendar").visible == true)) {
	//			abMainMenu.Bands("mnubandMainToolBar").Tools("mnutoolStdRpt_AbsenceCalendar").beginGroup = true;
	//		}

	fCanSeeLookupTableMenu = true;
	//		if (txtSysPerm_MENU_VIEWLOOKUPTABLES != null) {
	//			if (txtSysPerm_MENU_VIEWLOOKUPTABLES.value == 0) {
	//				fCanSeeLookupTableMenu = false;
	//			}
	//		}
	try {
		if ($("#txtSysPerm_MENU_VIEWLOOKUPTABLES").val() == 0) {
			fCanSeeLookupTableMenu = false;
		}
	}
	catch (e) { }


	//abMainMenu.Bands("mnubandDatabase").Tools("mnutoolTableScreens").visible = fCanSeeLookupTableMenu;
	menu_setVisibleMenuItem("mnutoolTableScreens", fCanSeeLookupTableMenu);


	//		abMainMenu.Tools("mnutoolCustomReports").enabled = (txtCustomReportsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolCrossTabs").enabled = (txtCrossTabsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolCalendarReports").enabled = (txtCalendarReportsGranted.value == "True");
	//		abMainMenu.Tools("mnutoolMailMerge").enabled = (txtMailMergeGranted.value == "True");

	menu_enableMenuItem("mnutoolCustomReports", $("#txtCustomReportsGranted").val());
	menu_enableMenuItem("mnutoolCrossTabs", $("#txtCrossTabsGranted").val());
	menu_enableMenuItem("mnutoolCalendarReports", $("#txtCalendarReportsGranted").val());
	menu_enableMenuItem("mnutoolMailMerge", $("#txtMailMergeGranted").val());



	//abMainMenu.Tools("mnutoolWorkflow").visible = (frmMenuInfo.txtWFEnabled.value.toUpperCase() == "TRUE");
	//abMainMenu.Tools("mnutoolWorkflow").enabled = (txtWorkflowGranted.value == "True");
	menu_setVisibleMenuItem("mnutoolWorkflow", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflow", $("#txtWorkflowGranted").val());


	//		abMainMenu.Tools("mnutoolWorkflowPopup").visible = (frmMenuInfo.txtWFEnabled.value.toUpperCase() == "TRUE");
	//		abMainMenu.Tools("mnutoolWorkflowPopup").enabled = true;
	menu_setVisibleMenuItem("mnutoolWorkflowPopup", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowPopup", true);
	//		abMainMenu.Tools("mnutoolWorkflowPendingSteps").visible = (frmMenuInfo.txtWFEnabled.value.toUpperCase() == "TRUE");
	//		abMainMenu.Tools("mnutoolWorkflowPendingSteps").enabled = true;
	menu_setVisibleMenuItem("mnutoolWorkflowPendingSteps", frmMenuInfo.txtWFEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowPendingSteps", true);
	//		abMainMenu.Tools("mnutoolWorkflowOutOfOffice").visible = (frmMenuInfo.txtWFOutOfOfficeEnabled.value.toUpperCase() == "TRUE");
	//		abMainMenu.Tools("mnutoolWorkflowOutOfOffice").enabled = (frmMenuInfo.txtWFOutOfOfficeEnabled.value.toUpperCase() == "TRUE");
	menu_setVisibleMenuItem("mnutoolWorkflowOutOfOffice", frmMenuInfo.txtWFOutOfOfficeEnabled.value);
	menu_enableMenuItem("mnutoolWorkflowOutOfOffice", frmMenuInfo.txtWFOutOfOfficeEnabled.value);
	//		abMainMenu.Tools("mnutoolCalculations").enabled = (txtCalculationsGranted.value == "True");
	menu_enableMenuItem("mnutoolCalculations", $("#txtCalculationsGranted").val());
	//		abMainMenu.Tools("mnutoolFilters").enabled = (txtFiltersGranted.value == "True");
	menu_enableMenuItem("mnutoolFilters", $("#txtFiltersGranted").val());
	//		abMainMenu.Tools("mnutoolPicklists").enabled = (txtPicklistsGranted.value == "True");
	menu_enableMenuItem("mnutoolPicklists", $("#txtPicklistsGranted").val());

	try {
		
	}
	catch (e) { }

	//NOT REQUIRED
	//		try
	//			{
	//			abMainMenu.Attach();
	//			abMainMenu.RecalcLayout();
	//			abMainMenu.ResetHooks();
	//			abMainMenu.Refresh();
	//			}
	//		catch(e) {}

	//TODO: not sure what this does other than just pb....
	//		frmRefresh = window.parent.frames("refreshframe").document.forms("frmRefresh");
	//		if (frmRefresh != null) {
	//			frmRefresh.submit();
	//		}


	//NOT REQUIRED
	// Adjust the framset dimensions to suit the size of the menu.
	//		lngMenuHeight = abMainMenu.Bands.Item("mnuMainMenu").height;
	//		if (abMainMenu.Bands("mnubandMainToolBar").visible == true) {
	//			lngMenuHeight = lngMenuHeight + 
	//				abMainMenu.Bands("mnubandMainToolBar").height;
	//		}
	//		
	//		sTemp = new String(lngMenuHeight);
	//		if (frmMenuInfo.txtIEVersion.value >= 5.5) {
	//			window.parent.document.all.item("mainframeset").rows = "0, *, 0, 0, " + sTemp;
	//		}
	//		else {
	//			window.parent.document.all.item("mainframeset").rows = sTemp + ", *, 0, 0, 0";
	//		}
	//		
	//		//have to specify this stuff for the actbar control now it's wrapped...
	//		window.parent.document.all.item("mainframeset").rows = sTemp + ", *, 0, 0, 0";
	//		
	//		abMainMenu.style.top = "0px";
	//		abMainMenu.style.left = "0px";
	//		abMainMenu.style.width = screen.width;   //"100%";

	//}
}
//	
function menu_enableMenu() {
	//TODO: run through and re-enable all items.
	//	var iLoop;

	//We now always enable the menu items (NB not the tools), so this section is...
	//NOT REQUIRED

	//	CloseWait();
	//	headings only
	//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnuMainMenu").Tools.Count(); iLoop++) {
	//		abMainMenu.Bands.Item("mnuMainMenu").Tools.Item(iLoop).Enabled = true;
	//	}
	//ribbon icons only.
	//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Count(); iLoop++) {
	//		abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Item(iLoop).Enabled = true;
	//	}

}

 function menu_disableMenu() {
//	var iLoop;
//	
//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnuMainMenu").Tools.Count(); iLoop++) {
//		abMainMenu.Bands.Item("mnuMainMenu").Tools.Item(iLoop).Enabled = false;
//	}

//	for (iLoop = 0; iLoop < abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Count(); iLoop++) {
//		abMainMenu.Bands.Item("mnubandMainToolBar").Tools.Item(iLoop).Enabled = false;
//	}

//	abMainMenu.RecalcLayout();
//	abMainMenu.ResetHooks();
//	abMainMenu.Refresh();
 }

function menu_saveChanges(psAction, pfPrompt, pfTBOverride) {
	// Prompt the user to save changes if required.
	var iResult;
	var sCurrentPage;
	var frmRecEdit;
	var frmDataArea;
	var frmRecEditArea;
	
	iResult = 7; // 7 = vbNo
	sCurrentPage = OpenHR.currentWorkPage();
    //TODO: NPG
	return 7;
	if ((sCurrentPage == "RECORDEDIT") ||
		(sCurrentPage == "LOOKUPFIND") ||
		(sCurrentPage == "LINKFIND") ||
		(sCurrentPage == "TBTRANSFERCOURSEFIND")) {

		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");
		if (frmRecEdit.ctlRecordEdit.changed == true) {
			// Expand the work frame and hide the option frame.
			//window.parent.document.all.item("workframeset").cols = "*, 0";
			
			// The current record has been modified so prompt the user if they want' to save the changes.
			if (pfPrompt == true) {
				iResult = OpenHR.messageBox("Record changed, do you wish to save changes?", 36);
			}
			else {
				iResult = 6; // 6 = vbYes
			}
			
			if (iResult == 6) {
				// vbYes
				// Try to save the changes.
				// Get the data.asp to get the save the current record.
				frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
				frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

				// Validate the record first.
				if (frmRecEditArea.ctlRecordEdit.validateSave() == true) {
					frmDataArea.txtAction.value = "SAVE";
					frmDataArea.txtReaction.value = psAction;

					frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
					frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
					frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
					frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
					frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
					frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
					frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
					frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
					frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
					frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
					frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
					frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
					frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
					frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;
					frmDataArea.txtTBCourseRecordID.value = frmRecEditArea.ctlRecordEdit.TBCourseRecordID();
					frmDataArea.txtTBEmployeeRecordID.value = frmRecEditArea.ctlRecordEdit.TBEmployeeRecordID();
					frmDataArea.txtTBBookingStatusValue.value = frmRecEditArea.ctlRecordEdit.TBBookingStatusValue();
					frmDataArea.txtTBOverride.value = pfTBOverride;

					if (frmDataArea.txtInsertUpdateDef.value != "") {
						//ShowWait("Saving record. Please wait...");
						menu_disableMenu();

                        frmRecEditArea.ctlRecordEdit.ExecutePostSaveCode();

						data_refreshData();
					}
				}
					
				// Do not do the required action yet. The 'save' operation might not have
				// finished yet so do nothing now. The required action will be triggered when the
				// 'save' operation has completed in the data.asp.
				iResult = 2; // 2 = vbCancel
			}
			else {
		    if (iResult == 7) {
					// vbNo
					// Cancel the changes and do not save them.
        }
        else {
					// Do not save changes, and cancel the operation that called this function.
				}
			}
		}
	}	
	else {
		if ((sCurrentPage == "UTIL_DEF_CUSTOMREPORTS") ||
			(sCurrentPage == "UTIL_DEF_MAILMERGE") ||
			(sCurrentPage == "UTIL_DEF_CALENDARREPORT") ||
			(sCurrentPage == "UTIL_DEF_PICKLIST") ||
			(sCurrentPage == "UTIL_DEF_EXPRESSION") ||
			(sCurrentPage == "UTIL_DEF_EXPRCOMPONENT") ||
			(sCurrentPage == "CONFIGURATION") ||
			(sCurrentPage == "PCCONFIGURATION")) {

		    iResult = saveChanges(psAction, pfPrompt, pfTBOverride);
		}
	}

    // Set current page to defsel
    $("#workframe").attr("data-framesource", "DEFAULT");

	return iResult;
}

function menu_WorkflowOutOfOffice() {
	//	var frmWorkArea;

	//	// Submit the current "workframe" form, and then load the required page.
	//	frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
	//	frmWorkArea.txtAction.value = "WORKFLOWOUTOFOFFICE_CHECK";
	//	frmWorkArea.txtGotoPage.value = "default.asp";
	//	frmWorkArea.submit();
}

function menu_loadPage(psPage) {
	var frmWorkArea;

	// Submit the current "workframe" form, and then load the required page.
	frmWorkArea = OpenHR.getForm("workframe", "frmGoto");
	frmWorkArea.txtGotoTableID.value = 0;
	frmWorkArea.txtGotoViewID.value = 0;
	frmWorkArea.txtGotoScreenID.value = 0;
	frmWorkArea.txtGotoPage.value = psPage;
	OpenHR.submitForm(frmWorkArea);
}

function menu_autoLoadPage(psPage, pfAuto) {
	var frmWorkArea;
	// Submit the current "workframe" form, and then load the required page.
	//frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
	frmWorkArea = OpenHR.getForm("workframe", "frmGoto");
	frmWorkArea.txtGotoTableID.value = 0;
	frmWorkArea.txtGotoViewID.value = 0;
	frmWorkArea.txtGotoScreenID.value = 0;
	frmWorkArea.txtGotoPage.value = psPage;

	if (pfAuto == true) {
		frmWorkArea.txtGotoFromMenu.value = 0;
	}
	else {
		frmWorkArea.txtGotoFromMenu.value = 1;
	}
	OpenHR.submitForm(frmWorkArea);
}

function menu_loadDefSelPage(piDefSelType, piUtilID, piTableID, pfFromMenu) {

	// Submit the current "workframe" form, and then load the required page.
	var frmWorkArea = OpenHR.getForm("workframe", "frmGoto");
	
	frmWorkArea.txtGotoTableID.value = piTableID;
	frmWorkArea.txtGotoViewID.value = 0;
	frmWorkArea.txtGotoScreenID.value = 0;
	frmWorkArea.txtGotoDefSelType.value = piDefSelType;
	frmWorkArea.txtGotoUtilID.value = piUtilID;
	frmWorkArea.txtGotoPage.value = "defsel.asp";
	
	if (pfFromMenu == true) {
		frmWorkArea.txtGotoFromMenu.value = 1;
	}
	else {
		frmWorkArea.txtGotoFromMenu.value = 0;
	}

	OpenHR.submitForm(frmWorkArea);
}

function menu_loadRecordEditPage(psToolName) {
    alert("empty function loadRecordEditPage");
//	var lngTableID;
//	var lngViewID;
//	var lngScreenID;
//	var sSubString;
//	var sLineage;
//	var frmWorkArea;
//	var frmRecEdit;
//	var frmData;
//	var iIndex;
//	var sToolKey;

//	ShowWait("Loading screen. Please wait...");
//	disableMenu();
//	
//	// Get the table, view and screen info from the tool name.
//	sSubString = psToolName.substr(3);
//	iIndex = sSubString.indexOf("_");
//	lngTableID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngViewID = sSubString.substr(0, iIndex);
//	lngScreenID = sSubString.substr(iIndex + 1);

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	// Submit the current "workframe" form, and then load the required record Edit page.
//	frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//	frmWorkArea.txtGotoTableID.value = lngTableID;
//	frmWorkArea.txtGotoViewID.value = lngViewID;
//	frmWorkArea.txtGotoScreenID.value = lngScreenID;
//	frmWorkArea.txtGotoOrderID.value = 0;
//	frmWorkArea.txtGotoRecordID.value = 0;
//	
//	sToolKey = psToolName.substr(0, 3);
//	if (sToolKey == "HT_") {
//		frmRecEdit = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//		frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentTableID.value;
//		frmData = window.parent.frames("dataframe").document.forms("frmData");
//		frmWorkArea.txtGotoParentRecordID.value = frmData.txtRecordID.value;
//		
//		sLineage = frmRecEdit.txtCurrentTableID.value +
//			"_" + frmRecEdit.txtCurrentViewID.value +
//			"_" + frmRecEdit.txtCurrentScreenID.value +
//			"_" + frmRecEdit.txtCurrentOrderID.value +
//			"_" + frmData.txtRecordID.value +
//			"_" + frmData.txtParentTableID.value +
//			"_" + frmData.txtParentRecordID.value + ":" +
//			frmRecEdit.txtLineage.value
//	}
//	else {
//		frmWorkArea.txtGotoParentTableID.value = 0;
//		frmWorkArea.txtGotoParentRecordID.value = 0;
//		sLineage = "";
//	}

//	if ((sToolKey == "PT_")
//		|| (sToolKey == "PV_")) {
//		// PT_ = primary table
//		// PV_ = primary table view
//		if (frmMenuInfo.txtPrimaryStartMode.value == 1) {
//			frmWorkArea.txtAction.value = "NEW";
//		}
//		else {
//			frmWorkArea.txtAction.value = "";
//		}
//	}
//	else {					
//		if (sToolKey == "TS_") {
//			// TS_ = Table screen
//			if (frmMenuInfo.txtLookupStartMode.value == 1) {
//				frmWorkArea.txtAction.value = "NEW";
//			}
//			else {
//				frmWorkArea.txtAction.value = "";
//			}
//		}
//		else {				
//			if (sToolKey == "QE_") {
//				// QE_ = quick entry screen
//				if (frmMenuInfo.txtQuickAccessStartMode.value == 1) {
//					frmWorkArea.txtAction.value = "NEW";
//				}
//				else {
//					frmWorkArea.txtAction.value = "";
//				}
//			}
//			else {	
//				if (sToolKey == "HT_") {										
//					// HT_ = history table
//					if (frmMenuInfo.txtHistoryStartMode.value == 1) {
//						frmWorkArea.txtAction.value = "NEW";
//					}
//					else {
//						frmWorkArea.txtAction.value = "";
//					}
//				}				
//				else {
//					frmWorkArea.txtAction.value = "";
//				}
//			}
//		}
//	}
//	
//	frmWorkArea.txtGotoFilterDef.value = "";
//	frmWorkArea.txtGotoFilterSQL.value = "";
//	frmWorkArea.txtGotoLineage.value = sLineage;
//	frmWorkArea.txtGotoPage.value = "recordEdit.asp";

//	frmWorkArea.submit();
}

function menu_loadFindPage() {
//	var frmWorkArea;
//	var frmRecEdit;
//	
//	ShowWait("Loading find records. Please wait...");
//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	// Submit the current "workframe" form, and then load the required record Edit page.
//	frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//	frmRecEdit = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//	
//	frmWorkArea.txtGotoTableID.value = frmRecEdit.txtCurrentTableID.value;
//	frmWorkArea.txtGotoViewID.value = frmRecEdit.txtCurrentViewID.value;
//	frmWorkArea.txtGotoScreenID.value = frmRecEdit.txtCurrentScreenID.value;
//	frmWorkArea.txtGotoOrderID.value = frmRecEdit.txtCurrentOrderID.value;
//	frmWorkArea.txtGotoRecordID.value = frmRecEdit.txtCurrentRecordID.value;
//	frmWorkArea.txtGotoFirstRecPos.value = 1;
//	frmWorkArea.txtGotoCurrentRecCount.value = 0;

//	if (frmRecEdit.txtCurrentRecordID.value > 0)
//	{
//		frmWorkArea.txtGotoLocateValue.value = frmRecEdit.txtCurrentRecordID.value
//		frmWorkArea.txtAction.value = "LOCATEID";
//	}	

//	if (frmRecEdit.txtCurrentParentTableID.value > 0) {
//		frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentParentTableID.value;
//		frmWorkArea.txtGotoParentRecordID.value = frmRecEdit.txtCurrentParentRecordID.value;
//	}
//	else {
//		frmWorkArea.txtGotoParentTableID.value = 0;
//		frmWorkArea.txtGotoParentRecordID.value = 0;
//	}

//	frmWorkArea.txtGotoRealSource.value = frmRecEdit.txtRecEditRealSource.value;
//	frmWorkArea.txtGotoFilterDef.value = frmRecEdit.txtRecEditFilterDef.value;
//	frmWorkArea.txtGotoFilterSQL.value = frmRecEdit.txtRecEditFilterSQL.value;
//	frmWorkArea.txtGotoLineage.value = frmRecEdit.txtLineage.value;
//	frmWorkArea.txtGotoPage.value = "find.asp";

//	frmWorkArea.submit();
}

function menu_loadFindPageFirst(psToolName) {
	var lngTableID;
	var lngViewID;
	var lngScreenID;
	var sSubString;
	var sLineage;
	var frmWorkArea;
	var frmRecEdit;
	var frmData;
	var iIndex;
    
	//ShowWait("Loading find records. Please wait...");
	//disableMenu();

	// Get the table, view and screen info from the tool name.
	sSubString = psToolName.substr(3);
	iIndex = sSubString.indexOf("_");
	lngTableID = sSubString.substr(0, iIndex);
	sSubString = sSubString.substr(iIndex + 1);
	iIndex = sSubString.indexOf("_");
	lngViewID = sSubString.substr(0, iIndex);
	lngScreenID = sSubString.substr(iIndex + 1);

	//frmWorkAreaInfo.txtHRProNavigation.value = 1;
	$("#txtHRProNavigation").val(1);

	// Submit the current "workframe" form, and then load the required record Edit page.
	frmWorkArea = OpenHR.getForm("workframe", "frmGoto");	//  window.parent.frames("workframe").document.forms("frmGoto");
	frmWorkArea.txtGotoTableID.value = lngTableID;
	frmWorkArea.txtGotoViewID.value = lngViewID;
	frmWorkArea.txtGotoScreenID.value = lngScreenID;
	frmWorkArea.txtGotoOrderID.value = 0;
	frmWorkArea.txtGotoRecordID.value = 0;
	frmWorkArea.txtGotoFirstRecPos.value = 1;
	frmWorkArea.txtGotoCurrentRecCount.value = 0;

	if (psToolName.substr(0, 3) == "HT_") {
		frmRecEdit = OpenHR.getForm("workframe", "frmRecordEditForm");		//  window.parent.frames("workframe").document.forms("frmRecordEditForm");
		frmWorkArea.txtGotoParentTableID.value = frmRecEdit.txtCurrentTableID.value;
		frmData = OpenHR.getForm("dataframe", "frmData"); //  window.parent.frames("dataframe").document.forms("frmData");
		frmWorkArea.txtGotoParentRecordID.value = frmData.txtRecordID.value;

		sLineage = frmRecEdit.txtCurrentTableID.value +
			"_" + frmRecEdit.txtCurrentViewID.value +
			"_" + frmRecEdit.txtCurrentScreenID.value +
			"_" + frmRecEdit.txtCurrentOrderID.value +
			"_" + frmData.txtRecordID.value +
			"_" + frmData.txtParentTableID.value +
			"_" + frmData.txtParentRecordID.value + ":" +
			frmRecEdit.txtLineage.value;
	}
	else {
		frmWorkArea.txtGotoParentTableID.value = 0;
		frmWorkArea.txtGotoParentRecordID.value = 0;
		sLineage = "";
	}

	frmWorkArea.txtGotoRealSource.value = "";

	frmWorkArea.txtGotoLineage.value = sLineage;
	frmWorkArea.txtGotoPage.value = "find";
	OpenHR.submitForm(frmWorkArea); //  frmWorkArea.submit();

}

function menu_loadLookupPage(plngColumnID, plngLookupColumnID, psLookupValue, pfMandatory, psFilterLookupValue) {
	var frmRecEditArea;
	var frmOptionArea;

	//ShowWait("Loading lookup find records. Please wait...");
	menu_disableMenu();

	frmWorkAreaInfo.txtHRProNavigation.value = 1;
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionLinkTableID.value = 0;
	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
	frmOptionArea.txtGotoOptionColumnID.value = plngColumnID;
	frmOptionArea.txtGotoOptionLookupColumnID.value = plngLookupColumnID;
	frmOptionArea.txtGotoOptionLookupValue.value = psLookupValue;
	frmOptionArea.txtGotoOptionLookupMandatory.value = pfMandatory;
	frmOptionArea.txtGotoOptionLookupFilterValue.value = psFilterLookupValue;
	frmOptionArea.txtGotoOptionPage.value = "lookupFind";
	frmOptionArea.txtGotoOptionAction.value = "";
	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

    OpenHR.submitForm(frmOptionArea);
}

function menu_loadLinkPage(plngLinkTableID, plngLinkOrderID, plngLinkViewID, plngLinkRecordID) {
//	var frmRecEditArea;
//	var frmOptionArea;

//	ShowWait("Loading link find records. Please wait...");
//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
//	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmOptionArea.txtGotoOptionValue.value = "";
//	frmOptionArea.txtGotoOptionLinkTableID.value = plngLinkTableID;
//	frmOptionArea.txtGotoOptionLinkOrderID.value = plngLinkOrderID;
//	frmOptionArea.txtGotoOptionLinkViewID.value = plngLinkViewID;
//	frmOptionArea.txtGotoOptionLinkRecordID.value = plngLinkRecordID;
//	frmOptionArea.txtGotoOptionPage.value = "linkFind.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
//	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
//	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

//	frmOptionArea.submit();
}

function menu_loadTransferCoursePage(psCourseTitle) {
//	var frmRecEditArea;
//	var frmOptionArea;

//	ShowWait("Loading matching course records. Please wait...");
//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
//	frmOptionArea.txtGotoOptionRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmOptionArea.txtGotoOptionValue.value = "";
//	frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
//	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
//	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
//	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
//	frmOptionArea.txtGotoOptionPage.value = "tbTransferCourseFind.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
//	frmOptionArea.txtGotoOptionCourseTitle.value = psCourseTitle;
//	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
//	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

//	frmOptionArea.submit();
}

function menu_loadOLEPage(plngColumnID, psFile, plngOLEType, plngMaxEmbedSize, pbIsReadOnly) {
//	var frmRecEditArea;
//	var frmOptionArea;
//	
//	if (plngOLEType == 1) {
//		ShowWait("Loading OLE (server) list. Please wait...");
//	}
//	else if (plngOLEType == 0) {
//		ShowWait("Loading OLE (local) list. Please wait...");
//	}
//	else if (plngOLEType > 1) {
//		ShowWait("Loading document. Please wait...");
//	}

//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
//	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmOptionArea.txtGotoOptionValue.value = "";
//	frmOptionArea.txtGotoOptionLinkTableID.value = 0;
//	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
//	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
//	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
//	frmOptionArea.txtGotoOptionColumnID.value = plngColumnID;
//	frmOptionArea.txtGotoOptionLookupColumnID.value = 0;
//	frmOptionArea.txtGotoOptionFile.value = psFile;
//	//frmOptionArea.txtGotoOptionOLEOnServer.value = pfOLEOnServer;
//	frmOptionArea.txtGotoOptionOLEType.value = plngOLEType;
//	frmOptionArea.txtGotoOptionOLEMaxEmbedSize.value = plngMaxEmbedSize;
//	frmOptionArea.txtGotoOptionOLEReadOnly.value = pbIsReadOnly;
//	frmOptionArea.txtGotoOptionLookupMandatory.value = false;
//	frmOptionArea.txtGotoOptionPage.value = "oleFind.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
//	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
//	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

//	frmOptionArea.submit();
}

function menu_loadImagePage(plngColumnID, psImage, plngOLEType, plngMaxEmbedSize) {

//	var frmRecEditArea;
//	var frmOptionArea;

//	if (plngOLEType == 1) {
//		ShowWait("Loading photo list. Please wait...");
//		}
//	else {
//		ShowWait("Loading photo. Please wait...");
//		}
//	
//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
//	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmOptionArea.txtGotoOptionValue.value = "";
//	frmOptionArea.txtGotoOptionLinkTableID.value = 0;
//	frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
//	frmOptionArea.txtGotoOptionLinkViewID.value = 0;
//	frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
//	frmOptionArea.txtGotoOptionColumnID.value = plngColumnID;
//	frmOptionArea.txtGotoOptionLookupColumnID.value = 0;
//	frmOptionArea.txtGotoOptionFile.value = psImage;
//	frmOptionArea.txtGotoOptionOLEType.value = plngOLEType;
//	frmOptionArea.txtGotoOptionOLEMaxEmbedSize.value = plngMaxEmbedSize;
//	frmOptionArea.txtGotoOptionLookupMandatory.value = false;
//	frmOptionArea.txtGotoOptionPage.value = "imageFind.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//	frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
//	frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
//	frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;
//	frmOptionArea.submit();
}

function menu_reloadFindPage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "FIND");
}

function menu_reloadLookupPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "LOOKUP");
}

function menu_reloadLinkPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "LINK");
}

function menu_reloadTransferCoursePage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "TRANSFERCOURSE");
}

function menu_reloadBookCoursePage(psAction, psLocateValue) {
	menu_reloadPage(psAction, psLocateValue, "BOOKCOURSE");
}

function menu_reloadAddFromWaitingListPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "ADDFROMWAITINGLIST");
}

function menu_reloadTransferBookingPage(psAction, psLocateValue) {
//	reloadPage(psAction, psLocateValue, "TRANSFERBOOKING");
}

function menu_reloadPage(psAction, psLocateValue, psPage) {	
	var fValidLocateValue;
	var iDataType;
	var frmFindForm;
	var sDecimalSeparator;
	var sThousandSeparator;
	var sPoint;
	var sConvertedValue;
	var iIndex;
	var iSize;
	var iDecimals;
	var iTempSize;
	var iTempDecimals;
	
	sDecimalSeparator = "\\";
	sDecimalSeparator = sDecimalSeparator.concat(OpenHR.LocaleDecimalSeparator);
	var reDecimalSeparator = new RegExp(sDecimalSeparator, "gi");

	sThousandSeparator = "\\";
	sThousandSeparator = sThousandSeparator.concat(OpenHR.LocaleThousandSeparator);
	var reThousandSeparator = new RegExp(sThousandSeparator, "gi");

	sPoint = "\\.";
	var rePoint = new RegExp(sPoint, "gi");
	
	fValidLocateValue = true;
	
	if (psPage == "FIND") {
		frmFindForm = OpenHR.getForm("workframe", "frmFindForm");
	}
	else {
		if ((psPage == "LOOKUP") || 
			(psPage == "LINK") || 
			(psPage == "TRANSFERCOURSE") || 
			(psPage == "BOOKCOURSE") || 
			(psPage == "ADDFROMWAITINGLIST") || 
			(psPage == "TRANSFERBOOKING")) {
				frmFindForm = OpenHR.getForm("optiondataframe", "frmOptionData");
		}
		else {
			return;
		}
	}

	if (psAction == "LOCATE") {
		if (psLocateValue.length == 0) {
			return;
		}
	
		// Check that the entered value is valid for the first order column type.
		iDataType = frmFindForm.txtFirstColumnType.value;
	
		if ((iDataType == 2) || (iDataType == 4)) {
			// Numeric/Integer column.
			// Ensure that the value entered is numeric.

			// Convert the value from locale to UK settings for use with the isNaN funtion.
			sConvertedValue = new String(psLocateValue);
			// Remove any thousand separators.
			sConvertedValue = sConvertedValue.replace(reThousandSeparator, "");

			// Convert any decimal separators to '.'.
			if (OpenHR.LocaleDecimalSeparator != ".") {
				// Remove decimal points.
				sConvertedValue = sConvertedValue.replace(rePoint, "A");
				// replace the locale decimal marker with the decimal point.
				sConvertedValue = sConvertedValue.replace(reDecimalSeparator, ".");
			}
			psLocateValue = sConvertedValue;

			if (isNaN(sConvertedValue) == true) {
				fValidLocateValue = false;
				OpenHR.messageBox("Invalid numeric value entered.");
			}
			else {
				iIndex = sConvertedValue.indexOf(".");

				if (iDataType == 2) {
					// Ensure numeric columns are compared with numeric values that do not exceed
					// their defined size and decimals settings.
					if (iIndex >= 0) {
						iTempSize = iIndex;
						iTempDecimals = sConvertedValue.length - iIndex - 1;
					}
					else {
						iTempSize = sConvertedValue.length;
						iTempDecimals = 0;
					}
					
					if ((sConvertedValue.substr(0,1) == "+") ||
						(sConvertedValue.substr(0,1) == "-")) {
						iTempSize = iTempSize - 1;
					}

					iSize = frmFindForm.txtFirstColumnSize.value;
					iDecimals = frmFindForm.txtFirstColumnDecimals.value;

					if(iTempSize > (iSize - iDecimals)) {
						fValidLocateValue = false;
						OpenHR.messageBox("The column can only be compared to values with " + (iSize - iDecimals) + " digit(s) to the left of the decimal separator.");
					}
					else {
						if(iTempDecimals > iDecimals) {
							fValidLocateValue = false;
							OpenHR.messageBox("The column can only be compared to values with " + iDecimals + " decimal place(s).");
						}
					}
				}
				else {
					// Ensure the value is an integer.
					if (iIndex >= 0) {
						fValidLocateValue = false;
						OpenHR.messageBox("Invalid integer value entered.");
					}
				}
			}
		}
		else {
			if (iDataType == 11) {
				// Date column.
				// Ensure that the value entered is a date.
				if (psLocateValue.length > 0) {
					// Convert the date to SQL format (use this as a validation check).
					// An empty string is returned if the date is invalid.
					psLocateValue = menu_convertLocaleDateToSQL(psLocateValue);

					if (psLocateValue.length == 0) {
						fValidLocateValue = false;
						OpenHR.messageBox("Invalid date value entered.");
					}
				}
			}
		}
	}

	if (fValidLocateValue == true) {
		if (psAction == "RELOAD") {
			//TODO: (maybe) ShowWait("Reloading find records. Please wait...");
		}
		else {
			//TODO: (maybe) ShowWait("Loading find records. Please wait...");
		}
		menu_disableMenu();

		if (psPage == "FIND") {
			var frmWorkAreaInfo = document.getElementById("frmWorkAreaInfo");
			
			frmWorkAreaInfo.txtHRProNavigation.value = 1;
	
			// Submit the current "workframe" form, and then load the required record Edit page.
			var frmWorkArea = OpenHR.getForm("workframe", "frmGoto");
	
			frmWorkArea.txtAction.value = psAction;
			frmWorkArea.txtGotoTableID.value = frmFindForm.txtCurrentTableID.value;
			frmWorkArea.txtGotoViewID.value = frmFindForm.txtCurrentViewID.value;
			frmWorkArea.txtGotoScreenID.value = frmFindForm.txtCurrentScreenID.value;
			frmWorkArea.txtGotoOrderID.value = frmFindForm.txtCurrentOrderID.value;
			frmWorkArea.txtGotoRecordID.value = frmFindForm.txtCurrentRecordID.value;

			frmWorkArea.txtGotoFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmWorkArea.txtGotoCurrentRecCount.value = frmFindForm.txtCurrentRecCount.value;
			frmWorkArea.txtGotoLocateValue.value = psLocateValue;
	
			if (frmFindForm.txtCurrentParentTableID.value > 0) {
				frmWorkArea.txtGotoParentTableID.value = frmFindForm.txtCurrentParentTableID.value;
				frmWorkArea.txtGotoParentRecordID.value = frmFindForm.txtCurrentParentRecordID.value;
			}
			else {
				frmWorkArea.txtGotoParentTableID.value = 0;
				frmWorkArea.txtGotoParentRecordID.value = 0;
			}

			frmWorkArea.txtGotoRealSource.value = frmFindForm.txtRealSource.value;
			frmWorkArea.txtGotoLineage.value = frmFindForm.txtLineage.value;
			frmWorkArea.txtGotoFilterDef.value = frmFindForm.txtFilterDef.value;
			frmWorkArea.txtGotoFilterSQL.value = frmFindForm.txtFilterSQL.value;

			frmWorkArea.txtGotoPage.value = "find";

			// Clear the locate value from the menu.
			//TODO: abMainMenu.Tools("mnutoolLocateRecords").Text = "";

			OpenHR.submitForm(frmWorkArea);
		}

		if (psPage == "LOOKUP") {
			// Get the optionData.asp to get the lookup find records.
			var frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
			var frmOptionArea = OpenHR.getForm("optionframe", "frmLookupFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADLOOKUPFIND";

			frmOptionGetDataArea.txtOptionColumnID.value = frmOptionArea.txtOptionColumnID.value;		
			frmOptionGetDataArea.txtOptionLookupColumnID.value = frmOptionArea.txtOptionLookupColumnID.value;
			frmOptionGetDataArea.txtOptionLookupFilterValue.value = frmOptionArea.txtOptionLookupFilterValue.value;

			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
			frmOptionGetDataArea.txtOptionIsLookupTable.value = frmOptionArea.txtIsLookupTable.value;

			var frmRecordEditForm = document.getElementById("frmRecordEditForm");
			
			frmOptionGetDataArea.txtOptionRecordID.value = frmRecordEditForm.txtCurrentRecordID.value;
			frmOptionGetDataArea.txtOptionParentTableID.value = frmRecordEditForm.txtCurrentParentTableID.value;
			frmOptionGetDataArea.txtOptionParentRecordID.value = frmRecordEditForm.txtCurrentParentRecordID.value;

			if (frmOptionArea.txtIsLookupTable.value == "False") {
				frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
				frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.selectView.options[frmOptionArea.selectView.selectedIndex].value;
				frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.selectOrder.options[frmOptionArea.selectOrder.selectedIndex].value;
			}
			else {
				frmOptionGetDataArea.txtOptionTableID.value = 0;
				frmOptionGetDataArea.txtOptionViewID.value = 0;
				frmOptionGetDataArea.txtOptionOrderID.value = 0;
			}
			
			//window.parent.frames("optiondataframe").refreshOptionData();
			refreshOptionData();	//should be in context.

			// Clear the locate value from the menu.
			//TODO: abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}

		if (psPage == "LINK") {
			// Get the optionData.asp to get the lookup find records.
			frmOptionGetDataArea = OpenHR.getForm("optiondataframe", "frmGetOptionData");
			frmOptionArea = OpenHR.getForm("optionframe", "frmLinkFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADFIND";
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;

			refreshOptionData();

			// Clear the locate value from the menu.
			//TODO: abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}
		//TODO: ALL THESE TB IF's....
		if (psPage == "TRANSFERCOURSE") {
			// Get the optionData.asp to get the lookup find records.
			frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
			frmOptionArea = window.parent.frames("optionframe").document.forms("frmFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERCOURSE";
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
			frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionCourseTitle.value = frmOptionArea.txtOptionCourseTitle.value;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
			window.parent.frames("optiondataframe").refreshOptionData();

			// Clear the locate value from the menu.
			abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}

		if (psPage == "BOOKCOURSE") {
			// Get the optionData.asp to get the lookup find records.
			frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
			frmOptionArea = window.parent.frames("optionframe").document.forms("frmFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADBOOKCOURSE";
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
			frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
			window.parent.frames("optiondataframe").refreshOptionData();

			// Clear the locate value from the menu.
			abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}

		if (psPage == "ADDFROMWAITINGLIST") {
			// Get the optionData.asp to get the lookup find records.
			frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
			frmOptionArea = window.parent.frames("optionframe").document.forms("frmFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADADDFROMWAITINGLIST";
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
			frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
			window.parent.frames("optiondataframe").refreshOptionData();

			// Clear the locate value from the menu.
			abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}

		if (psPage == "TRANSFERBOOKING") {
			// Get the optionData.asp to get the lookup find records.
			frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
			frmOptionArea = window.parent.frames("optionframe").document.forms("frmFindForm");
			frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERBOOKING";
			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
			frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
			frmOptionGetDataArea.txtOptionPageAction.value = "LOCATE";
			frmOptionGetDataArea.txtGotoLocateValue.value = psLocateValue;
			frmOptionGetDataArea.txtOptionFirstRecPos.value = frmFindForm.txtFirstRecPos.value;
			frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmFindForm.txtRecordCount.value;
			window.parent.frames("optiondataframe").refreshOptionData();

			// Clear the locate value from the menu.
			abMainMenu.Tools("mnutoolLocateRecords").Text = ""
		}
	}
}

function menu_DownloadControls()
{	
//	var sTarget = "winDownloadControls";
//	var winl = screen.width / 3;
//	var wint = screen.height / 3;
//	var sWinProps;

//	sWinProps = 'height=135,'
//		+ ' width=425,'
//		+ ' menubar=no,'
//		+ ' titlebar=no,'
//		+ ' resizable=no,'
//		+ ' directories=no,'
//		+ ' location=no,'
//		+ ' scrollbars=no,'
//		+ ' toolbar=no,'
//		+ ' status=no,'
//		+ ' top='	+ wint +',' 
//		+ ' left=' + winl;

//	frmDownloadControls.target = sTarget;
//	spawnWindow('', sTarget, sWinProps);
//	frmDownloadControls.submit();	
}

function menu_spawnWindow(mypage, myname, winprops) 
{
//	win = window.open(mypage, myname, winprops)
//	if (parseInt(navigator.appVersion) >= 4) { 
//		pausecomp(300);
//		win.window.focus(); 
//	}	
}

function menu_pausecomp(millis) 
{
//	var date = new Date();
//	var curDate = null;

//	do 
//	{ 
//		curDate = new Date(); 
//	} while(curDate-date < millis);
}
				

				
function menu_exitIntranet() {

	alert("exit clicked...");
	//	var sCurrentWorkPage;
	//	var frmDataArea;
	//	var frmRecEditArea;
	//	
	//	sCurrentWorkPage = currentWorkPage();

	//	if (saveChanges("EXIT", true, false) != 2) { // 2 = vbCancel
	//		// Quit the browser.
	//		window.parent.close();

	//		// Reload the current record edit form in case the browser was not closed.
	//		if (sCurrentWorkPage == "RECORDEDIT") {
	//			// Get the data.asp to get the reload the current record.
	//			frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
	//			frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");

	//			frmDataArea.txtAction.value = "LOAD";
	//			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
	//			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	//			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
	//			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
	//			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
	//			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	//			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	//			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
	//			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
	//			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
	//			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
	//			frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
	//			frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
	//			frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;

	//			data_refreshData();
	//		}
	//	}
}

function menu_logoffIntranet() {
	//	if (saveChanges("LOGOFF", true, false) != 2) { // 2 = vbCancel
	//		// Return to the login page.
	//		// NB. We use the 'replace' method rather than the 'href' property of the location object
	//		// as this ensures the page is refreshed. Using the 'href' property loads the cached version of the page
	//		// if one exists.
	//		if (frmMenuInfo.txtDefaultStartPage.value.length > 0) {
	//			window.parent.location.replace(frmMenuInfo.txtDefaultStartPage.value);
	//		}
	//		else {
	//			window.parent.location.replace("login.asp");
	//		}
	//	}


	window.location.href = "LogOff";

}

function menu_mnutoolAboutHRPro() {
	$("#About").dialog("open");
}



function menu_newRecord() {
//	var sCurrentWorkPage;
//	var frmDataArea;
//	var frmRecEditArea;
//	var frmWorkArea;
//	var frmFindArea;
//	
//	sCurrentWorkPage = currentWorkPage();

//	if (sCurrentWorkPage == "RECORDEDIT") {
//		if (saveChanges("NEW", true, false) != 2) { // 2 = vbCancel
//			// Get the data.asp to get the default values for a NEW record.
//			frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
//			frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");

//			frmDataArea.txtAction.value = "NEW";
//			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
//			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
//			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
//			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
//			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
//			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
//			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
//			frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();

//			data_refreshData();
//		}
//	}
//	else {
//		if (sCurrentWorkPage == "FIND") {
//			// Submit the current "workframe" form, and then load the required record Edit page.
//			// And then get it to create a new record.
//			ShowWait("Loading screen. Please wait...");
//			disableMenu();
//				
//			frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//			frmFindArea = window.parent.frames("workframe").document.forms("frmFindForm");
//			frmWorkArea.txtAction.value = "NEW";
//			frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
//			frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
//			frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
//			frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
//			frmWorkArea.txtGotoRecordID.value = 0;
//			frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
//			frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
//			frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;

//			frmWorkArea.txtGotoPage.value = "recordEdit.asp";
//			frmWorkArea.submit();
//		}
//	}
}

function menu_copyRecord() {
//	var sCurrentWorkPage;
//	var frmDataArea;
//	var frmRecEditArea;
//	var frmWorkArea;
//	var frmFindArea;
//	var lngRecordID;

//	sCurrentWorkPage = currentWorkPage();

//	if (sCurrentWorkPage == "RECORDEDIT") {
//		if (saveChanges("COPY", true, false) != 2) { // 2 = vbCancel
//			frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//			frmDataArea = window.parent.frames("dataframe").document.forms("frmData");

//			window.parent.frames("workframe").setRecordID(0);			
//			frmDataArea.txtRecordPosition.value = frmDataArea.txtRecordCount.value + 1;
//			
//			frmRecEditArea.ctlRecordEdit.ClearUniqueColumnControls();
//			frmRecEditArea.ctlRecordEdit.changed = true;
//			frmRecEditArea.ctlRecordEdit.ChangedOLEPhoto(0, "ALL");
//			menu_refreshMenu();
//		}
//	}
//	else {
//		if (sCurrentWorkPage == "FIND") {
//			// Submit the current "workframe" form, and then load the required record Edit page.
//			// And then get it to create a new record.
//			ShowWait("Loading screen. Please wait...");
//			disableMenu();
//				
//			lngRecordID = window.parent.frames("workframe").selectedRecordID();

//			frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//			frmFindArea = window.parent.frames("workframe").document.forms("frmFindForm");
//			frmWorkArea.txtAction.value = "COPY";
//			frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
//			frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
//			frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
//			frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
//			frmWorkArea.txtGotoRecordID.value = lngRecordID;
//			frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
//			frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
//			frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
//			frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
//			frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

//			frmWorkArea.txtGotoPage.value = "recordEdit.asp";
//			frmWorkArea.submit();
//		}
//	}
}

function menu_editRecord() {
    
	var lngRecordID;
	var frmWorkArea;
	var frmFindArea;

    //NPG: selectedRecordID function is unique to workframe, whatever the content. 
    //Should be in scope.
	lngRecordID = selectedRecordID();

	if (lngRecordID > 0) {
		//ShowWait("Loading screen. Please wait...");
		//disableMenu();

        
	
		// Submit the current "workframe" form, and then load the required record Edit page.
		frmWorkArea = OpenHR.getForm("workframe", "frmGoto");
		frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

		frmWorkAreaInfo.txtHRProNavigation.value = 1;

		frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
		frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
		frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
		frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
		frmWorkArea.txtGotoRecordID.value = lngRecordID;
		frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
		frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
		frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
		frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
		frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

		frmWorkArea.txtGotoPage.value = "recordEdit";
	    //frmWorkArea.submit();
		OpenHR.submitForm(frmWorkArea);		
	}
}

function menu_deleteRecord() {
	var sCurrentWorkPage;
	var frmDataArea;
	var frmRecEditArea;
	var frmFindArea;
	var lngRecordID;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (OpenHR.messageBox("Delete the current record, are you sure ?", 36) == 6) { // 36 = vbQuestion + vbYesNo, 6 = vbYes
			//ShowWait("Deleting record. Please wait...");
			//disableMenu();
					
			// Get the data.asp to get the save the current record.
			frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
			frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

			frmDataArea.txtAction.value = "DELETE";
			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
			frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
			frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
			frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;

			data_refreshData();
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {
			lngRecordID = selectedRecordID();
	
			if (lngRecordID > 0) {
				if (OpenHR.messageBox("Delete the current record, are you sure ?", 36) == 6) { // 36 = vbQuestion + vbYesNo, 6 = vbYes
					// Get the data.asp to get the save the current record.
					//ShowWait("Deleting record. Please wait...");
					//disableMenu()	;
						
					frmDataArea = OpenHR.getForm("dataframe", "frmGetData");
					frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

					frmDataArea.txtAction.value = "DELETE";
					frmDataArea.txtReaction.value = "REFRESHFINDAFTERDELETE";
					frmDataArea.txtCurrentTableID.value = frmFindArea.txtCurrentTableID.value;
					frmDataArea.txtCurrentScreenID.value = frmFindArea.txtCurrentScreenID.value;
					frmDataArea.txtCurrentViewID.value = frmFindArea.txtCurrentViewID.value;
					frmDataArea.txtSelectSQL.value = "";
					frmDataArea.txtFromDef.value = "";
	 				frmDataArea.txtFilterSQL.value = "";
	 				frmDataArea.txtFilterDef.value = "";
					frmDataArea.txtRealSource.value = frmFindArea.txtRealSource.value;
					frmDataArea.txtRecordID.value = lngRecordID;
					frmDataArea.txtParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
					frmDataArea.txtParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
					frmDataArea.txtDefaultCalcCols.value = "";
					frmDataArea.txtInsertUpdateDef.value = "";
					frmDataArea.txtTimestamp.value = 0;

					data_refreshData();
				}
			}
		}
	}
}

function menu_loadParentRecord() {
//	var lngTableID;
//	var lngViewID;
//	var lngScreenID;
//	var lngOrderID;
//	var lngRecordID;
//	var lngParentTableID;
//	var lngParentRecordID;
//	var sSubString;
//	var sLineage;
//	var iIndex;
//	var frmWorkArea;
//	var frmFindArea;
//	var sCurrentWorkPage;
//	
//	sCurrentWorkPage = currentWorkPage();

//	// Submit the current "workframe" form, and then load the required Record Edit page.
//	frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");

//	if (sCurrentWorkPage == "RECORDEDIT") {
//		if (saveChanges("PARENT", true, false) != 2) { // 2 = vbCancel
//			loadParent();
//		}
//	}
//	else {
//		if (sCurrentWorkPage == "FIND") {
//			ShowWait("Loading screen. Please wait...");
//			disableMenu();
//				
//			frmFindArea = window.parent.frames("workframe").document.forms("frmFindForm");
//			
//			frmWorkAreaInfo.txtHRProNavigation.value = 1;
//				
//			// Get the table, view and screen info from the tool name.
//			sSubString = frmFindArea.txtLineage.value;
//			iIndex = sSubString.indexOf("_");
//			lngTableID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf("_");
//			lngViewID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf("_");
//			lngScreenID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf("_");
//			lngOrderID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf("_");
//			lngRecordID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf("_");
//			lngParentTableID = sSubString.substr(0, iIndex);
//			sSubString = sSubString.substr(iIndex + 1);
//			iIndex = sSubString.indexOf(":");
//			lngParentRecordID = sSubString.substr(0, iIndex);
//			sLineage = sSubString.substr(iIndex + 1);

//			frmWorkArea.txtAction.value = "LOAD";
//			frmWorkArea.txtGotoTableID.value = lngTableID;
//			frmWorkArea.txtGotoViewID.value = lngViewID;
//			frmWorkArea.txtGotoScreenID.value = lngScreenID;
//			frmWorkArea.txtGotoOrderID.value = lngOrderID;
//			frmWorkArea.txtGotoRecordID.value = lngRecordID;
//			frmWorkArea.txtGotoParentTableID.value = lngParentTableID;
//			frmWorkArea.txtGotoParentRecordID.value = lngParentRecordID;
//			frmWorkArea.txtGotoLineage.value = sLineage;

//			frmWorkArea.txtGotoPage.value = "recordEdit.asp";
//			frmWorkArea.submit();
//		}
//	}
}

function menu_loadParent() {
//	var lngTableID;
//	var lngViewID;
//	var lngScreenID;
//	var lngOrderID;
//	var lngRecordID;
//	var lngParentTableID;
//	var lngParentRecordID;
//	var sSubString;
//	var sLineage;
//	var frmWorkArea;
//	var frmRecEditArea;
//	var iIndex;

//	ShowWait("Loading screen. Please wait...");
//	disableMenu();
//					
//	frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//			
//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//				
//	// Get the table, view and screen info from the tool name.
//	sSubString = frmRecEditArea.txtLineage.value;
//	iIndex = sSubString.indexOf("_");
//	lngTableID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngViewID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngScreenID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngOrderID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngRecordID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf("_");
//	lngParentTableID = sSubString.substr(0, iIndex);
//	sSubString = sSubString.substr(iIndex + 1);
//	iIndex = sSubString.indexOf(":");
//	lngParentRecordID = sSubString.substr(0, iIndex);
//	sLineage = sSubString.substr(iIndex + 1);
//	
//	frmWorkArea.txtAction.value = "LOAD";
//	frmWorkArea.txtGotoTableID.value = lngTableID;
//	frmWorkArea.txtGotoViewID.value = lngViewID;
//	frmWorkArea.txtGotoScreenID.value = lngScreenID;
//	frmWorkArea.txtGotoOrderID.value = lngOrderID;
//	frmWorkArea.txtGotoRecordID.value = lngRecordID;
//	frmWorkArea.txtGotoParentTableID.value = lngParentTableID;
//	frmWorkArea.txtGotoParentRecordID.value = lngParentRecordID;
//	frmWorkArea.txtGotoLineage.value = sLineage;

//	frmWorkArea.txtGotoPage.value = "recordEdit.asp";
//	frmWorkArea.submit();
}

function menu_loadBackPage() {
//	var frmFindArea;
//	var lngRecordID;
//	var frmWorkArea;
//	
//	// Submit the current "workframe" form, and then load the required Record Edit page.
//	frmFindArea = window.parent.frames("workframe").document.forms("frmFindForm");

//	lngRecordID = frmFindArea.txtCurrentRecordID.value;
//	
//	if (lngRecordID > 0) {
//		ShowWait("Loading screen. Please wait...");
//		disableMenu();
//		
//		frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//		// Submit the current "workframe" form, and then load the required record Edit page.
//		frmWorkArea = window.parent.frames("workframe").document.forms("frmGoto");
//		frmWorkArea.txtGotoTableID.value = frmFindArea.txtCurrentTableID.value;
//		frmWorkArea.txtGotoViewID.value = frmFindArea.txtCurrentViewID.value;
//		frmWorkArea.txtGotoScreenID.value = frmFindArea.txtCurrentScreenID.value;
//		frmWorkArea.txtGotoOrderID.value = frmFindArea.txtCurrentOrderID.value;
//		frmWorkArea.txtGotoRecordID.value = lngRecordID;
//		frmWorkArea.txtGotoParentTableID.value = frmFindArea.txtCurrentParentTableID.value;
//		frmWorkArea.txtGotoParentRecordID.value = frmFindArea.txtCurrentParentRecordID.value;
//		frmWorkArea.txtGotoLineage.value = frmFindArea.txtLineage.value;
//		frmWorkArea.txtGotoFilterDef.value = frmFindArea.txtFilterDef.value;
//		frmWorkArea.txtGotoFilterSQL.value = frmFindArea.txtFilterSQL.value;

//		frmWorkArea.txtGotoPage.value = "recordEdit.asp";
//		frmWorkArea.submit();
//	}
}

function menu_moveRecord(psMovement) {
//	var sCurrentWorkPage;
//	var sSaveChangesTag;
//	var sAction;
//	var frmDataArea;
//	var frmRecEditArea;
//	var frmOptionGetDataArea;
//	var frmOptionDataArea;
//	var frmOptionArea;
//	var frmEventLog;
//	
//	sCurrentWorkPage = currentWorkPage();

//	sSaveChangesTag = psMovement;
//	sAction = psMovement;
//	
//	if (sCurrentWorkPage == "EVENTLOG")	{
//		window.parent.frames("workframe").moveRecord(psMovement);
//		return;
//	}
//	
//	if (sCurrentWorkPage == "RECORDEDIT") {
//		if (saveChanges(sSaveChangesTag, true, false) != 2) { // 2 = vbCancel
//			// Get the data.asp to get the move to the FIRST record.
//			ShowWait("Locating record. Please wait...");
//			disableMenu();
//					
//			frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
//			frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");
//			
//			if ((psMovement == "MOVEPREVIOUS") &&
//				(frmRecEditArea.txtCurrentRecordID.value == 0)) {
//				sAction = "MOVELAST";
//			}
//			
//			frmDataArea.txtAction.value = sAction;
//			
//			frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
//			frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//			frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
//			frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
//			frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
//			frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//			frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//			frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
//			frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//			frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
//			frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
//			data_refreshData();
//		}
//		
//		return;
//	}

//	if (sCurrentWorkPage == "FIND") {
//		reloadFindPage(sAction, "");
//		return;
//	}

//	if (sCurrentWorkPage == "LINKFIND") {
//		// Get the optionData.asp to get the link find records.
//		frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
//		frmOptionDataArea = window.parent.frames("optiondataframe").document.forms("frmOptionData");
//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmLinkFindForm");
//		frmOptionGetDataArea.txtOptionAction.value = "LOADFIND";
//		frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
//		frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
//		frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;
//		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
//		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
//		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;

//		window.parent.frames("optiondataframe").refreshOptionData();
//		return;
//	}

//	if (sCurrentWorkPage == "LOOKUPFIND") {
//		// Get the optionData.asp to get the link find records.
//		frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
//		frmOptionDataArea = window.parent.frames("optiondataframe").document.forms("frmOptionData");
//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmLookupFindForm");
//		frmOptionGetDataArea.txtOptionAction.value = "LOADLOOKUPFIND";
//		frmOptionGetDataArea.txtOptionColumnID.value = frmOptionArea.txtOptionColumnID.value;		
//		frmOptionGetDataArea.txtOptionLookupColumnID.value = frmOptionArea.txtOptionLookupColumnID.value;
//		frmOptionGetDataArea.txtOptionLookupFilterValue.value = frmOptionArea.txtOptionLookupFilterValue.value;
//		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
//		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
//		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;
//		frmOptionGetDataArea.txtOptionIsLookupTable.value = frmOptionArea.txtIsLookupTable.value;
//		frmOptionGetDataArea.txtOptionRecordID.value = window.parent.frames("workframe").document.forms("frmRecordEditForm").txtCurrentRecordID.value;

//		frmOptionGetDataArea.txtOptionParentTableID.value = window.parent.frames("workframe").document.forms("frmRecordEditForm").txtCurrentParentTableID.value;
//		frmOptionGetDataArea.txtOptionParentRecordID.value = window.parent.frames("workframe").document.forms("frmRecordEditForm").txtCurrentParentRecordID.value;

//		if (frmOptionArea.txtIsLookupTable.value == "False") {
//			frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;
//			frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.selectView.options[frmOptionArea.selectView.selectedIndex].value;
//			frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.selectOrder.options[frmOptionArea.selectOrder.selectedIndex].value;
//		}
//		else {
//			frmOptionGetDataArea.txtOptionTableID.value = 0;
//			frmOptionGetDataArea.txtOptionViewID.value = 0;
//			frmOptionGetDataArea.txtOptionOrderID.value = 0;
//		}

//		window.parent.frames("optiondataframe").refreshOptionData();
//		return;
//	}
//	
//	if ((sCurrentWorkPage == "TBBOOKCOURSEFIND") ||
//		(sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") ||
//		(sCurrentWorkPage == "TBTRANSFERCOURSEFIND") ||
//		(sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND")) {
//		// Get the optionData.asp to get the find records.
//		frmOptionGetDataArea = window.parent.frames("optiondataframe").document.forms("frmGetOptionData");
//		frmOptionDataArea = window.parent.frames("optiondataframe").document.forms("frmOptionData");
//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmFindForm");
//				
//		if (sCurrentWorkPage == "TBTRANSFERBOOKINGFIND") {
//			frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERBOOKING";
//		}
//		else {
//			if (sCurrentWorkPage == "TBADDFROMWAITINGLISTFIND") {
//				frmOptionGetDataArea.txtOptionAction.value = "LOADADDFROMWAITINGLIST";
//			}
//			else {
//				if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
//					frmOptionGetDataArea.txtOptionAction.value = "LOADTRANSFERCOURSE";
//				}
//				else {
//					frmOptionGetDataArea.txtOptionAction.value = "LOADBOOKCOURSE";
//				}
//			}
//		}
//		
//		frmOptionGetDataArea.txtOptionTableID.value = frmOptionArea.txtOptionLinkTableID.value;;
//		frmOptionGetDataArea.txtOptionViewID.value = frmOptionArea.txtOptionLinkViewID.value;
//		frmOptionGetDataArea.txtOptionOrderID.value = frmOptionArea.txtOptionLinkOrderID.value;

//		if (sCurrentWorkPage == "TBTRANSFERCOURSEFIND") {
//			frmOptionGetDataArea.txtOptionCourseTitle.value = frmOptionArea.txtOptionCourseTitle.value;
//		}

//		frmOptionGetDataArea.txtOptionRecordID.value = frmOptionArea.txtOptionRecordID.value;
//		frmOptionGetDataArea.txtOptionPageAction.value = sAction;
//		frmOptionGetDataArea.txtOptionFirstRecPos.value = frmOptionDataArea.txtFirstRecPos.value;
//		frmOptionGetDataArea.txtOptionCurrentRecCount.value = frmOptionDataArea.txtRecordCount.value;

//		window.parent.frames("optiondataframe").refreshOptionData();
//	}
}

function menu_loadQuickFind() 
{
	if (menu_saveChanges("QUICKFIND", true, false) != 2) { // 2 = vbCancel
		menu_loadQuickFindNoSaveCheck();
	}
}

function menu_loadQuickFindNoSaveCheck() 
{
	var frmRecEditArea;
	var frmOptionArea;
	
	// NPG20100824 Fault HRPRO1065 - leave menus disabled in these modal screens
  menu_disableMenu();	
	
	frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
	frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

	frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
	frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
	frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;
	frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
	frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
	frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
	frmOptionArea.txtGotoOptionValue.value = "";
	frmOptionArea.txtGotoOptionPage.value = "quickfind";
	frmOptionArea.txtGotoOptionAction.value = "";

	OpenHR.submitForm(frmOptionArea);
}

function menu_loadSelectOrderFilter(psType) {
	var sCurrentWorkPage;
	var frmRecEditArea;
	var frmOptionArea;
	var frmFindArea;
	var sSaveChangesTag;
	var sOptionPage;
	
	//disable the menu
	// NPG20100824 Fault HRPRO1065 - leave menus disabled in these modal screens	
	menu_disableMenu();
	
	if (psType == "ORDER") {
		sSaveChangesTag = "SELECTORDER";
		sOptionPage = "orderselect";
	}
	else {
		sSaveChangesTag = "SELECTFILTER";
		sOptionPage = "filterselect";
	}
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (menu_saveChanges(sSaveChangesTag, true, false) != 2) { // 2 = vbCancel
			frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");
			frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

			frmOptionArea.txtGotoOptionScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
			frmOptionArea.txtGotoOptionTableID.value = frmRecEditArea.txtCurrentTableID.value;
			frmOptionArea.txtGotoOptionViewID.value = frmRecEditArea.txtCurrentViewID.value;

			if (psType == "ORDER") {
				frmOptionArea.txtGotoOptionOrderID.value = frmRecEditArea.txtCurrentOrderID.value;
			}
			
			frmOptionArea.txtGotoOptionFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
			frmOptionArea.txtGotoOptionFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
			frmOptionArea.txtGotoOptionValue.value = "";
			frmOptionArea.txtGotoOptionPage.value = sOptionPage;
			frmOptionArea.txtGotoOptionAction.value = "";

			OpenHR.submitForm(frmOptionArea);
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {
			frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
			frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

			frmOptionArea.txtGotoOptionScreenID.value = frmFindArea.txtCurrentScreenID.value;
			frmOptionArea.txtGotoOptionTableID.value = frmFindArea.txtCurrentTableID.value;
			frmOptionArea.txtGotoOptionViewID.value = frmFindArea.txtCurrentViewID.value;
			frmOptionArea.txtGotoOptionOrderID.value = frmFindArea.txtCurrentOrderID.value;
			frmOptionArea.txtGotoOptionFilterDef.value = frmFindArea.txtFilterDef.value;
			frmOptionArea.txtGotoOptionFilterSQL.value = frmFindArea.txtFilterSQL.value;
			frmOptionArea.txtGotoOptionValue.value = "";
			frmOptionArea.txtGotoOptionPage.value = sOptionPage;
			frmOptionArea.txtGotoOptionAction.value = "";

			OpenHR.submitForm(frmOptionArea);
		}
	}	
}

function menu_clearFilter() {
	var sCurrentWorkPage;
	var frmRecEditArea;
	var frmFindArea;
	
	sCurrentWorkPage = OpenHR.currentWorkPage();

	if (sCurrentWorkPage == "RECORDEDIT") {
		if (menu_saveChanges("CLEARFILTER", true, false) != 2) { // 2 = vbCancel
				frmRecEditArea = OpenHR.getForm("workframe", "frmRecordEditForm");

				frmRecEditArea.txtRecEditFilterDef.value = "";
				frmRecEditArea.txtRecEditFilterSQL.value = "";
				refreshData(); //workframe
		}
	}
	else {
		if (sCurrentWorkPage == "FIND") {
			frmFindArea = OpenHR.getForm("workframe", "frmFindForm");

			frmFindArea.txtFilterDef.value = "";
			frmFindArea.txtFilterSQL.value = "";
			menu_reloadFindPage("RELOAD", "");
		}
	}
}

function menu_currentWorkPage() {
	// Return the current page in the work frameset.
	// var iIndex;
	var sCurrentPage;
	// var sColumnDefn;
	//	
	//	sColumnDefn = window.parent.document.all.item("workframeset").cols;
	//	while (sColumnDefn.substr(0, 1) == " ") {
	//		sColumnDefn = sColumnDefn.substr(1);
	//	}
	//	
	//	if (sColumnDefn.substr(0, 1) == "*") {
	//		// Work frame is in view.
	//		sCurrentPage = new String(window.parent.frames("workframe").document.location);
	//	}
	//	else {
	//		// Option frame is in view.
	//		sCurrentPage = new String(window.parent.frames("optionframe").document.location);
	//	}
	//	
	//	iIndex = sCurrentPage.lastIndexOf("/");
	//	if (iIndex >= 0) {
	//		sCurrentPage = sCurrentPage.substr(iIndex + 1);
	//	}
	//	
	//	iIndex = sCurrentPage.indexOf(".");
	//	if (iIndex >= 0) {
	//		sCurrentPage = sCurrentPage.substr(0, iIndex);
	//	}
	//	
	//	sCurrentPage = sCurrentPage.toUpperCase();

	//	return sCurrentPage;

	if (!($("#workframe").css('display') == 'none')) {
		//Work frame is in view.
		sCurrentPage = $("#workframe").attr("data-framesource").replace(".asp", "");
	} else {
		//Option frame is in view.
		sCurrentPage = $("#optionframe").attr("data-framesource").replace(".asp", "");
	}

	sCurrentPage = sCurrentPage.toUpperCase();
	return sCurrentPage;
	
//	var sCurrentPage = $("#workframe").attr("data-framesource");

//	var iIndex = sCurrentPage.lastIndexOf("/");
//	if (iIndex >= 0) {
//		sCurrentPage = sCurrentPage.substr(iIndex + 1);
//	}

//	iIndex = sCurrentPage.indexOf(".");
//	if (iIndex >= 0) {
//		sCurrentPage = sCurrentPage.substr(0, iIndex);
//	}

//	sCurrentPage = sCurrentPage.toUpperCase();
//	return sCurrentPage;

}

function menu_selectFolder(psKey, psPath) {
//	var frmOptionArea;

//	ShowWait("Loading folder list. Please wait...");
//	disableMenu();

//	frmWorkAreaInfo.txtHRProNavigation.value = 1;
//	
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	frmOptionArea.txtGotoOptionFile.value = psPath;
//	frmOptionArea.txtGotoOptionPage.value = "folderOption.asp";
//	frmOptionArea.txtGotoOptionAction.value = psKey;

//	frmOptionArea.submit();
}


function menu_cancelCourse() {
//	var frmDataArea;
//	var frmRecEditArea;
//	
//	// Get the number of course bookings 
//	// (to see if we need to prompt for them to be transferred).
//	disableMenu();
//					
//	frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");

//	frmDataArea.txtAction.value = "CANCELCOURSE";
//	frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
//	frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
//	frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
//	frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//	frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
//	frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
//	frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
//	frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
//	frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;

//	data_refreshData();
}

function menu_bookCourse() {
	var lngRecordID;
	var frmOptionArea;
	
	lngRecordID = selectedRecordID();	//shold be in scope

	if (lngRecordID > 0) {
		//TODO: ShowWait("Loading matching courses. Please wait...");
		menu_disableMenu();

		frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

		frmOptionArea.txtGotoOptionScreenID.value = 0;
		frmOptionArea.txtGotoOptionTableID.value = 0;
		frmOptionArea.txtGotoOptionViewID.value = 0;
		frmOptionArea.txtGotoOptionOrderID.value = 0;
		frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
		frmOptionArea.txtGotoOptionFilterDef.value = "";
		frmOptionArea.txtGotoOptionFilterSQL.value = "";
		frmOptionArea.txtGotoOptionValue.value = "";
		frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
		frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
		frmOptionArea.txtGotoOptionLinkViewID.value = 0;
		frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
		frmOptionArea.txtGotoOptionPage.value = "tbBookCourseFind";
		frmOptionArea.txtGotoOptionAction.value = "";
		frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
		frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
		frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

		OpenHR.submitForm(frmOptionArea);
	}
	else {
		OpenHR.messageBox("You must select a course to book.");
	}
}

function menu_transferBooking() {
//	var lngRecordID;
//	var frmOptionArea;
//	
//	lngRecordID = window.parent.frames("workframe").selectedRecordID();

//	if (lngRecordID > 0) {
//		ShowWait("Loading matching courses. Please wait...");
//		disableMenu();

//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//		frmOptionArea.txtGotoOptionScreenID.value = 0;
//		frmOptionArea.txtGotoOptionTableID.value = 0;
//		frmOptionArea.txtGotoOptionViewID.value = 0;
//		frmOptionArea.txtGotoOptionOrderID.value = 0;
//		frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
//		frmOptionArea.txtGotoOptionFilterDef.value = "";
//		frmOptionArea.txtGotoOptionFilterSQL.value = "";
//		frmOptionArea.txtGotoOptionValue.value = "";
//		frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_CourseTableID.value;
//		frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
//		frmOptionArea.txtGotoOptionLinkViewID.value = 0;
//		frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
//		frmOptionArea.txtGotoOptionPage.value = "tbTransferBookingFind.asp";
//		frmOptionArea.txtGotoOptionAction.value = "";
//		frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
//		frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
//		frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

//		frmOptionArea.submit();
//	}
//	else {
//		ASRIntranetFunctions.MessageBox("You must select a booking to transfer.");
//	}
}

function menu_cancelBooking() {
//	var lngRecordID;
//	var frmDataArea;
//	
//	lngRecordID = window.parent.frames("workframe").selectedRecordID();

//	if (lngRecordID > 0) {
//		if ((frmMenuInfo.txtTB_WaitListTableInsert.value.toUpperCase() == "TRUE") &&
//			(frmMenuInfo.txtTB_WaitListCourseTitleColumnUpdate.value.toUpperCase() == "TRUE")) {
//			iUserChoice = ASRIntranetFunctions.MessageBox("Transfer the booking to the employee's waiting list ?", 35);
//		}
//		else {
//			iUserChoice = 7; // No
//		}

//		if (iUserChoice != 2) {
//			disableMenu();
//								
//			frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");

//			frmDataArea.txtAction.value = "CANCELBOOKING";
//			frmDataArea.txtRecordID.value = lngRecordID;
//			frmDataArea.txtUserChoice.value = (iUserChoice != 7);

//			data_refreshData();
//		}
//	}
//	else {
//		ASRIntranetFunctions.MessageBox("You must select a booking to transfer.");
//	}
}

function menu_bulkBooking() {
	var lngRecordID;
	var frmFindArea;
	var frmOptionArea;
	
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
	lngRecordID = frmFindArea.txtCurrentParentRecordID.value;

	if (lngRecordID > 0) {
		menu_disableMenu();

		frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

		frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
		frmOptionArea.txtGotoOptionPage.value = "tbBulkBooking";

		OpenHR.submitForm(frmOptionArea);
	}
}

function menu_addFromWaitingList() {
	var lngRecordID;
	var frmFindArea;
	var frmOptionArea;
	
	frmFindArea = OpenHR.getForm("workframe", "frmFindForm");
	lngRecordID = frmFindArea.txtCurrentParentRecordID.value;

	var frmMenuInfo = document.getElementById("frmMenuInfo");
	
	if (lngRecordID > 0) {
		//ShowWait("Loading matching employees. Please wait...");
		menu_disableMenu();

		frmOptionArea = OpenHR.getForm("optionframe", "frmGotoOption");

		frmOptionArea.txtGotoOptionScreenID.value = 0;
		frmOptionArea.txtGotoOptionTableID.value = 0;
		frmOptionArea.txtGotoOptionViewID.value = 0;
		frmOptionArea.txtGotoOptionOrderID.value = 0;
		frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;
		frmOptionArea.txtGotoOptionFilterDef.value = "";
		frmOptionArea.txtGotoOptionFilterSQL.value = "";
		frmOptionArea.txtGotoOptionValue.value = "";
		frmOptionArea.txtGotoOptionLinkTableID.value = frmMenuInfo.txtTB_EmpTableID.value;
		frmOptionArea.txtGotoOptionLinkOrderID.value = 0;
		frmOptionArea.txtGotoOptionLinkViewID.value = 0;
		frmOptionArea.txtGotoOptionLinkRecordID.value = 0;
		frmOptionArea.txtGotoOptionPage.value = "tbAddFromWaitingListFind";
		frmOptionArea.txtGotoOptionAction.value = "";
		frmOptionArea.txtGotoOptionPageAction.value = "LOAD";
		frmOptionArea.txtGotoOptionFirstRecPos.value = 1;
		frmOptionArea.txtGotoOptionCurrentRecCount.value = 0;

		OpenHR.submitForm(frmOptionArea);		
	}
}

function menu_transferCourse(plngNewCourseRecordID, pfBookingsExist) {
//	var iResult;
//	var frmDataArea;
//	var frmRecEditArea;
//	
//	// Get the number of course bookings 
//	// (to see if we need to prompt for them to be transferred).
//	disableMenu();

//	iResult = 7; // Default to No.

//	if ((plngNewCourseRecordID == 0) &&
//		(pfBookingsExist == true) &&
//		(frmMenuInfo.txtTB_WaitListTableInsert.value.toUpperCase() == "TRUE") &&
//		(frmMenuInfo.txtTB_WaitListCourseTitleColumnUpdate.value.toUpperCase() == "TRUE")) {
//		// Prompt the user to create waiting list
//		iResult = ASRIntranetFunctions.MessageBox("Create waiting list entries for the cancelled bookings ?", 36); // 36 = yesNo + question
//	}
//	
//	frmDataArea = window.parent.frames("dataframe").document.forms("frmGetData");
//	frmRecEditArea = window.parent.frames("workframe").document.forms("frmRecordEditForm");

//	frmDataArea.txtAction.value = "CANCELCOURSE_2";
//	frmDataArea.txtCurrentTableID.value = frmRecEditArea.txtCurrentTableID.value;
//	frmDataArea.txtCurrentScreenID.value = frmRecEditArea.txtCurrentScreenID.value;
//	frmDataArea.txtCurrentViewID.value = frmRecEditArea.txtCurrentViewID.value;
//	frmDataArea.txtSelectSQL.value = frmRecEditArea.txtRecEditSelectSQL.value;
//	frmDataArea.txtFromDef.value = frmRecEditArea.txtRecEditFromDef.value;
//	frmDataArea.txtFilterSQL.value = frmRecEditArea.txtRecEditFilterSQL.value;
//	frmDataArea.txtFilterDef.value = frmRecEditArea.txtRecEditFilterDef.value;
//	frmDataArea.txtRealSource.value = frmRecEditArea.txtRecEditRealSource.value;
//	frmDataArea.txtRecordID.value = frmRecEditArea.txtCurrentRecordID.value;
//	frmDataArea.txtParentTableID.value = frmRecEditArea.txtCurrentParentTableID.value;
//	frmDataArea.txtParentRecordID.value = frmRecEditArea.txtCurrentParentRecordID.value;
//	frmDataArea.txtDefaultCalcCols.value = frmRecEditArea.ctlRecordEdit.CalculatedDefaultColumns();
//	frmDataArea.txtInsertUpdateDef.value = frmRecEditArea.ctlRecordEdit.insertUpdateDef();
//	frmDataArea.txtTimestamp.value = frmRecEditArea.ctlRecordEdit.timestamp;
//	frmDataArea.txtTBCourseRecordID.value = plngNewCourseRecordID;
//	frmDataArea.txtTBCreateWLRecords.value = (iResult != 7);
//	
//	data_refreshData();
}

function menu_openPersonnelRecEdit() {
//	var i;
//	var iindex;
//	var sName;
//	var sTemp;
//	var sToolNameKey;
//	var sToolNameTable;
//	var sSubBand;
//	
//	if ((frmMenuInfo.txtUserType.value == 1) && 
//		(frmMenuInfo.txtDoneSelfServiceStart.value == 0)) 
//	{
//		
//		frmMenuInfo.txtDoneSelfServiceStart.value = 1;
//		
//		refreshDatabaseMenu();
//		for(i=0; i<abMainMenu.Bands.Item("mnubandDatabase").Tools.Count(); i++){
//			sName = abMainMenu.Bands.Item("mnubandDatabase").Tools.Item(i).name;
//			sToolNameKey = sName.substr(0, 3);
//			sTemp = sName.substr(3, sName.length - 3);
//			
//			iIndex = sTemp.indexOf("_");
//			if (iIndex >= 0) {
//				sToolNameTable = sTemp.substr(0, iIndex);

//				if ((frmMenuInfo.txtPersonnel_EmpTableID.value == sToolNameTable) &&
//					((sToolNameKey == "PT_") ||	(sToolNameKey == "PV_"))) {

//					loadRecordEditPage(sName);								
//					return;
//				}
//			}
//			else {
//				sToolNameTable = sTemp;

//				if ((frmMenuInfo.txtPersonnel_EmpTableID.value == sToolNameTable) &&
//					(sToolNameKey == "PS_")) {
//					
//					sSubBand = abMainMenu.Bands.Item("mnubandDatabase").Tools.Item(i).SubBand;
//					if (sSubBand.length > 0) {
//						if(abMainMenu.Bands.Item(sSubBand).Tools.Count() > 0) {
//						
//							sName = abMainMenu.Bands.Item(sSubBand).Tools.Item(0).Name;
//							loadRecordEditPage(sName);								
//							return;
//						}
//					}
//				}			
//			}
//		}		
//	}	
//	else
//	{
//		loadPage("default");
//	}
}

function menu_ConvertSQLDateToLocale(psString) {
    
}



function menu_convertLocaleDateToSQL(psDateString)
{ 
//	/* Convert the given date string (in locale format) into 
//	SQL format (mm/dd/yyyy). */
//	var sDateFormat;
//	var iDays;
//	var iMonths;
//	var iYears;
//	var sDays;
//	var sMonths;
//	var sYears;
//	var iValuePos;
//	var sTempValue;
//	var sValue;
//	var iLoop;
//		
//	sDateFormat = ASRIntranetFunctions.LocaleDateFormat;

//	sDays="";
//	sMonths="";
//	sYears="";
//	iValuePos = 0;

//	// Trim leading spaces.
//	sTempValue = psDateString.substr(iValuePos,1);
//	while (sTempValue.charAt(0) == " ") 
//	{
//		iValuePos = iValuePos + 1;		
//		sTempValue = psDateString.substr(iValuePos,1);
//	}

//	for (iLoop=0; iLoop<sDateFormat.length; iLoop++)  {
//		if ((sDateFormat.substr(iLoop,1).toUpperCase() == 'D') && (sDays.length==0)){
//			sDays = psDateString.substr(iValuePos,1);
//			iValuePos = iValuePos + 1;
//			sTempValue = psDateString.substr(iValuePos,1);

//			if (isNaN(sTempValue) == false) {
//				sDays = sDays.concat(sTempValue);			
//			}
//			iValuePos = iValuePos + 1;		
//		}

//		if ((sDateFormat.substr(iLoop,1).toUpperCase() == 'M') && (sMonths.length==0)){
//			sMonths = psDateString.substr(iValuePos,1);
//			iValuePos = iValuePos + 1;
//			sTempValue = psDateString.substr(iValuePos,1);

//			if (isNaN(sTempValue) == false) {
//				sMonths = sMonths.concat(sTempValue);			
//			}
//			iValuePos = iValuePos + 1;
//		}

//		if ((sDateFormat.substr(iLoop,1).toUpperCase() == 'Y') && (sYears.length==0)){
//			sYears = psDateString.substr(iValuePos,1);
//			iValuePos = iValuePos + 1;
//			sTempValue = psDateString.substr(iValuePos,1);

//			if (isNaN(sTempValue) == false) {
//				sYears = sYears.concat(sTempValue);			
//			}
//			iValuePos = iValuePos + 1;
//			sTempValue = psDateString.substr(iValuePos,1);

//			if (isNaN(sTempValue) == false) {
//				sYears = sYears.concat(sTempValue);			
//			}
//			iValuePos = iValuePos + 1;
//			sTempValue = psDateString.substr(iValuePos,1);

//			if (isNaN(sTempValue) == false) {
//				sYears = sYears.concat(sTempValue);			
//			}
//			iValuePos = iValuePos + 1;
//		}

//		// Skip non-numerics
//		sTempValue = psDateString.substr(iValuePos,1);
//		while (isNaN(sTempValue) == true) {
//			iValuePos = iValuePos + 1;		
//			sTempValue = psDateString.substr(iValuePos,1);
//		}
//	}

//	while (sDays.length < 2) {
//		sTempValue = "0";
//		sDays = sTempValue.concat(sDays);
//	}

//	while (sMonths.length < 2) {
//		sTempValue = "0";
//		sMonths = sTempValue.concat(sMonths);
//	}

//	while (sYears.length < 2) {
//		sTempValue = "0";
//		sYears = sTempValue.concat(sYears);
//	}

//	if (sYears.length == 2) {
//		iValue = parseInt(sYears);
//		if (iValue < 30) {
//			sTempValue = "20";
//		}
//		else {
//			sTempValue = "19";
//		}
//		
//		sYears = sTempValue.concat(sYears);
//	}

//	while (sYears.length < 4) {
//		sTempValue = "0";
//		sYears = sTempValue.concat(sYears);
//	}

//	sTempValue = sMonths.concat("/");
//	sTempValue = sTempValue.concat(sDays);
//	sTempValue = sTempValue.concat("/");
//	sTempValue = sTempValue.concat(sYears);
//	
//	sValue = ASRIntranetFunctions.ConvertSQLDateToLocale(sTempValue);

//	iYears = parseInt(sYears);
//	
//	while (sMonths.substr(0, 1) == "0") {
//		sMonths = sMonths.substr(1);
//	}
//	iMonths = parseInt(sMonths);
//	
//	while (sDays.substr(0, 1) == "0") {
//		sDays = sDays.substr(1);
//	}
//	iDays = parseInt(sDays);

//	var newDateObj = new Date(iYears, iMonths - 1, iDays);
//	if ((newDateObj.getDate() != iDays) || 
//		(newDateObj.getMonth() + 1 != iMonths) || 
//		(newDateObj.getFullYear() != iYears)) {
//		return "";
//	}
//	else {
//		return sTempValue;
//	}
}

function menu_loadRecordDefSelPage(piDefSelType) {
//	
//	var frmOptionArea;
//	var lngRecordID;
//	var lngTableID;
//	var strRealSource;

//	if (saveChanges("CALENDARREPORTSREC", true, false) != 2) { // 2 = vbCancel

//		// Show loading screen
//		disableMenu();
//		
//		// Submit the current "workframe" form, and then load the required page.
//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//		strRealSource = window.parent.frames("workframe").frmRecordEditForm.txtRecEditRealSource.value;	
//		lngTableID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentTableID.value;
//		lngRecordID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//			
//		frmOptionArea.txtGotoOptionDefSelRecordID.value = lngRecordID;
//		frmOptionArea.txtGotoOptionRealsource.value = strRealSource;
//		frmOptionArea.txtGotoOptionTableID.value = lngTableID;
//		frmOptionArea.txtGotoOptionDefSelType.value = piDefSelType;
//		frmOptionArea.txtGotoOptionUtilID.value = 0;
//		frmOptionArea.txtGotoOptionPage.value = "defsel.asp";
//		frmOptionArea.txtGotoOptionAction.value = "";
//		
//		frmOptionArea.submit();
//	}
}

function menu_loadRecordDefSelPageNoSaveCheck(piDefSelType) {
//	
//	var frmOptionArea;
//	var lngRecordID;
//	var lngTableID;
//	var strRealSource;

//	// Show loading screen
//	disableMenu();
//		
//	// Submit the current "workframe" form, and then load the required page.
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	strRealSource = window.parent.frames("workframe").frmRecordEditForm.txtRecEditRealSource.value;	
//	lngTableID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentTableID.value;
//	lngRecordID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//		
//	frmOptionArea.txtGotoOptionDefSelRecordID.value = lngRecordID;
//	frmOptionArea.txtGotoOptionRealsource.value = strRealSource;
//	frmOptionArea.txtGotoOptionTableID.value = lngTableID;
//	frmOptionArea.txtGotoOptionDefSelType.value = piDefSelType;
//	frmOptionArea.txtGotoOptionUtilID.value = 0;
//	frmOptionArea.txtGotoOptionPage.value = "defsel.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//		
//	frmOptionArea.submit();
}

function menu_LoadAbsenceCalendar() {

//	var frmOptionArea;
//	var lngRecordID;
//	var lngTableID;
//	var strRealSource;

//	if (saveChanges("STDRPT_ABSENCECALENDAR", true, false) != 2) { // 2 = vbCancel

//		// Show loading screen
//		window.parent.frames("menuframe").ShowWait("Loading absence calendar. Please wait...");
//		disableMenu();

//		// Submit the current "workframe" form, and then load the required page.
//		frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//		lngRecordID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//		frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;

//		strRealSource = window.parent.frames("workframe").frmRecordEditForm.txtRecEditRealSource.value;	
//		frmOptionArea.txtGotoOptionRealsource.value = strRealSource;
//		
//		frmOptionArea.txtGotoOptionPage.value = "stdrpt_AbsenceCalendar.asp";
//		frmOptionArea.txtGotoOptionAction.value = "";
//		frmOptionArea.submit();
//		//CloseWait();

//	}

}

function menu_LoadAbsenceCalendarNoSaveCheck() {

//	var frmOptionArea;
//	var lngRecordID;
//	var lngTableID;
//	var strRealSource;

//	// Show loading screen
//	window.parent.frames("menuframe").ShowWait("Loading absence calendar. Please wait...");
//	disableMenu();

//	// Submit the current "workframe" form, and then load the required page.
//	frmOptionArea = window.parent.frames("optionframe").document.forms("frmGotoOption");

//	lngRecordID = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//	frmOptionArea.txtGotoOptionRecordID.value = lngRecordID;

//	strRealSource = window.parent.frames("workframe").frmRecordEditForm.txtRecEditRealSource.value;	
//	frmOptionArea.txtGotoOptionRealsource.value = strRealSource;
//		
//	frmOptionArea.txtGotoOptionPage.value = "stdrpt_AbsenceCalendar.asp";
//	frmOptionArea.txtGotoOptionAction.value = "";
//	frmOptionArea.submit();
//	//CloseWait();
}

function menu_LoadStandardReport(psReportType, psRecordSelection)
	{
//	var sUtilReportType;
//	var sPage;
//	var frmSendArea;
//	var sLoadCaption;
//	var bOK;


//	bOK = false;

//	if (psReportType == "ABSENCEBREAKDOWN")
//		{
//		sUtilReportType = "15";
//		sPage = "stdrpt_def_Absence.asp";
//		sLoadCaption = "Loading Absence Breakdown. Please wait...";
//		}

//	if (psReportType == "BRADFORDFACTOR")
//		{
//		sUtilReportType = "16";
//		sPage = "stdrpt_def_Absence.asp";
//		sLoadCaption = "Loading Bradford Factor. Please wait...";
//		}

//	sPage = "util_run_promptedValues.asp"


//	// If we came from an individual record
//	if (psRecordSelection == "REC")
//		{
//		if (saveChanges(psReportType + psRecordSelection, true, false) != 2)
//			{
//			frmSendArea = window.parent.frames("optionframe").document.forms("frmGotoOption");
//			frmSendArea.txtGotoOptionRecordID.value = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//			frmSendArea.txtGotoOptionPage.value = sPage;
//			frmSendArea.txtGotoOptionAction.value = "STDREPORT_DATEPROMPT";
//			bOK = true;
//			}
//		}
//	else
//		{
//		if (saveChanges(psReportType + psRecordSelection,true, false) !=2)
//			{
//			frmSendArea = window.parent.frames("workframe").document.forms("frmGoto");
//			frmSendArea.txtGotoPage.value = sPage;			
//			frmSendArea.txtAction.value = "STDREPORT_DATEPROMPT";
//			bOK = true;
//			}
//		}


//	if (bOK == true)
//		{

//		// Show friendly popup
//		ShowWait(sLoadCaption);

//		//frmSendArea.txtGotoOptionTableID.value = 0;
//		//frmSendArea.txtGotoOptionViewID.value = 0;
//		//frmSendArea.txtGotoOptionScreenID.value = 0;
//		frmSendArea.txtStandardReportType.value = sUtilReportType;
//		//frmSendArea.txtGotoOptionAction.value = "";
//		//frmSendArea.txtStandardReportPage.value = sPage;
//		
//		//frmSendArea.txtGotoPage.value = sPage;

//		frmSendArea.submit();
//		}
	}

function menu_LoadStandardReportNoSaveCheck(psReportType, psRecordSelection)
{
//	var sUtilReportType;
//	var sPage;
//	var frmSendArea;
//	var sLoadCaption;
//	var bOK;

//	bOK = false;

//	if (psReportType == "ABSENCEBREAKDOWN")
//		{
//		sUtilReportType = "15";
//		sPage = "stdrpt_def_Absence.asp";
//		sLoadCaption = "Loading Absence Breakdown. Please wait...";
//		}

//	if (psReportType == "BRADFORDFACTOR")
//		{
//		sUtilReportType = "16";
//		sPage = "stdrpt_def_Absence.asp";
//		sLoadCaption = "Loading Bradford Factor. Please wait...";
//		}

//	sPage = "util_run_promptedValues.asp"

//	// If we came from an individual record
//	if (psRecordSelection == "REC")
//	{
//		frmSendArea = window.parent.frames("optionframe").document.forms("frmGotoOption");
//		frmSendArea.txtGotoOptionRecordID.value = window.parent.frames("workframe").frmRecordEditForm.txtCurrentRecordID.value;
//		frmSendArea.txtGotoOptionPage.value = sPage;
//		frmSendArea.txtGotoOptionAction.value = "STDREPORT_DATEPROMPT";
//		bOK = true;
//	}
//	else
//	{
//		frmSendArea = window.parent.frames("workframe").document.forms("frmGoto");
//		frmSendArea.txtGotoPage.value = sPage;			
//		frmSendArea.txtAction.value = "STDREPORT_DATEPROMPT";
//		bOK = true;
//	}

//	if (bOK == true)
//	{
//		// Show friendly popup
//		ShowWait(sLoadCaption);

//		//frmSendArea.txtGotoOptionTableID.value = 0;
//		//frmSendArea.txtGotoOptionViewID.value = 0;
//		//frmSendArea.txtGotoOptionScreenID.value = 0;
//		frmSendArea.txtStandardReportType.value = sUtilReportType;
//		//frmSendArea.txtGotoOptionAction.value = "";
//		//frmSendArea.txtStandardReportPage.value = sPage;
//		
//		//frmSendArea.txtGotoPage.value = sPage;

//		frmSendArea.submit();
//	}
}

function menu_displayVersionInfo()
	{
//	window.open("VersionInfo.htm",null,"height=550,width=650,resizable=yes,scrollbars=yes,status=yes,toolbar=yes,menubar=yes,location=no");
//	return;
	}

function menu_NewWindow(mypage, myname, w, h, scroll) 
	{
//	var winl = (screen.width - w) / 2;
//	var wint = (screen.height - h) / 2;
//	winprops = 'height='+h+',width='+w+',top='+wint+',left='+winl+',scrollbars='+scroll+',resizable'
//	win = window.open(mypage, myname, winprops)
//	if (parseInt(navigator.appVersion) >= 4) 
//		{ 
//		win.window.focus(); 
//		}
	}

function menu_refreshDefSel() 
{
//	if(currentWorkPage() == "DEFSEL")
//	{
//		try
//		{
//			frmDefSel = window.parent.frames("workframe").document.forms("frmDefSel");
//			loadDefSelPage(frmDefSel.utiltype.value, frmDefSel.utilid.value, frmDefSel.txtTableID.value, false);
//		}
//		catch (e) {}
//	}
}		

//NEW FUNCTIONS.

function menu_loadFind(target) {

	$.ajax({
		url: "/dmi.net/home/find",
		type: "POST",
		success: function (data) {
			$("#workframe").html(data);
			//show workframe
			$("#workframeset").show();
		},
		error: function (req, status, errorObj) {
			alert(status);
		}
	});
}


function menu_insertMenuItem(parentULID, NewLICaption, NewLIID) {
    var insertRef = "#" + parentULID;
    if ($(insertRef).length > 0) {
        $(insertRef).prepend("<li id='" + NewLIID + "'><a href='#'>" + NewLICaption + "</a></li>");
    } else {
        
        var insertRefULParent = insertRef.replace("#mnuband", "mnutool");
        
        $("#contextmenu div[aria-labelledby='" + insertRefULParent + "']>ul").attr("id", insertRef.replace("#", ""));
        
    }
}

function menu_insertSubMenuItem(parentULID, NewLICaption, NewLIID, NewULID) {
	var insertRef = "#" + parentULID;
	$(insertRef).prepend("<li id='" + NewLIID + "'><a href='#'>" + NewLICaption + "</a><ul id='" + NewULID + "'></ul></li>");
}

function menu_sortULMenuItems(parentULID) {
	var ulID = "#" + parentULID + " li";
	$(ulID).sort(asc_sort).appendTo('.list');

	// accending sort
	function asc_sort(a, b) {
		return ($(b).text()) < ($(a).text());
	}

	// decending sort
	//function dec_sort(a, b) {
	//	return ($(b).text()) > ($(a).text());
	//}	
}

function menu_enableMenuItem(itemId, fNewSetting) {

	if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		//$("#" + itemId + " a:first").attr("disabled", "");
		$("#" + itemId + " a:first").removeAttr("disabled");
	} else {
		$("#" + itemId + " a:first").attr("disabled", "disabled");
		//$("#" + itemId + " a:first").css("color", "lightgray");
		$("#" + itemId + " a:first").css("font-weight", "lighter");

	}

}

function menu_toolbarEnableItem(itemId, fNewSetting) {
	
	var currSrc = $("#" + itemId + " img:first").attr("src");
	
		if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
			//apply disable icon
			if (currSrc.indexOf("HOVER") <= 0) {
				$("#" + itemId + " img:first").attr("src", currSrc.replace("DIS.png", "HOVER.png"));
				$("#" + itemId).removeClass("disabled");
			}
		} else {
			//apply disable icon
			if (currSrc.indexOf("DIS") <= 0) {
				$("#" + itemId + " img:first").attr("src", currSrc.replace("HOVER.png", "DIS.png"));
				$("#" + itemId).addClass("disabled");
			}
		}
}


function menu_setVisibleMenuItem(itemId, fNewSetting) {
	
    var sNewValue = "";

    if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
	    if ($("#" + itemId).hasClass("hidden")) {
		    $("#" + itemId + " a:first").show();
		    $("#" + itemId).removeClass("hidden");
	    }
    }
    else {
	    if (!$("#" + itemId).hasClass("hidden")) {
		    $("#" + itemId + " a:first").hide();
		    $("#" + itemId).addClass("hidden");
	    }
    }

	if (itemId == "mnutoolHistory") {
		$(".accordion").accordion("resize");
	}
}

function menu_SetmnutoolRecordPositionCaption(newCaption) {
	if (newCaption != null && newCaption.length > 0) $("#mnutoolRecordPosition span").text(newCaption);
}


function menu_toolCount(itemId) {
	return $("#" + itemId + " li").length;
}

function menu_setVisibletoolbarGroup(itemId, fNewSetting) {
	var sNewValue = "";

	if (fNewSetting == "True" || fNewSetting == true || fNewSetting == 1) {
		$("#" + itemId).parent().show();
	}
	else {
		$("#" + itemId).parent().hide();

	}

}

function menu_GetItemValue(itemID) {
    //return window.parent.frames("menuframe").document.all.item("txtSysPerm_EVENTLOG_DELETE").value;
    return $("#menuframe #" + itemID).val();
}


function applyJSTree(element) {
    //Add treeview functionality to all divs in the accordion
    if (element == undefined) element = "";

    $(".accordion div" + element).jstree({
        "themes": {
            "theme": "apple",
            "url": "../Scripts/jQuery/jsTree/theme/apple/style.css",
            "dots": false,
            "icons": true
        },
        types: {
            "types": {
                "disabled": {
                    "select_node": false,
                    "open_node": false,
                    "close_node": false,
                    "create_node": false,
                    "delete_node": false
                }
            }
        }
    });
}
