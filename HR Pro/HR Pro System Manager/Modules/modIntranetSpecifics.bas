Attribute VB_Name = "modIntranetSpecifics"
Option Explicit

Private Const msMobileCheckLogin_PROCEDURENAME = "spASRSysMobileCheckLogin"

Private mvar_fGeneralOK As Boolean
Private mvar_sGeneralMsg As String

Private mvar_sLoginColumn As String
Private mvar_sLoginTable As String
Private mvar_sUniqueEmailColumn As String
Private mvar_sLeavingDateColumn As String
Private mvar_sActivatedUserColumn As String
Private mvar_lngUniqueEmailColumn As Long
Private mvar_lngLeavingDateColumn As Long
Private mvar_lngActivatedUserColumn As Long


Public Sub DropMobileObjects()
  DropProcedure msMobileCheckLogin_PROCEDURENAME
End Sub



Public Function ConfigureMobileSpecifics() As Boolean
  ' Configure module specific objects (eg. stored procedures)
  On Error GoTo ErrorTrap
  
  Dim fOK As Boolean
  Dim sErrorMessage As String
  
  fOK = True
  
  mvar_fGeneralOK = True
  mvar_sGeneralMsg = ""
    

  fOK = ReadMobileParameters

  
  'Make sure that we drop the Mobile SPs
  DropMobileObjects
  
  
  ' Create the CheckLogin stored procedures.
  If fOK And mvar_fGeneralOK Then
    fOK = CreateSP_MobileCheckLogin
    If Not fOK Then
      DropProcedure msMobileCheckLogin_PROCEDURENAME
    End If
  End If
  
  
TidyUpAndExit:
  ConfigureMobileSpecifics = True
  Exit Function
  
ErrorTrap:
  OutputError "Error configuring Mobile specifics"
  fOK = False
  Resume TidyUpAndExit
  
End Function

Private Function ReadMobileParameters() As Boolean
  ' Read the configured Mobile parameters into member variables.
  On Error GoTo ErrorTrap
  
  Dim fOK As Boolean
  Dim lngLoginColumn As Long
  Dim lngLoginTable As Long
  Dim lngColumnID As Long
  Dim lngTableID As Long
  Dim sUser As String
  Dim sPassword As String
      
  fOK = True
  
  With recModuleSetup
    .Index = "idxModuleParameter"
    
    If fOK Then
      ' Get the login column
      lngLoginColumn = GetModuleSetting(gsMODULEKEY_MOBILE, gsPARAMETERKEY_LOGINNAME, 0)
   
      fOK = lngLoginColumn > 0
      If Not fOK Then
        mvar_sGeneralMsg = mvar_sGeneralMsg & vbCrLf & "  Login column not defined."
      End If
      
    End If
    
    If fOK Then
      lngLoginTable = GetTableIDFromColumnID(lngLoginColumn)
      mvar_sLoginColumn = GetColumnName(lngLoginColumn, True)
      mvar_sLoginTable = GetTableName(lngLoginTable)
   
      ' Get the Unique Email column.
      .Seek "=", gsMODULEKEY_MOBILE, gsPARAMETERKEY_UNIQUEEMAILCOLUMN
      If .NoMatch Then
        mvar_lngUniqueEmailColumn = 0
      Else
        mvar_lngUniqueEmailColumn = IIf(IsNull(!parametervalue), 0, val(!parametervalue))
        mvar_sUniqueEmailColumn = GetColumnName(mvar_lngUniqueEmailColumn, True)
      End If
    
      ' Get the Leaving Date column.
      .Seek "=", gsMODULEKEY_MOBILE, gsPARAMETERKEY_LEAVINGDATE
      If .NoMatch Then
        mvar_lngLeavingDateColumn = 0
      Else
        mvar_lngLeavingDateColumn = IIf(IsNull(!parametervalue), 0, val(!parametervalue))
        mvar_sLeavingDateColumn = GetColumnName(mvar_lngLeavingDateColumn, True)
      End If
      
      ' Get the Mobile Activated User column.
      .Seek "=", gsMODULEKEY_MOBILE, gsPARAMETERKEY_MOBILEACTIVATED
      If .NoMatch Then
        mvar_lngActivatedUserColumn = 0
      Else
        mvar_lngActivatedUserColumn = IIf(IsNull(!parametervalue), 0, val(!parametervalue))
        mvar_sActivatedUserColumn = GetColumnName(mvar_lngActivatedUserColumn, True)
      End If
      
      
    End If
    
  End With

TidyUpAndExit:
  ReadMobileParameters = fOK
  Exit Function
  
ErrorTrap:
  OutputError "Error reading mobile parameters"
  fOK = False
  Resume TidyUpAndExit
  
End Function



Private Function CreateSP_MobileCheckLogin() As Boolean
  ' Create the Check Login stored procedure.
  On Error GoTo ErrorTrap

  Dim fCreatedOK As Boolean
  Dim sProcSQL As String
  Dim iCount As Integer
  
  fCreatedOK = True

  ' Construct the stored procedure creation string.
  sProcSQL = "/* ------------------------------------------------ */" & vbNewLine & _
    "/* Mobile module stored procedure.         */" & vbNewLine & _
    "/* Automatically generated by the System manager.   */" & vbNewLine & _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "CREATE PROCEDURE [dbo].[" & msMobileCheckLogin_PROCEDURENAME & "](" & vbNewLine & _
    "  @psKeyParameter varchar(max)," & vbNewLine & _
    "  @piUserGroupID integer OUTPUT," & vbNewLine & _
    "  @psMessage varchar(max) OUTPUT" & vbNewLine & _
    "  ) " & vbNewLine & _
    "AS" & vbNewLine & _
    "BEGIN" & vbNewLine

  sProcSQL = sProcSQL & _
    "  DECLARE @iuserID integer," & vbNewLine & _
    "          @fActivated bit," & vbNewLine & _
    "          @sActualUserName varchar(255)," & vbNewLine & _
    "          @sRoleName varchar(255)," & vbNewLine & _
    "          @dtExpiryDate datetime," & vbNewLine & _
    "          @iCount integer;" & vbNewLine & _
    "  SET @iuserID = 0;" & vbNewLine & _
    "  SET @psMessage = '';" & vbNewLine & vbNewLine
 
  sProcSQL = sProcSQL & _
    "  -- Count records with the supplied login name" & vbNewLine & _
    "  SELECT @iCount = COUNT([ID])" & vbNewLine & _
    "    FROM [" & mvar_sLoginTable & "]" & vbNewLine & _
    "    WHERE ISNULL([" & mvar_sLoginColumn & "], '') = @psKeyParameter" & vbNewLine & _
    "    AND [" & mvar_sActivatedUserColumn & "] = 1" & vbNewLine & _
    "    AND DATEDIFF(d, GETDATE(), ISNULL([" & mvar_sLeavingDateColumn & "], GETDATE())) >= 0;" & vbNewLine & vbNewLine & _
    "  IF @iCount > 1" & vbNewLine & _
    "      SET @psMessage = 'Multiple accounts exist with this login.';" & vbNewLine & vbNewLine
 
 sProcSQL = sProcSQL & _
    "  -- Check other parameters" & vbNewLine & _
    "  SELECT @iuserID = [ID], @dtExpiryDate = [" & mvar_sLeavingDateColumn & "], @fActivated = [" & mvar_sActivatedUserColumn & "]" & vbNewLine & _
    "    FROM [" & mvar_sLoginTable & "]" & vbNewLine & _
    "    WHERE ISNULL([" & mvar_sLoginColumn & "], '') = @psKeyParameter" & vbNewLine & vbNewLine
    
  sProcSQL = sProcSQL & _
    "  IF @psMessage = '' AND @iuserID = 0" & vbNewLine & _
    "      SET @psMessage = 'Incorrect e-mail / password combination.';" & vbNewLine & _
    "  IF @psMessage = '' AND ISNULL(@fActivated, 0)  = 0" & vbNewLine & _
    "      SET @psMessage = 'Account not activated.';" & vbNewLine & _
    "  IF @psMessage = '' AND DATEDIFF(d, GETDATE(), ISNULL(@dtExpiryDate, GETDATE())) < 0" & vbNewLine & _
    "      SET @psMessage = 'Account Expired.';" & vbNewLine

  sProcSQL = sProcSQL & _
    "  EXEC dbo.spASRIntGetActualUserDetailsForLogin" & vbNewLine & _
    "      @psKeyParameter," & vbNewLine & _
    "      @psKeyParameter OUTPUT," & vbNewLine & _
    "      @sRoleName OUTPUT," & vbNewLine & _
    "      @piUserGroupID OUTPUT" & vbNewLine & vbNewLine & _
    "  IF ISNULL(@piUserGroupID,0) = 0 SET @psMessage = 'No valid SQL account found.';" & vbNewLine & vbNewLine
    
  sProcSQL = sProcSQL & _
    "END;"

  gADOCon.Execute sProcSQL, , adExecuteNoRecords

TidyUpAndExit:
  CreateSP_MobileCheckLogin = fCreatedOK
  Exit Function

ErrorTrap:
  fCreatedOK = False
  OutputError "Error creating Check Mobile Login stored procedure (Mobile)"
  Resume TidyUpAndExit

End Function


