Attribute VB_Name = "modHierarchySpecifics"
Option Explicit

Private Enum HierarchyFunctions
  HIER_FN_IsPersonnelSubordinateOfUser = 1
  HIER_FN_IsPostSubordinateOfUser = 3
  HIER_FN_HasPersonnelSubordinateUser = 5
  HIER_FN_HasPostSubordinateUser = 7
End Enum

Private Const BY_ID_PREFIX = "ByID_"

Private mvar_fGeneralOK As Boolean
Private mvar_sGeneralMsg As String

' Hierarchy table parameters
Private mvar_lngHierarchyTableID As Long
Private mvar_sHierarchyTableName As String
Private mvar_lngIdentifyingColumnID As Long
Private mvar_sIdentifyingColumnName As String
Private mvar_lngReportsToColumnID As Long
Private mvar_sReportsToColumnName As String
Private mvar_sIdentifyingColumnTypeCode As String
Private mvar_fCollate As Boolean

' Personnel table parameters
Private mvar_lngPostAllocationTableID As Long
Private mvar_sPostAllocationTableName As String
Private mvar_lngStartDateColumnID As Long
Private mvar_sStartDateColumnName As String
Private mvar_lngEndDateColumnID As Long
Private mvar_sEndDateColumnName As String

' Personnel table parameters
Private mvar_lngPersonnelTableID As Long
Private mvar_sPersonnelTableName As String
Private mvar_lngLoginColumnID As Long
Private mvar_lngSecondLoginColumnID As Long
Private mvar_sLoginColumnName As String
Private mvar_sSecondLoginColumnName As String

Private mvar_fPostBased As Boolean

' Drop all the existing hierarchy specifics
Public Function DropHierarchySpecifics() As Boolean

  On Error GoTo ErrorTrap
  Dim bOK As Boolean
  
  bOK = True
  
  ' Drop any existing UDFs.
  UDF_Drop HIER_FN_IsPersonnelSubordinateOfUser
  UDF_Drop HIER_FN_IsPostSubordinateOfUser
  UDF_Drop HIER_FN_HasPersonnelSubordinateUser
  UDF_Drop HIER_FN_HasPostSubordinateUser
  
  UDF_Drop HIER_FN_IsPersonnelSubordinateOfUser, BY_ID_PREFIX
  UDF_Drop HIER_FN_IsPostSubordinateOfUser, BY_ID_PREFIX
  UDF_Drop HIER_FN_HasPersonnelSubordinateUser, BY_ID_PREFIX
  UDF_Drop HIER_FN_HasPostSubordinateUser, BY_ID_PREFIX

TidyUpAndExit:
  DropHierarchySpecifics = bOK
  Exit Function
  
ErrorTrap:
  OutputError "Error dropping Hierarchy specifics"
  bOK = False
  Resume TidyUpAndExit

End Function

Public Function ConfigureHierarchySpecifics() As Boolean
  ' Configure module specific objects (eg. stored procedures)
  On Error GoTo ErrorTrap
  
  Dim fOK As Boolean
  Dim sErrorMessage As String
  
  mvar_fGeneralOK = True
  mvar_sGeneralMsg = ""
  
  fOK = DropHierarchySpecifics
  fOK = ReadParameters
  
  ' Create the UDFs.
  If fOK Then
    fOK = CreateUDF_IsPersonnelSubordinateOfUser
  End If
  If fOK Then
    fOK = CreateUDF_IsPersonnelSubordinateOfUser(True)
  End If

  If fOK Then
    fOK = CreateUDF_IsPostSubordinateOfUser
  End If
  If fOK Then
    fOK = CreateUDF_IsPostSubordinateOfUser(True)
  End If

  If fOK Then
    fOK = CreateUDF_HasPersonnelSubordinateUser
  End If
  If fOK Then
    fOK = CreateUDF_HasPersonnelSubordinateUser(True)
  End If

  If fOK Then
    fOK = CreateUDF_HasPostSubordinateUser
  End If
  If fOK Then
    fOK = CreateUDF_HasPostSubordinateUser(True)
  End If

  If fOK Then
    sErrorMessage = ""
    If (mvar_lngHierarchyTableID > 0) And (Not mvar_fGeneralOK) Then
      sErrorMessage = "Hierarchy specifics not correctly configured." & vbNewLine & _
        "Some functionality will be disabled if you do not change your configuration." & mvar_sGeneralMsg

      fOK = (OutputMessage(sErrorMessage & vbNewLine & vbNewLine & "Continue saving changes ?") = vbYes)
    End If
  End If

TidyUpAndExit:
  ConfigureHierarchySpecifics = fOK
  Exit Function
  
ErrorTrap:
  OutputError "Error configuring Hierarchy specifics"
  fOK = False
  Resume TidyUpAndExit

End Function



Private Function CreateUDF_IsPostSubordinateOfUser(Optional pvByID As Variant) As Boolean
  On Error GoTo ErrorTrap

  Dim fCreatedOK As Boolean
  Dim sUDFSQL As String
  Dim fValidConfiguration As Boolean
  Dim fByID As Boolean
  Dim sPrefix As String
  
  If IsMissing(pvByID) Then
    fByID = False
  Else
    fByID = CBool(pvByID)
  End If
  
  If fByID Then
    sPrefix = BY_ID_PREFIX
  End If
  
  fCreatedOK = True
  fValidConfiguration = True

  If (mvar_lngHierarchyTableID = 0) Or _
    (mvar_lngIdentifyingColumnID = 0) Or _
    (mvar_lngReportsToColumnID = 0) Or _
    ((mvar_lngLoginColumnID = 0) And (mvar_lngSecondLoginColumnID = 0)) Then
    fValidConfiguration = False
  End If
  
  If mvar_fPostBased Then
    If (mvar_lngPersonnelTableID = 0) Or _
      (mvar_lngPostAllocationTableID = 0) Then
      fValidConfiguration = False
    End If
  End If
  
  sUDFSQL = _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "/* Hierarchy module user defined function.   */" & vbNewLine & _
    "/* Automatically generated by the System manager.   */" & vbNewLine & _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "CREATE FUNCTION dbo." & ObjectName(HIER_FN_IsPostSubordinateOfUser, True, sPrefix) & " (" & vbNewLine & _
    IIf(fByID, "    @piID integer" & vbNewLine, "") & _
    ")" & vbNewLine & _
    "RETURNS @results TABLE (id integer)" & vbNewLine & _
    "WITH SCHEMABINDING" & vbNewLine & _
    "AS" & vbNewLine & _
    "BEGIN" & vbNewLine & _
    "    DECLARE @iRowsAdded integer," & vbNewLine & _
    "        @sUserName varchar(MAX)," & vbNewLine & _
    "        @sSecondUserName varchar(MAX)," & vbNewLine & _
    "        @dtDate datetime," & vbNewLine & _
    "        @iCount integer" & vbNewLine & vbNewLine

'  sUDFSQL = sUDFSQL & "    SELECT @dtDate = [dbo].[udfASRGetDate]()" & vbNewLine & vbNewLine
  sUDFSQL = sUDFSQL & "    SELECT @dtDate = GETDATE();" & vbNewLine & vbNewLine

  sUDFSQL = sUDFSQL & _
    "    DECLARE @postSubordinates TABLE (" & vbNewLine & _
    "        identifier " & mvar_sIdentifyingColumnTypeCode & IIf(mvar_fCollate, " COLLATE database_default", "") & "," & vbNewLine & _
    "        id integer PRIMARY KEY CLUSTERED," & vbNewLine & _
    "        processed tinyint default 0" & vbNewLine & _
    "    );" & vbNewLine & vbNewLine

  If fValidConfiguration Then
    If fByID Then
      sUDFSQL = sUDFSQL & _
        "    SELECT @sUserName = ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ",'')," & vbNewLine & _
        "        @sSecondUserName = " & IIf(Len(mvar_sSecondLoginColumnName) > 0, "ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ",'')", "''") & vbNewLine & _
        "    FROM " & mvar_sPersonnelTableName & vbNewLine & _
        "    WHERE " & mvar_sPersonnelTableName & ".ID = @piID" & vbNewLine & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "    SET @sUserName = system_user" & vbNewLine & _
        "    SET @sSecondUserName = ''" & vbNewLine & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & _
      "    INSERT @postSubordinates" & vbNewLine & _
      "        SELECT DISTINCT " & mvar_sIdentifyingColumnName & ", id, 0" & vbNewLine & _
      "        FROM " & mvar_sHierarchyTableName & vbNewLine & _
      "        WHERE " & mvar_sReportsToColumnName & " IN (SELECT " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & vbNewLine
    
    If mvar_fPostBased Then
      sUDFSQL = sUDFSQL & _
        "            INNER JOIN " & mvar_sPostAllocationTableName & vbNewLine & _
        "                ON " & mvar_sHierarchyTableName & ".id = " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngHierarchyTableID) & vbNewLine & _
        "            INNER JOIN " & mvar_sPersonnelTableName & vbNewLine & _
        "                ON " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngPersonnelTableID) & " = " & mvar_sPersonnelTableName & ".id" & vbNewLine & _
        "                    AND (((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"

      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                    OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName))))"
      Else
        sUDFSQL = sUDFSQL & ")" & vbNewLine
      End If

      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))"
      End If

      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " >= @dtDate))"
      End If
    
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "            WHERE ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"
    
      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName)))"
      End If
      
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & vbNewLine & _
      "    SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "    WHILE @iRowsAdded > 0" & vbNewLine & _
      "    BEGIN" & vbNewLine & _
      "        UPDATE @postSubordinates" & vbNewLine & _
      "        SET processed = 1" & vbNewLine & _
      "        WHERE processed = 0" & vbNewLine & vbNewLine
      
    sUDFSQL = sUDFSQL & _
      "        INSERT @postSubordinates" & vbNewLine & _
      "            SELECT DISTINCT " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & ", " & mvar_sHierarchyTableName & ".id, 0" & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & ", @postSubordinates s" & vbNewLine & _
      "            WHERE " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & " = s.identifier" & vbNewLine & _
      "                AND LEN(LTRIM(RTRIM(s.identifier))) > 0" & vbNewLine & _
      "                AND s.processed = 1" & vbNewLine & _
      "                AND " & mvar_sHierarchyTableName & ".id NOT IN (SELECT id FROM @postSubordinates)" & vbNewLine & vbNewLine & _
      "        SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        UPDATE @postSubordinates" & vbNewLine & _
      "        SET processed = 2" & vbNewLine & _
      "        WHERE processed = 1" & vbNewLine & _
      "    END" & vbNewLine & vbNewLine
  
    sUDFSQL = sUDFSQL & _
      "    INSERT @results" & vbNewLine & _
      "        SELECT id" & vbNewLine & _
      "        FROM @postSubordinates" & vbNewLine & vbNewLine
  End If
  
  sUDFSQL = sUDFSQL & _
    "    RETURN" & vbNewLine & _
    "END"

  If gbEnableUDFFunctions Then gADOCon.Execute sUDFSQL, , adExecuteNoRecords
  
TidyUpAndExit:
  On Error GoTo ErrorTrap
  CreateUDF_IsPostSubordinateOfUser = fCreatedOK
  Exit Function

ErrorTrap:
  fCreatedOK = False
  OutputError "Error creating 'Is Post Subordinate Of User' user defined function (Hierarchy)"
  Resume TidyUpAndExit

End Function


Private Function CreateUDF_HasPostSubordinateUser(Optional pvByID As Variant) As Boolean
  On Error GoTo ErrorTrap

  Dim fCreatedOK As Boolean
  Dim sUDFSQL As String
  Dim fValidConfiguration As Boolean
  Dim fByID As Boolean
  Dim sPrefix As String
  
  If IsMissing(pvByID) Then
    fByID = False
  Else
    fByID = CBool(pvByID)
  End If
  
  If fByID Then
    sPrefix = BY_ID_PREFIX
  End If
  
  fCreatedOK = True
  fValidConfiguration = True

  If (mvar_lngHierarchyTableID = 0) Or _
    (mvar_lngIdentifyingColumnID = 0) Or _
    (mvar_lngReportsToColumnID = 0) Or _
    (mvar_lngLoginColumnID = 0) Then
    fValidConfiguration = False
  End If
  
  If mvar_fPostBased Then
    If (mvar_lngPersonnelTableID = 0) Or _
      (mvar_lngPostAllocationTableID = 0) Then
      fValidConfiguration = False
    End If
  End If
  
  sUDFSQL = _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "/* Hierarchy module user defined function.   */" & vbNewLine & _
    "/* Automatically generated by the System manager.   */" & vbNewLine & _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "CREATE FUNCTION dbo." & ObjectName(HIER_FN_HasPostSubordinateUser, True, sPrefix) & " (" & vbNewLine & _
    IIf(fByID, "    @piID integer" & vbNewLine, "") & _
    ")" & vbNewLine & _
    "RETURNS @results TABLE (id integer)" & vbNewLine & _
    "WITH SCHEMABINDING" & vbNewLine & _
    "AS" & vbNewLine & _
    "BEGIN" & vbNewLine & _
    "    DECLARE @iRowsAdded integer," & vbNewLine & _
    "        @sUserName varchar(MAX)," & vbNewLine & _
    "        @sSecondUserName varchar(MAX)," & vbNewLine & _
    "        @dtDate datetime," & vbNewLine & _
    "        @iCount integer" & vbNewLine & vbNewLine

'  sUDFSQL = sUDFSQL & "    SELECT @dtDate = [dbo].[udfASRGetDate]()" & vbNewLine & vbNewLine
  sUDFSQL = sUDFSQL & "    SELECT @dtDate = GETDATE();" & vbNewLine & vbNewLine

  sUDFSQL = sUDFSQL & _
    "    DECLARE @postSuperordinates TABLE (" & vbNewLine & _
    "        reportsTo " & mvar_sIdentifyingColumnTypeCode & IIf(mvar_fCollate, " COLLATE database_default", "") & "," & vbNewLine & _
    "        id integer PRIMARY KEY CLUSTERED," & vbNewLine & _
    "        processed tinyint default 0" & vbNewLine & _
    "    )" & vbNewLine & vbNewLine

  If fValidConfiguration Then
    If fByID Then
      sUDFSQL = sUDFSQL & _
        "    SELECT @sUserName = ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ",'')," & vbNewLine & _
        "        @sSecondUserName = " & IIf(Len(mvar_sSecondLoginColumnName) > 0, "ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ",'')", "''") & vbNewLine & _
        "    FROM " & mvar_sPersonnelTableName & vbNewLine & _
        "    WHERE " & mvar_sPersonnelTableName & ".ID = @piID" & vbNewLine & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "    SET @sUserName = system_user" & vbNewLine & _
        "    SET @sSecondUserName = ''" & vbNewLine & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & _
      "    INSERT @postSuperordinates" & vbNewLine & _
      "        SELECT DISTINCT " & mvar_sReportsToColumnName & ", id, 0" & vbNewLine & _
      "        FROM " & mvar_sHierarchyTableName & vbNewLine & _
      "        WHERE " & mvar_sIdentifyingColumnName & " IN (SELECT " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & vbNewLine

    If mvar_fPostBased Then
      sUDFSQL = sUDFSQL & _
        "            INNER JOIN " & mvar_sPostAllocationTableName & vbNewLine & _
        "                ON " & mvar_sHierarchyTableName & ".id = " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngHierarchyTableID) & vbNewLine & _
        "            INNER JOIN " & mvar_sPersonnelTableName & vbNewLine & _
        "                ON " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngPersonnelTableID) & " = " & mvar_sPersonnelTableName & ".id" & vbNewLine & _
        "                    AND (((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"

      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                    OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName))))"
      Else
        sUDFSQL = sUDFSQL & ")" & vbNewLine
      End If

      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))"
      End If

      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " >= @dtDate))"
      End If

      sUDFSQL = sUDFSQL & ")" & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "            WHERE ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"
    
      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName)))"
      End If
      
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    End If

    sUDFSQL = sUDFSQL & vbNewLine & _
      "    SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "    WHILE @iRowsAdded > 0" & vbNewLine & _
      "    BEGIN" & vbNewLine & _
      "        UPDATE @postSuperordinates" & vbNewLine & _
      "        SET processed = 1" & vbNewLine & _
      "        WHERE processed = 0" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        INSERT @postSuperordinates" & vbNewLine & _
      "            SELECT DISTINCT " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & ", " & mvar_sHierarchyTableName & ".id, 0" & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & ", @postSuperordinates s" & vbNewLine & _
      "            WHERE " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & " = s.reportsTo" & vbNewLine & _
      "                AND LEN(LTRIM(RTRIM(s.reportsTo))) > 0" & vbNewLine & _
      "                AND s.processed = 1" & vbNewLine & _
      "                AND " & mvar_sHierarchyTableName & ".id NOT IN (SELECT id FROM @postSuperordinates)" & vbNewLine & vbNewLine & _
      "        SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        UPDATE @postSuperordinates" & vbNewLine & _
      "        SET processed = 2" & vbNewLine & _
      "        WHERE processed = 1" & vbNewLine & _
      "    END" & vbNewLine & vbNewLine
  
    sUDFSQL = sUDFSQL & _
      "    INSERT @results" & vbNewLine & _
      "        SELECT id" & vbNewLine & _
      "        FROM @postSuperordinates" & vbNewLine & vbNewLine
  End If

  sUDFSQL = sUDFSQL & _
    "    RETURN" & vbNewLine & _
    "END"

  If gbEnableUDFFunctions Then gADOCon.Execute sUDFSQL, , adExecuteNoRecords
  
TidyUpAndExit:
  On Error GoTo ErrorTrap
  CreateUDF_HasPostSubordinateUser = fCreatedOK
  Exit Function

ErrorTrap:
  fCreatedOK = False
  OutputError "Error creating 'Has Post Subordinate User' user defined function (Hierarchy)"
  Resume TidyUpAndExit

End Function



Private Function CreateUDF_IsPersonnelSubordinateOfUser(Optional pvByID As Variant) As Boolean
  On Error GoTo ErrorTrap

  Dim fCreatedOK As Boolean
  Dim sUDFSQL As String
  Dim fValidConfiguration As Boolean
  Dim sTempBaseTable As String
  Dim fByID As Boolean
  Dim sPrefix As String
  
  If IsMissing(pvByID) Then
    fByID = False
  Else
    fByID = CBool(pvByID)
  End If
  
  If fByID Then
    sPrefix = BY_ID_PREFIX
  End If
  
  fCreatedOK = True
  fValidConfiguration = True
  sTempBaseTable = "@personnelSubordinates"

  If (mvar_lngHierarchyTableID = 0) Or _
    (mvar_lngIdentifyingColumnID = 0) Or _
    (mvar_lngReportsToColumnID = 0) Or _
    (mvar_lngLoginColumnID = 0) Then
    
    fValidConfiguration = False
  End If
  
  If mvar_fPostBased Then
    sTempBaseTable = "@postSubordinates"

    If (mvar_lngPersonnelTableID = 0) Or _
      (mvar_lngPostAllocationTableID = 0) Then
      fValidConfiguration = False
    End If
  End If
  
  sUDFSQL = _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "/* Hierarchy module user defined function.   */" & vbNewLine & _
    "/* Automatically generated by the System manager.   */" & vbNewLine & _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "CREATE FUNCTION dbo." & ObjectName(HIER_FN_IsPersonnelSubordinateOfUser, True, sPrefix) & " (" & vbNewLine & _
    IIf(fByID, "    @piID integer" & vbNewLine, "") & _
    ")" & vbNewLine & _
    "RETURNS @results TABLE (id integer)" & vbNewLine & _
    "WITH SCHEMABINDING" & vbNewLine & _
    "AS" & vbNewLine & _
    "BEGIN" & vbNewLine & _
    "    DECLARE @iRowsAdded integer," & vbNewLine & _
    "        @sUserName varchar(MAX)," & vbNewLine & _
    "        @sSecondUserName varchar(MAX)," & vbNewLine & _
    "        @dtDate datetime," & vbNewLine & _
    "        @iCount integer" & vbNewLine & vbNewLine

'  sUDFSQL = sUDFSQL & "    SELECT @dtDate = [dbo].[udfASRGetDate]()" & vbNewLine & vbNewLine
  sUDFSQL = sUDFSQL & "    SELECT @dtDate = GETDATE();" & vbNewLine & vbNewLine

  sUDFSQL = sUDFSQL & _
    "    DECLARE " & sTempBaseTable & " TABLE (" & vbNewLine & _
    "        identifier " & mvar_sIdentifyingColumnTypeCode & IIf(mvar_fCollate, " COLLATE database_default", "") & "," & vbNewLine & _
    "        id integer PRIMARY KEY CLUSTERED," & vbNewLine & _
    "        processed tinyint default 0" & vbNewLine & _
    "    )" & vbNewLine & vbNewLine

  If fValidConfiguration Then
    If fByID Then
      sUDFSQL = sUDFSQL & _
        "    SELECT @sUserName = ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')," & vbNewLine & _
        "        @sSecondUserName = " & IIf(Len(mvar_sSecondLoginColumnName) > 0, "ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ",'')", "''") & vbNewLine & _
        "    FROM " & mvar_sPersonnelTableName & vbNewLine & _
        "    WHERE " & mvar_sPersonnelTableName & ".ID = @piID" & vbNewLine & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "    SET @sUserName = system_user" & vbNewLine & _
        "    SET @sSecondUserName = ''" & vbNewLine & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & _
      "    INSERT " & sTempBaseTable & vbNewLine & _
      "        SELECT DISTINCT " & mvar_sIdentifyingColumnName & ", id, 0" & vbNewLine & _
      "        FROM " & mvar_sHierarchyTableName & vbNewLine & _
      "        WHERE " & mvar_sReportsToColumnName & " IN (SELECT " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & vbNewLine
    
    If mvar_fPostBased Then
      sUDFSQL = sUDFSQL & _
        "            INNER JOIN " & mvar_sPostAllocationTableName & vbNewLine & _
        "                ON " & mvar_sHierarchyTableName & ".id = " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngHierarchyTableID) & vbNewLine & _
        "            INNER JOIN " & mvar_sPersonnelTableName & vbNewLine & _
        "                ON " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngPersonnelTableID) & " = " & mvar_sPersonnelTableName & ".id" & vbNewLine & _
        "                    AND (((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"

      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                    OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName))))"
      Else
        sUDFSQL = sUDFSQL & ")" & vbNewLine
      End If
    
      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((@dtDate IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))"
      End If

      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " >= @dtDate))"
      End If
    
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "            WHERE ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"
    
      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                    AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                        OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName)))"
      End If
    
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & vbNewLine & _
      "    SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "    WHILE @iRowsAdded > 0" & vbNewLine & _
      "    BEGIN" & vbNewLine & _
      "        UPDATE " & sTempBaseTable & vbNewLine & _
      "        SET processed = 1" & vbNewLine & _
      "        WHERE processed = 0" & vbNewLine & vbNewLine
      
    sUDFSQL = sUDFSQL & _
      "        INSERT " & sTempBaseTable & vbNewLine & _
      "            SELECT DISTINCT " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & ", " & mvar_sHierarchyTableName & ".id, 0" & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & ", " & sTempBaseTable & " s" & vbNewLine & _
      "            WHERE " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & " = s.identifier" & vbNewLine & _
      "                AND LEN(LTRIM(RTRIM(s.identifier))) > 0" & vbNewLine & _
      "                AND s.processed = 1" & vbNewLine & _
      "                AND " & mvar_sHierarchyTableName & ".id NOT IN (SELECT id FROM " & sTempBaseTable & ")" & vbNewLine & vbNewLine & _
      "        SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        UPDATE " & sTempBaseTable & vbNewLine & _
      "        SET processed = 2" & vbNewLine & _
      "        WHERE processed = 1" & vbNewLine & _
      "    END" & vbNewLine & vbNewLine
  
    If mvar_fPostBased Then
      ' Need to get the Personnel records for the Post records we've determined
      ' to be the subordinates of the given Identifier.
      sUDFSQL = sUDFSQL & _
        "    INSERT @results" & vbNewLine & _
        "        SELECT ID_" & mvar_lngPersonnelTableID & vbNewLine & _
        "        FROM " & mvar_sPostAllocationTableName & vbNewLine & _
        "        WHERE ID_" & mvar_lngHierarchyTableID & " IN (" & vbNewLine & _
        "            SELECT id" & vbNewLine & _
        "            FROM @postSubordinates)" & vbNewLine

      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & _
          "            AND ((" & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                OR (" & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))" & vbNewLine
      End If
      
      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & _
          "            AND ((" & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                OR (" & mvar_sEndDateColumnName & " >= @dtDate))" & vbNewLine
      End If
    Else
      sUDFSQL = sUDFSQL & _
        "    INSERT @results" & vbNewLine & _
        "        SELECT id" & vbNewLine & _
        "        FROM @personnelSubordinates" & vbNewLine
    End If
  End If

  sUDFSQL = sUDFSQL & vbNewLine & _
    "    RETURN" & vbNewLine & _
    "END"

  If gbEnableUDFFunctions Then gADOCon.Execute sUDFSQL, , adExecuteNoRecords
  
TidyUpAndExit:
  On Error GoTo ErrorTrap
  CreateUDF_IsPersonnelSubordinateOfUser = fCreatedOK
  Exit Function

ErrorTrap:
  fCreatedOK = False
  OutputError "Error creating 'Is Personnel Subordinate Of User' user defined function (Hierarchy)"
  Resume TidyUpAndExit

End Function



Private Function CreateUDF_HasPersonnelSubordinateUser(Optional pvByID As Variant) As Boolean
  On Error GoTo ErrorTrap

  Dim fCreatedOK As Boolean
  Dim sUDFSQL As String
  Dim fValidConfiguration As Boolean
  Dim sTempBaseTable As String
  Dim fByID As Boolean
  Dim sPrefix As String
  
  If IsMissing(pvByID) Then
    fByID = False
  Else
    fByID = CBool(pvByID)
  End If
  
  If fByID Then
    sPrefix = BY_ID_PREFIX
  End If
  
  fCreatedOK = True
  fValidConfiguration = True
  sTempBaseTable = "@personnelSuperordinates"

  If (mvar_lngHierarchyTableID = 0) Or _
    (mvar_lngIdentifyingColumnID = 0) Or _
    (mvar_lngReportsToColumnID = 0) Or _
    (mvar_lngLoginColumnID = 0) Then
    fValidConfiguration = False
  End If
  
  If mvar_fPostBased Then
    sTempBaseTable = "@postSuperordinates"

    If (mvar_lngPersonnelTableID = 0) Or _
      (mvar_lngPostAllocationTableID = 0) Then
      fValidConfiguration = False
    End If
  End If
  
  sUDFSQL = _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "/* Hierarchy module user defined function.   */" & vbNewLine & _
    "/* Automatically generated by the System manager.   */" & vbNewLine & _
    "/* ------------------------------------------------ */" & vbNewLine & _
    "CREATE FUNCTION dbo." & ObjectName(HIER_FN_HasPersonnelSubordinateUser, True, sPrefix) & " (" & vbNewLine & _
    IIf(fByID, "    @piID integer" & vbNewLine, "") & _
    ")" & vbNewLine & _
    "RETURNS @results TABLE (id integer)" & vbNewLine & _
    "WITH SCHEMABINDING" & vbNewLine & _
    "AS" & vbNewLine & _
    "BEGIN" & vbNewLine & _
    "    DECLARE @iRowsAdded integer," & vbNewLine & _
    "        @sUserName varchar(MAX)," & vbNewLine & _
    "        @sSecondUserName varchar(MAX)," & vbNewLine & _
    "        @dtDate datetime," & vbNewLine & _
    "        @iCount integer" & vbNewLine & vbNewLine

  'sUDFSQL = sUDFSQL & "    SELECT @dtDate = [dbo].[udfASRGetDate]()" & vbNewLine & vbNewLine
  sUDFSQL = sUDFSQL & "    SELECT @dtDate = GETDATE();" & vbNewLine & vbNewLine

  sUDFSQL = sUDFSQL & _
    "    DECLARE " & sTempBaseTable & " TABLE (" & vbNewLine & _
    "        reportsTo " & mvar_sIdentifyingColumnTypeCode & IIf(mvar_fCollate, " COLLATE database_default", "") & "," & vbNewLine & _
    "        id integer PRIMARY KEY CLUSTERED," & vbNewLine & _
    "        processed tinyint default 0" & vbNewLine & _
    "    )" & vbNewLine & vbNewLine

  If fValidConfiguration Then
    If fByID Then
      sUDFSQL = sUDFSQL & _
        "    SELECT @sUserName = ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ",'')," & vbNewLine & _
        "        @sSecondUserName = " & IIf(Len(mvar_sSecondLoginColumnName) > 0, "ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ",'')", "''") & vbNewLine & _
        "    FROM " & mvar_sPersonnelTableName & vbNewLine & _
        "    WHERE " & mvar_sPersonnelTableName & ".ID = @piID" & vbNewLine & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "    SET @sUserName = system_user" & vbNewLine & _
        "    SET @sSecondUserName = ''" & vbNewLine & vbNewLine
    End If
    
    sUDFSQL = sUDFSQL & _
      "    INSERT " & sTempBaseTable & vbNewLine & _
      "        SELECT DISTINCT " & mvar_sReportsToColumnName & ", id, 0" & vbNewLine & _
      "        FROM " & mvar_sHierarchyTableName & vbNewLine & _
      "        WHERE " & mvar_sIdentifyingColumnName & " IN (SELECT " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & vbNewLine

    If mvar_fPostBased Then
      sUDFSQL = sUDFSQL & _
        "            INNER JOIN " & mvar_sPostAllocationTableName & vbNewLine & _
        "                ON " & mvar_sHierarchyTableName & ".id = " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngHierarchyTableID) & vbNewLine & _
        "            INNER JOIN " & mvar_sPersonnelTableName & vbNewLine & _
        "                ON " & mvar_sPostAllocationTableName & ".id_" & CStr(mvar_lngPersonnelTableID) & " = " & mvar_sPersonnelTableName & ".id" & vbNewLine & _
        "                    AND (((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"

      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                    OR ((LEN(ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                        AND ((ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                            OR (ISNULL(" & mvar_sPersonnelTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName))))"
      Else
        sUDFSQL = sUDFSQL & ")" & vbNewLine
      End If

      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))"
      End If

      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                AND ((" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                    OR (" & mvar_sPostAllocationTableName & "." & mvar_sEndDateColumnName & " >= @dtDate))"
      End If

      sUDFSQL = sUDFSQL & ")" & vbNewLine
    Else
      sUDFSQL = sUDFSQL & _
        "            WHERE ((LEN(ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sLoginColumnName & ", '')) > 0)" & vbNewLine & _
        "                    AND ((ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
        "                        OR (ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sLoginColumnName & ", '') = @sSecondUserName)))"
    
      If (Len(mvar_sSecondLoginColumnName) > 0) Then
        sUDFSQL = sUDFSQL & vbNewLine & _
          "                OR ((LEN(ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sSecondLoginColumnName & ", '')) > 0)" & vbNewLine & _
          "                    AND ((ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sUserName)" & vbNewLine & _
          "                        OR (ISNULL(" & mvar_sHierarchyTableName & "." & mvar_sSecondLoginColumnName & ", '') = @sSecondUserName)))"
      End If
      
      sUDFSQL = sUDFSQL & ")" & vbNewLine
    End If

    sUDFSQL = sUDFSQL & vbNewLine & _
      "    SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "    WHILE @iRowsAdded > 0" & vbNewLine & _
      "    BEGIN" & vbNewLine & _
      "        UPDATE " & sTempBaseTable & vbNewLine & _
      "        SET processed = 1" & vbNewLine & _
      "        WHERE processed = 0" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        INSERT " & sTempBaseTable & vbNewLine & _
      "            SELECT DISTINCT " & mvar_sHierarchyTableName & "." & mvar_sReportsToColumnName & ", " & mvar_sHierarchyTableName & ".id, 0" & vbNewLine & _
      "            FROM " & mvar_sHierarchyTableName & ", " & sTempBaseTable & " s" & vbNewLine & _
      "            WHERE " & mvar_sHierarchyTableName & "." & mvar_sIdentifyingColumnName & " = s.reportsTo" & vbNewLine & _
      "                AND LEN(LTRIM(RTRIM(s.reportsTo))) > 0" & vbNewLine & _
      "                AND s.processed = 1" & vbNewLine & _
      "                AND " & mvar_sHierarchyTableName & ".id NOT IN (SELECT id FROM " & sTempBaseTable & ")" & vbNewLine & vbNewLine & _
      "        SET @iRowsAdded = @@rowcount" & vbNewLine & vbNewLine

    sUDFSQL = sUDFSQL & _
      "        UPDATE " & sTempBaseTable & vbNewLine & _
      "        SET processed = 2" & vbNewLine & _
      "        WHERE processed = 1" & vbNewLine & _
      "    END" & vbNewLine & vbNewLine

    If mvar_fPostBased Then
      ' Need to get the Personnel records for the Post records we've determined
      ' to be the superordinates of the given Identifier.
      sUDFSQL = sUDFSQL & _
        "    INSERT @results" & vbNewLine & _
        "        SELECT ID_" & mvar_lngPersonnelTableID & vbNewLine & _
        "        FROM " & mvar_sPostAllocationTableName & vbNewLine & _
        "        WHERE ID_" & mvar_lngHierarchyTableID & " IN (" & vbNewLine & _
        "            SELECT id" & vbNewLine & _
        "            FROM @postSuperordinates)" & vbNewLine

      If mvar_lngStartDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & _
          "            AND ((" & mvar_sStartDateColumnName & " IS NULL)" & vbNewLine & _
          "                OR (" & mvar_sStartDateColumnName & " < dateadd(dd,1,@dtDate)))" & vbNewLine
      End If

      If mvar_lngEndDateColumnID > 0 Then
        sUDFSQL = sUDFSQL & _
          "            AND ((" & mvar_sEndDateColumnName & " IS NULL)" & vbNewLine & _
          "                OR (" & mvar_sEndDateColumnName & " >= @dtDate))" & vbNewLine
      End If
    Else
      sUDFSQL = sUDFSQL & _
        "    INSERT @results" & vbNewLine & _
        "        SELECT id" & vbNewLine & _
        "        FROM @personnelSuperordinates" & vbNewLine
    End If
  End If

  sUDFSQL = sUDFSQL & vbNewLine & _
    "    RETURN" & vbNewLine & _
    "END"

  If gbEnableUDFFunctions Then gADOCon.Execute sUDFSQL, , adExecuteNoRecords
  
TidyUpAndExit:
  On Error GoTo ErrorTrap
  CreateUDF_HasPersonnelSubordinateUser = fCreatedOK
  Exit Function

ErrorTrap:
  fCreatedOK = False
  OutputError "Error creating 'Has Personnel Subordinate User' user defined function (Hierarchy)"
  Resume TidyUpAndExit

End Function




Public Function HierarchyFunctionConfigured(plngFunctionID As Long) As Boolean
  ' Return a boolean value showing if the module parameters are correctly configured
  ' for the given Hierarchy function.
  Dim fValid As Boolean
  Dim fPostBasedSystem As Boolean
  Dim lngLoginColumnID As Long
  Dim lngSecondLoginColumnID As Long
  Dim lngPostAllocationTableID As Long
  Dim lngReportsToColumnID As Long
  Dim lngIdentifyingColumnID As Long
  Dim lngHierarchyTableID As Long
  Dim lngPersonnelTableID As Long
  
  fValid = False
  
  If Not gbEnableUDFFunctions Then
    HierarchyFunctionConfigured = False
    Exit Function
  End If
  
  lngPersonnelTableID = GetModuleSetting(gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_PERSONNELTABLE, 0)
  lngHierarchyTableID = GetModuleSetting(gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_HIERARCHYTABLE, 0)
  lngIdentifyingColumnID = GetModuleSetting(gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_IDENTIFIER, 0)
  lngReportsToColumnID = GetModuleSetting(gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_REPORTSTO, 0)
  lngPostAllocationTableID = GetModuleSetting(gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_POSTALLOCATIONTABLE, 0)
  
  lngLoginColumnID = GetModuleSetting(gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_LOGINNAME, 0)
  lngSecondLoginColumnID = GetModuleSetting(gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_SECONDLOGINNAME, 0)
  
  If (lngLoginColumnID = 0) And (lngSecondLoginColumnID > 0) Then
    lngLoginColumnID = lngSecondLoginColumnID
    lngSecondLoginColumnID = 0
  End If
  
  fPostBasedSystem = (lngPersonnelTableID <> lngHierarchyTableID)
  
  Select Case plngFunctionID
    Case 68, 72   'HIER_FN_HasPersonnelSubordinateUser, _
      HIER_FN_IsPersonnelSubordinateOfUser
      fValid = (lngIdentifyingColumnID > 0) And _
        (lngReportsToColumnID > 0) And _
        (lngPersonnelTableID > 0) And _
        (lngLoginColumnID > 0) And _
        ((Not fPostBasedSystem) Or (lngPostAllocationTableID > 0))
      
    Case 66, 70  'HIER_FN_HasPostSubordinateUser, _
      HIER_FN_IsPostSubordinateOfUser
      fValid = (lngIdentifyingColumnID > 0) And _
        (lngReportsToColumnID > 0) And _
        (lngPersonnelTableID > 0) And _
        (lngLoginColumnID > 0) And _
        (fPostBasedSystem) And _
        (lngPostAllocationTableID > 0)
      
  End Select
  
  HierarchyFunctionConfigured = fValid
    
End Function

Private Function UDF_Drop(piFunction As HierarchyFunctions, _
  Optional pvPrefix As Variant) As Boolean
  ' Drop any existing UDF.
  On Error GoTo ErrorTrap
  
  Dim fOK As Boolean
  Dim sSQL As String
  Dim sUDFName As String
    
  sUDFName = ObjectName(piFunction, True, pvPrefix)
  fOK = (Len(sUDFName) > 0)
  
  If fOK Then
    sSQL = "IF EXISTS" & _
      " (SELECT Name" & _
      "   FROM sysobjects" & _
      "   WHERE id = object_id('" & sUDFName & "')" & _
      "     AND sysstat & 0xf = 0)" & _
      " DROP FUNCTION " & sUDFName
    gADOCon.Execute sSQL, , adExecuteNoRecords
  End If
  
TidyUpAndExit:
  UDF_Drop = fOK
  Exit Function
  
ErrorTrap:
  fOK = False
  OutputError "Error dropping " & _
    IIf(Len(sUDFName) = 0, "<unknown>", "'" & sUDFName & "'") & _
    " user defined function (Hierarchy)"
  Resume TidyUpAndExit

End Function



Private Function ReadParameters() As Boolean
  On Error GoTo ErrorTrap
  
  Dim fOK As Boolean
  Dim lngTempID As Long
  
  fOK = True
  
  ' Get the Hierarchy table ID and Name
  lngTempID = 0
  recModuleSetup.Index = "idxModuleParameter"
  recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_HIERARCHYTABLE
  If Not recModuleSetup.NoMatch Then
    lngTempID = recModuleSetup!parametervalue
    mvar_lngHierarchyTableID = lngTempID
    recTabEdit.Index = "idxTableID"
    recTabEdit.Seek "=", lngTempID
    If Not recTabEdit.NoMatch Then
      mvar_sHierarchyTableName = "dbo." & recTabEdit!TableName
    Else
      mvar_lngHierarchyTableID = 0
      mvar_sHierarchyTableName = vbNullString
    End If
  Else
    mvar_lngHierarchyTableID = 0
    mvar_sHierarchyTableName = vbNullString
  End If

  If mvar_fGeneralOK Then
    ' Get the Identifying column variable
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_IDENTIFIER
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngIdentifyingColumnID = lngTempID
      recColEdit.Index = "idxColumnID"
      recColEdit.Seek "=", lngTempID
      If Not recColEdit.NoMatch Then
        mvar_sIdentifyingColumnName = recColEdit!ColumnName
      Else
        mvar_lngIdentifyingColumnID = 0
        mvar_sIdentifyingColumnName = vbNullString
      End If
    Else
      mvar_lngIdentifyingColumnID = 0
      mvar_sIdentifyingColumnName = vbNullString
    End If
  
    If mvar_lngIdentifyingColumnID = 0 Then
      mvar_fGeneralOK = False
      mvar_sGeneralMsg = mvar_sGeneralMsg & vbNewLine & "  '" & mvar_sHierarchyTableName & "' table 'Identifying' column not found."
      mvar_fCollate = False
    End If
  
    mvar_sIdentifyingColumnTypeCode = IdentifyingColumnTypeCode
    mvar_fCollate = IdentifyingColumnCollate
  End If
  
  If mvar_fGeneralOK Then
    ' Get the ReportsTo column variable
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_REPORTSTO
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngReportsToColumnID = lngTempID
      recColEdit.Index = "idxColumnID"
      recColEdit.Seek "=", lngTempID
      If Not recColEdit.NoMatch Then
        mvar_sReportsToColumnName = recColEdit!ColumnName
      Else
        mvar_lngReportsToColumnID = 0
        mvar_sReportsToColumnName = vbNullString
      End If
    Else
      mvar_lngReportsToColumnID = 0
      mvar_sReportsToColumnName = vbNullString
    End If

    If mvar_lngReportsToColumnID = 0 Then
      mvar_fGeneralOK = False
      mvar_sGeneralMsg = mvar_sGeneralMsg & vbNewLine & "  '" & mvar_sHierarchyTableName & "' table 'Reports To' column not found."
    End If
  End If

  If mvar_fGeneralOK Then
    ' Set the Personnel table ID variable
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_PERSONNELTABLE
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngPersonnelTableID = lngTempID
      recTabEdit.Index = "idxTableID"
      recTabEdit.Seek "=", lngTempID
      If Not recTabEdit.NoMatch Then
        mvar_sPersonnelTableName = "dbo." & recTabEdit!TableName
      Else
        mvar_lngPersonnelTableID = 0
        mvar_sPersonnelTableName = vbNullString
      End If
    Else
      mvar_lngPersonnelTableID = 0
      mvar_sPersonnelTableName = vbNullString
    End If

    If mvar_lngPersonnelTableID = 0 Then
      mvar_fGeneralOK = False
      mvar_sGeneralMsg = mvar_sGeneralMsg & vbNewLine & "  'Personnel' table not found."
    End If
  End If
  
  If mvar_fGeneralOK Then
    ' Get the Login column in the Personnel table
    mvar_lngLoginColumnID = GetModuleSetting(gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_LOGINNAME, 0)
    mvar_lngSecondLoginColumnID = GetModuleSetting(gsMODULEKEY_PERSONNEL, gsPARAMETERKEY_SECONDLOGINNAME, 0)
    
    mvar_sLoginColumnName = vbNullString
    mvar_sSecondLoginColumnName = vbNullString
    
    If (mvar_lngLoginColumnID = 0) And (mvar_lngSecondLoginColumnID > 0) Then
      mvar_lngLoginColumnID = mvar_lngSecondLoginColumnID
      mvar_lngSecondLoginColumnID = 0
    End If
    
    If mvar_lngLoginColumnID = 0 Then
      mvar_fGeneralOK = False
      mvar_sGeneralMsg = mvar_sGeneralMsg & vbNewLine & "  '" & mvar_sPersonnelTableName & "' table 'Login' column not found."
    Else
      mvar_sLoginColumnName = GetColumnName(mvar_lngLoginColumnID, True)
      
      If mvar_lngSecondLoginColumnID > 0 Then
        mvar_sSecondLoginColumnName = GetColumnName(mvar_lngSecondLoginColumnID, True)
      End If
    End If
  End If
  
  If mvar_fGeneralOK Then
    mvar_fPostBased = (mvar_lngHierarchyTableID <> mvar_lngPersonnelTableID)

    ' Get the Post Allocation table id
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_POSTALLOCATIONTABLE
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngPostAllocationTableID = lngTempID
      recTabEdit.Index = "idxTableID"
      recTabEdit.Seek "=", lngTempID
      If Not recTabEdit.NoMatch Then
        mvar_sPostAllocationTableName = "dbo." & recTabEdit!TableName
      Else
        mvar_lngPostAllocationTableID = 0
        mvar_sPostAllocationTableName = vbNullString
      End If
    Else
      mvar_lngPostAllocationTableID = 0
      mvar_sPostAllocationTableName = vbNullString
    End If
  
    If mvar_fPostBased And (mvar_lngPostAllocationTableID = 0) Then
      mvar_fGeneralOK = False
      mvar_sGeneralMsg = mvar_sGeneralMsg & vbNewLine & "  'Post Allocation' table not found."
    End If
  End If
  
  If mvar_fGeneralOK Then
    ' Get the Start Date column in the Post Allocation table
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_POSTALLOCSTARTDATE
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngStartDateColumnID = lngTempID
      recColEdit.Index = "idxColumnID"
      recColEdit.Seek "=", lngTempID
      If Not recColEdit.NoMatch Then
        mvar_sStartDateColumnName = recColEdit!ColumnName
      Else
        mvar_lngStartDateColumnID = 0
        mvar_sStartDateColumnName = vbNullString
      End If
    Else
      mvar_lngStartDateColumnID = 0
      mvar_sStartDateColumnName = vbNullString
    End If
  
    ' Get the End Date column in the Post Allocation table
    lngTempID = 0
    recModuleSetup.Index = "idxModuleParameter"
    recModuleSetup.Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_POSTALLOCENDDATE
    If Not recModuleSetup.NoMatch Then
      lngTempID = recModuleSetup!parametervalue
      mvar_lngEndDateColumnID = lngTempID
      recColEdit.Index = "idxColumnID"
      recColEdit.Seek "=", lngTempID
      If Not recColEdit.NoMatch Then
        mvar_sEndDateColumnName = recColEdit!ColumnName
      Else
        mvar_lngEndDateColumnID = 0
        mvar_sEndDateColumnName = vbNullString
      End If
    Else
      mvar_lngEndDateColumnID = 0
      mvar_sEndDateColumnName = vbNullString
    End If
  End If
  
TidyUpAndExit:
  ReadParameters = fOK
  Exit Function
  
ErrorTrap:
  fOK = False
  OutputError "Error reading module parameters (Hierarchy)"
  Resume TidyUpAndExit

End Function

Private Function ObjectName(piFunction As HierarchyFunctions, _
  pfUDF As Boolean, _
  Optional pvPrefix As Variant) As String
  ' Return the name of the given hierarchy UDF.
  Dim sName As String
  Dim sPrefix As String
  
  sPrefix = IIf(pfUDF, "udf_ASRFn_", "spASRSysFn")
  
  If Not IsMissing(pvPrefix) Then
    sPrefix = sPrefix & CStr(pvPrefix)
  End If
  
  Select Case piFunction
    Case HIER_FN_IsPersonnelSubordinateOfUser
      sName = sPrefix & "IsPersonnelSubordinateOfUser"
    
    Case HIER_FN_IsPostSubordinateOfUser
      sName = sPrefix & "IsPostSubordinateOfUser"
    
    Case HIER_FN_HasPersonnelSubordinateUser
      sName = sPrefix & "HasPersonnelSubordinateUser"
    
    Case HIER_FN_HasPostSubordinateUser
      sName = sPrefix & "HasPostSubordinateUser"
      
  End Select

  ObjectName = sName
  
End Function



Private Function IdentifyingColumnTypeCode() As String

  Select Case IdentifyingColumnDataType
    Case sqlInteger
      IdentifyingColumnTypeCode = "integer"
      
    Case sqlNumeric
      IdentifyingColumnTypeCode = "float"
      
    Case Else
      IdentifyingColumnTypeCode = "varchar(MAX)"
  End Select

End Function

Public Function IdentifyingColumnDataType() As SQLDataType
  Dim lngIdentifyingColumnID As Long

  With recModuleSetup
    .Index = "idxModuleParameter"
    
    .Seek "=", gsMODULEKEY_HIERARCHY, gsPARAMETERKEY_IDENTIFIER
    If .NoMatch Then
      lngIdentifyingColumnID = 0
    Else
      lngIdentifyingColumnID = IIf(IsNull(!parametervalue) Or Len(!parametervalue) = 0, 0, !parametervalue)
    End If
  End With

  If lngIdentifyingColumnID = 0 Then
    IdentifyingColumnDataType = sqlUnknown
  Else
    IdentifyingColumnDataType = GetColumnDataType(lngIdentifyingColumnID)
  End If

End Function


Private Function IdentifyingColumnCollate() As Boolean

  IdentifyingColumnCollate = (IdentifyingColumnDataType = sqlVarChar)

End Function
