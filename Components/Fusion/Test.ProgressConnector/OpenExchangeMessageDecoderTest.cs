using Connector1.ProgressInterface;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using ProgressConnector.ProgressInterface;

namespace Test.ProgressConnector
{
    
    
    /// <summary>
    ///This is a test class for OpenExchangeMessageDecoderTest and is intended
    ///to contain all OpenExchangeMessageDecoderTest Unit Tests
    ///</summary>
    [TestClass()]
    public class OpenExchangeMessageDecoderTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for OpenExchangeMessageDecoder Constructor
        ///</summary>
        [TestMethod()]
        public void OpenExchangeMessageDecoderConstructorTest()
        {
            OpenExchangeMessageDecoder target = new OpenExchangeMessageDecoder();

        }

        /// <summary>
        ///A test for Decode
        ///</summary>
        [TestMethod()]
        public void Decode__Test__DefaultGeneratedFromXmlSpy()
        {
            OpenExchangeMessageDecoder target = new OpenExchangeMessageDecoder(); // TODO: Initialize to an appropriate value

            RawOpenExchangeData data = new RawOpenExchangeData
            {
                MessageRequestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<!--Sample XML file generated by XMLSpy v2011 rel. 2 (x64) (http://www.altova.com)-->
<fusionMessage xmlns=""http://advancedcomputersoftware.com/xml/fusion"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	<messageType>a</messageType>
	<id>10000000-0000-0000-0000-000000000000</id>
	<originator>String</originator>
	<payload>
		<probably_invalid_for_strict_wildcard xmlns=""""/>
	</payload>
	<created>2001-12-17T09:30:47Z</created>
	<schemaVersion>1</schemaVersion>
	<entityRef>20000000-0000-0000-0000-000000000000</entityRef>
</fusionMessage>"
            };

            OpenExchangeMessage message = (OpenExchangeMessage) target.Decode(data);

            Assert.AreEqual(message.MessageType, "a");
            Assert.AreEqual(message.Id, new Guid ("10000000-0000-0000-0000-000000000000"));
            Assert.AreEqual(message.Originator, "String");
            Assert.AreEqual(message.Created, new DateTime(2001, 12, 17, 09, 30, 47, DateTimeKind.Utc));
            Assert.AreEqual(message.SchemaVersion, 1);
            Assert.AreEqual(message.EntityRef, new Guid ("20000000-0000-0000-0000-000000000000"));
        }


        /// <summary>
        ///A test for Decode
        ///</summary>
        [TestMethod()]
        public void Decode__Test_GeneratedFromOpenExchange()
        {
            OpenExchangeMessageDecoder target = new OpenExchangeMessageDecoder(); // TODO: Initialize to an appropriate value

            RawOpenExchangeData data = new RawOpenExchangeData
            {
                MessageRequestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<fusionMessage xsi:schemaLocation=""http://advancedcomputersoftware.com/xml/fusion fusionMessage.xsd"" xmlns=""http://advancedcomputersoftware.com/xml/fusion"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	<messageType>COSTCENTRE CHANGE</messageType>
	<id>98983fed-caea-d7a2-e111-011c5fa4ed61</id>
	<originator>OpenAccounts</originator>
	<payload>
		<guid>f27edb57-1079-91ab-e111-691be7c44428</guid>
        <company>500</company>
        <costcentre>10-10</costcentre>
        <name>MPH09:46:40</name>
        <abbname>M09:46:40</abbname>
	</payload>
	<created>2011-12-01T09:46:46.133+00:00</created>
	<schemaVersion>001</schemaVersion>
	<entityRef>f27edb57-1079-91ab-e111-691be7c44428</entityRef>
</fusionMessage>
"
            };

            OpenExchangeMessage message = (OpenExchangeMessage) target.Decode(data);

            Assert.AreEqual(message.MessageType, "COSTCENTRE CHANGE");
            Assert.AreEqual(message.Id, new Guid("98983fed-caea-d7a2-e111-011c5fa4ed61"));
            Assert.AreEqual(message.Originator, "OpenAccounts");
            Assert.AreEqual(message.Created, new DateTime(2011, 12, 01, 09, 46, 46, 133, DateTimeKind.Utc));
            Assert.AreEqual(message.SchemaVersion, 1);
            Assert.AreEqual(message.EntityRef, new Guid("f27edb57-1079-91ab-e111-691be7c44428"));
        }

        /// <summary>
        ///A test for Decode
        ///</summary>
        [TestMethod()]
        public void Decode__Test_OptionalEntityRef()
        {
            OpenExchangeMessageDecoder target = new OpenExchangeMessageDecoder(); // TODO: Initialize to an appropriate value

            RawOpenExchangeData data = new RawOpenExchangeData
            {
                MessageRequestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<fusionMessage xsi:schemaLocation=""http://advancedcomputersoftware.com/xml/fusion fusionMessage.xsd"" xmlns=""http://advancedcomputersoftware.com/xml/fusion"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	<messageType>COSTCENTRE CHANGE</messageType>
	<id>98983fed-caea-d7a2-e111-011c5fa4ed61</id>
	<originator>OpenAccounts</originator>
	<payload>
		<guid>f27edb57-1079-91ab-e111-691be7c44428</guid>
        <company>500</company>
        <costcentre>10-10</costcentre>
        <name>MPH09:46:40</name>
        <abbname>M09:46:40</abbname>
	</payload>
	<created>2011-12-01T09:46:46.133+00:00</created>
	<schemaVersion>001</schemaVersion>
</fusionMessage>
"
            };

            OpenExchangeMessage message = (OpenExchangeMessage)target.Decode(data);

            Assert.IsFalse(message.EntityRef.HasValue);
        }

        /// <summary>
        ///A test for Decode
        ///</summary>
        [TestMethod()]
        public void Decode__Test_LogMessage()
        {
            OpenExchangeMessageDecoder target = new OpenExchangeMessageDecoder(); // TODO: Initialize to an appropriate value

            RawOpenExchangeData data = new RawOpenExchangeData
            {
                MessageRequestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<fusionLog xmlns=""http://advancedcomputersoftware.com/xml/fusion"">
  
  <!-- id for this log entry (ie new guid) -->
  <id></id>
  
  <!-- source connector identifier -->
  <source>    
  </source>
  
  <!-- Optional message id of fusion log message -->
  <messageId>
    
  </messageId>
  <!-- Optional entity ref-->
  <entityRef>
    
  </entityRef>
  
  <!-- time of message generation-->
  <timeUtc>
    
  </timeUtc>
  <!-- Can be one of
        Info, 
        Warning, 
        Error,
        Fatal
  -->
  <logLevel>
    
  </logLevel>
  
  <!-- log message to write -->
  <message>
    
  </message>
  
  <!-- Optional description of the fusion message this log message is about-->
  <messageDescription>
    
  </messageDescription>

  <!-- community -->
  <community>
    
  </community>
 
</fusionLog>
"
            };

            OpenExchangeMessage message = (OpenExchangeMessage) target.Decode(data);

            
        }

    }
}
