Imports SystemFramework.Enums
Imports SystemFramework.Enums.Errors

Namespace ScriptDB

  Public Module ScriptFunctions

    Public Function ConvertCurrency() As Boolean

      Dim bOk As Boolean = True
      Dim sSql As String
      Dim objConversionTable As Table
      Dim objNameColumn As Column
      Dim objValueColumn As Column
      Dim objDecimalsColumn As Column
      Dim iKeyId As Integer
      Dim sObjectName As String

      Try
        objConversionTable = ModuleSetup.Setting("MODULE_CURRENCY", "Param_ConversionTable").Table

        If Not objConversionTable Is Nothing Then
          iKeyId = CInt(ModuleSetup.Setting("MODULE_CURRENCY", "Param_CurrencyNameColumn").Value)
          objNameColumn = objConversionTable.Columns.GetById(iKeyId)

          iKeyId = CInt(ModuleSetup.Setting("MODULE_CURRENCY", "Param_ConversionValueColumn").Value)
          objValueColumn = objConversionTable.Columns.GetById(iKeyId)

          iKeyId = CInt(ModuleSetup.Setting("MODULE_CURRENCY", "Param_DecimalColumn").Value)
          objDecimalsColumn = objConversionTable.Columns.GetById(iKeyId)

          sObjectName = "udfsys_convertcurrency"
          If Not objValueColumn Is Nothing And Not objDecimalsColumn Is Nothing Then
            sSql = String.Format("/* ------------------------------------------------- */" & vbNewLine & _
                    "/* OpenHR Currency module user defined function.                  */" & vbNewLine & _
                    "/* Automatically generated by the Advanced DB Scripting Engine.   */" & vbNewLine & _
                    "/* -------------------------------------------------------------- */" & vbNewLine & _
                    "CREATE FUNCTION dbo.[{0}] (" & vbNewLine & _
                    "   @currency numeric(38,8)," & vbNewLine & _
                    "   @from {5}," & vbNewLine & _
                    "   @to {5})" & vbNewLine & _
                    "RETURNS numeric(38,8)" & vbNewLine & _
                    "AS " & vbNewLine & _
                    "BEGIN" & vbNewLine & vbNewLine & _
                    "    DECLARE @result numeric(38,8);" & vbNewLine & _
                    "    SELECT @result = ROUND(ISNULL((@currency / NULLIF((SELECT [{2}] FROM dbo.[{1}] WHERE [{3}] = @from),0))" & vbNewLine &
                    "                      * " & vbNewLine & _
                    "                     (SELECT [{2}] FROM dbo.[{1}] WHERE [{3}] = @to), 0)," & vbNewLine & _
                    "                         ISNULL((SELECT [{4}] FROM dbo.[{1}] WHERE [{3}] = @to), 0))" & vbNewLine & vbNewLine & _
                    "    RETURN ISNULL(@result,0);" & vbNewLine & _
                    "END", sObjectName, objConversionTable.Name, objValueColumn.Name, objNameColumn.Name, objDecimalsColumn.Name _
                      , objNameColumn.DataTypeSyntax)
            Script.DropUdf("dbo", sObjectName)
            bOk = CommitDb.ScriptStatement(sSql, True)
          End If

        End If

      Catch ex As Exception
        bOk = False

      End Try


      Return bOk

    End Function

    Public Function GetFieldFromDatabases(functionDataType As ComponentValueTypes) As Boolean

      Dim bOk As Boolean
      Dim sObjectName As String
      Dim sSql As String = vbNullString
      Dim sStatement As String
      Dim aryStatements As New ArrayList
      Dim objComponent As Component
      Dim objPart1 As Component
      Dim objPart3 As Component
      Dim objTable1 As Table
      Dim objTable2 As Table
      Dim objIndex As Index
      Dim sSearchExpression As String
      Dim objColumn As Column
      Dim bFound As Boolean
      Dim sReturnType As String
      Dim sSafeReturnType As String
      Dim bProcess As Boolean
      Dim returnColumnType As ColumnTypes

      Try

        ' Return types
        Select Case functionDataType
          Case ComponentValueTypes.Date
            sObjectName = "udfsys_getfieldfromdatabaserecord_datetime"
            sReturnType = "datetime"
            sSafeReturnType = "NULL"
          Case ComponentValueTypes.Numeric
            sObjectName = "udfsys_getfieldfromdatabaserecord_numeric"
            sReturnType = "numeric(38,8)"
            sSafeReturnType = "0"
          Case ComponentValueTypes.Logic
            sObjectName = "udfsys_getfieldfromdatabaserecord_bit"
            sReturnType = "bit"
            sSafeReturnType = "0"
          Case Else
            sObjectName = "udfsys_getfieldfromdatabaserecord_string"
            sReturnType = "varchar(255)"
            sSafeReturnType = "''"
        End Select

        For Each objComponent In GetFieldsFromDb

          ' The parameters as down a couple of component levels 
          objPart1 = objComponent.Components(0).Components(0)
          objPart3 = objComponent.Components(2).Components(0)
          objTable1 = Tables.GetById(objPart1.TableId)
          objTable2 = Tables.GetById(objPart3.TableId)

          objColumn = objTable1.Columns.GetById(objPart3.ColumnId)
          If Not objColumn Is Nothing Then

            returnColumnType = objTable1.Columns.GetById(objPart3.ColumnId).DataType

            Select Case functionDataType
              Case ComponentValueTypes.Date
                bProcess = (returnColumnType = ColumnTypes.Date)
              Case ComponentValueTypes.Numeric
                bProcess = (returnColumnType = ColumnTypes.Numeric Or returnColumnType = ColumnTypes.Integer)
              Case ComponentValueTypes.Logic
                bProcess = (returnColumnType = ColumnTypes.Logic)
              Case Else
                bProcess = (returnColumnType = ColumnTypes.Text Or returnColumnType = ColumnTypes.WorkingPattern)
            End Select

            If bProcess Then

              ' Make integers typesafe
              Select Case objTable1.Columns.GetById(objPart1.ColumnId).DataType
                Case ColumnTypes.Integer
                  sSearchExpression = "convert(numeric(38,8), @searchexpression)"
                Case Else
                  sSearchExpression = "@searchexpression"
              End Select

              ' Even though the user can select different table for parameters 1 and 3 this
              ' would return garbage data so ignore it!
              If objTable1 Is objTable2 Then
                sStatement = String.Format("    IF @searchcolumnid = '{0}-{1}' AND @returncolumnid = '{2}-{3}'" & vbNewLine & _
                  "        SELECT @result = [{5}] FROM dbo.[{4}] WHERE [{6}] = {7};" & vbNewLine _
                , objPart1.TableId.ToString.PadLeft(8, "0"c), objPart1.ColumnId.ToString.PadLeft(8, "0"c) _
                , objPart3.TableId.ToString.PadLeft(8, "0"c), objPart3.ColumnId.ToString.PadLeft(8, "0"c) _
                , objTable1.Name, objTable1.Columns.GetById(objPart3.ColumnId).Name _
                , objTable2.Columns.GetById(objPart1.ColumnId).Name, sSearchExpression)

                ' Only add if not already done so
                If Not aryStatements.Contains(sStatement) Then

                  aryStatements.Add(sStatement)

                  ' Put an index on this column
                  bFound = False
                  For Each objIndex In objTable1.Indexes
                    If objIndex.Columns.Count > 0 Then
                      If objIndex.Columns(0) Is objTable1.Columns.GetById(objPart1.ColumnId) Then
                        bFound = True
                        Exit For
                      End If
                    End If
                  Next

                  If Not bFound Then
                    objIndex = New Index
                    objIndex.Name = String.Format("IDX_getfromdb_{0}", objTable1.Columns.GetById(objPart1.ColumnId).Name)
                    objIndex.Columns.Add(objTable1.Columns.GetById(objPart1.ColumnId))
                    objIndex.IncludePrimaryKey = False
                    objIndex.IsTableIndex = True
                  End If

                  objIndex.IncludedColumns.AddIfNew(objTable2.Columns.GetById(objPart3.ColumnId))

                  If Not bFound And Not objIndex.Columns(0).Multiline Then
                    objTable1.Indexes.Add(objIndex)
                  End If

                End If
              End If
            End If
          End If

        Next

        ' Build the stored procedure
        sSql = String.Format("CREATE FUNCTION [dbo].[{0}](" & vbNewLine &
            "    @searchcolumnid AS varchar(17)," & vbNewLine & _
            "    @searchexpression AS varchar(255)," & vbNewLine & _
            "    @returncolumnid AS varchar(17))" & vbNewLine & _
            "RETURNS {2}" & vbNewLine & _
            "AS" & vbNewLine & "BEGIN" & vbNewLine & _
            "    DECLARE @result {2}" & vbNewLine & _
            "    SET @result = {3};" & vbNewLine & _
            "{1}" & vbNewLine & _
            "    RETURN ISNULL(@result,{3});" & vbNewLine & _
            "END" _
            , sObjectName, String.Join(vbNewLine, aryStatements.ToArray()), sReturnType, sSafeReturnType)

        Script.DropUdf("dbo", sObjectName)
        bOk = CommitDb.ScriptStatement(sSql, True)

      Catch ex As Exception
        ErrorLog.Add(Section.Triggers, sObjectName, Severity.Error, ex.Message, sSql)
        bOk = False
      End Try

      Return bOk

    End Function

    'Public Function GeneratePerformanceIndexes() As Boolean

    '  Dim bOK As Boolean = True
    '  Dim objColumn As Column

    '  Try
    '    For Each objColumn In Globals.PerformanceIndexes

    '      ScriptIndex(objColumn, False, True)
    '    Next

    '  Catch ex As Exception
    '    bOK = False

    '  End Try

    '  Return bOK

    'End Function

    'Public Function ScriptIndex(ByVal Column As Column, ByVal Clustered As Boolean, ByVal IncludeForeignKey As Boolean) As Boolean

    '  Dim bOK As Boolean
    '  Dim sSQL As String = String.Empty
    '  Dim sColumns As String
    '  Dim objRelation As Relation

    '  Try

    '    sColumns = Column.Name

    '    If IncludeForeignKey Then
    '      For Each objRelation In Column.Table.Objects(Type.Relation)
    '        If objRelation.RelationshipType = RelationshipType.Parent Then
    '          sColumns = sColumns & ", ID_" & objRelation.ParentID
    '        End If
    '      Next
    '    End If

    '    ' Create the new index
    '    sSQL = String.Format("IF EXISTS(SELECT [id] FROM sysindexes WHERE [name] = 'IDX_{1}_{0}')" & _
    '        " DROP INDEX [IDX_{1}_{0}] ON [dbo].[{3}];" & _
    '        " CREATE NONCLUSTERED INDEX [IDX_{1}_{0}] ON [dbo].[{3}] ({2});" & vbNewLine _
    '        , Column.Name, Column.Table.Name, sColumns, Column.Table.PhysicalName)
    '    Globals.CommitDB.ScriptStatement(sSQL)

    '  Catch ex As Exception
    '    Globals.ErrorLog.Add(HRProEngine.ErrorHandler.Section.Views, Column.Table.Name & "--" & Column.Name, HRProEngine.ErrorHandler.Severity.Error, ex.Message, sSQL)
    '    bOK = False

    '  End Try

    '  Return bOK

    'End Function

    'Public Function BankHolidayUpdate() As Boolean

    '  Dim bOK As Boolean = True
    '  Dim sSQL As String = vbNullString
    '  Dim objBankHolidayTable As Table
    '  Dim objHolidayDateColumn As Column
    '  Dim objUpdateColumn As Column
    '  Dim iKeyID As Integer
    '  Dim sObjectName As String
    '  Dim aryUpdates As New ArrayList

    '  Try

    '    objBankHolidayTable = Globals.ModuleSetup.Setting("MODULE_ABSENCE", "Param_TableBHol").Table
    '    If Not objBankHolidayTable Is Nothing Then
    '      iKeyID = Globals.ModuleSetup.Setting("MODULE_ABSENCE", "Param_FieldBHolDate").Value
    '      objHolidayDateColumn = objBankHolidayTable.Column(iKeyID)
    '    End If

    '    For Each objUpdateColumn In Globals.OnBankHolidayUpdate
    '      aryUpdates.Add(String.Format(" --   UPDATE dbo.[{0}] SET [{1}] = [{1}] WHERE @bankholidaydate BETWEEN [{2}] AND [{3}]" _
    '        , objUpdateColumn.Table.PhysicalName, objUpdateColumn.Name, "start_date", "end_date"))
    '    Next

    '    sObjectName = "spsys_updatebankholiday"
    '    sSQL = String.Format("/* -------------------------------------------------------------- */" & vbNewLine & _
    '            "/* OpenHR Bank Holiday Module.                                    */" & vbNewLine & _
    '            "/* Automatically generated by the Advanced DB Scripting Engine.   */" & vbNewLine & _
    '            "/* -------------------------------------------------------------- */" & vbNewLine & _
    '            "CREATE PROCEDURE dbo.[{0}] (@bankholidaydate datetime)" & vbNewLine & _
    '            "AS " & vbNewLine & _
    '            "BEGIN" & vbNewLine & vbNewLine & _
    '            "    DECLARE @icount integer;" & vbNewLine & vbNewLine & _
    '            "{1}" & vbNewLine & _
    '            "END", sObjectName, String.Join(vbNewLine, aryUpdates.ToArray()))
    '    ScriptDB.DropProcedure("dbo", sObjectName)
    '    bOK = CommitDB.ScriptStatement(sSQL)


    '  Catch ex As Exception
    '    bOK = False

    '  End Try

    '  Return bOK

    'End Function

  End Module


End Namespace
