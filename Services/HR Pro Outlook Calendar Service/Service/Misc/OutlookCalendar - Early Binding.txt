Imports System.Globalization
Imports Outlook = Microsoft.Office.Interop.Outlook

Public Class OutlookCalendar

#Region "Declarations"

    Private _olOutlook As Outlook._Application
    Private _olNS As Outlook._NameSpace

    Private _createNewApp As Boolean = False
    Private _loggedOn As Boolean = False
    Private _dateFormat As String = String.Empty
    Private _errorMessage As String = String.Empty
    Private _storeID As String = String.Empty
    Private _entryID As String = String.Empty
    Private _reminder As Boolean = False
    Private _reminderOffset As Long = 0
    Private _reminderPeriod As Long = 0
    Private _allDayEvent As Boolean = False
    Private _startDate As DateTime
    Private _endDate As DateTime
    Private _startTime As String = String.Empty
    Private _endTime As String = String.Empty
    Private _subject As String = String.Empty
    Private _content As String = String.Empty
    Private _busyStatus As Long = 0
    Private _folder As String = String.Empty

#End Region

    Public Function Logon(ByVal profile As String, ByVal password As String) As Boolean

        Try
            If _olOutlook Is Nothing Then
                _createNewApp = True
                _olOutlook = New Outlook.Application()
            End If

            _olNS = _olOutlook.Session

            If profile.Trim() = String.Empty Then
                _olNS.Logon(, , False, False)
            Else
                _olNS.Logon(profile, password, False, True)
            End If

            _dateFormat = DateFormat()
        Catch ex As Exception
            _errorMessage = ex.Message
            _loggedOn = False
            Return _loggedOn
        End Try

        _loggedOn = True
        Return _loggedOn

    End Function

    Public Function CreateEntry() As Boolean

        Dim olCalendar As Outlook.MAPIFolder
        Dim olEvent As Outlook.AppointmentItem

        If _olNS Is Nothing Then
            _errorMessage = "Outlook Logon failed"
            Return False
        End If

        If _startDate.ToString() = String.Empty Then
            _errorMessage = "No start date entered"
            Return False
        End If

        If Not _allDayEvent Then
            If Not _startTime Like "##:##" Then
                _errorMessage = String.Concat("Invalid Start Time <", _startTime, ">")
                Return False
            End If
            If Not (_endTime Like "##:##") Then
                _errorMessage = String.Concat("Invalid End Time <", _endTime, ">")
                Return False
            End If
        End If

        _errorMessage = String.Empty

        Try
            olCalendar = GetFolderFromPath(_folder)

            If olCalendar Is Nothing Then
                _errorMessage = "Unable to obtain a valid Calendar path from :- " & _folder
            End If

            If _errorMessage <> String.Empty Then
                Return False
            End If

            olEvent = CType(olCalendar.Items.Add(Outlook.OlItemType.olAppointmentItem), Outlook.AppointmentItem)

            With olEvent
                If _allDayEvent Then
                    .AllDayEvent = True
                    .Start = _startDate
                    'If no times are specified then outlook correctly finishes at midnight
                    'but does not include the end date.  For OpenHR we need to the event to
                    'be inclusive of both the start date and end date so if its an all day
                    'event add one day to the end date.
                    .End = _endDate.AddDays(1)
                Else
                    .AllDayEvent = False
                    _startDate = CDate(_startDate.Date.ToString(_dateFormat) & " " & _startTime)
                    .Start = _startDate
                    _endDate = CDate(_endDate.ToString(_dateFormat) & " " & _endTime)
                    .End = _endDate
                End If
                .Subject = _subject
                .Body = _content
                .BusyStatus = CType(_busyStatus, Outlook.OlBusyStatus)
                .ReminderSet = _reminder
                If _reminder Then
                    .ReminderMinutesBeforeStart = CInt(_reminderOffset) * CInt(Choose(_reminderPeriod + 1, 1, 1440, 10080, 40240))
                End If

                .Save()

                _storeID = olCalendar.StoreID
                _entryID = .EntryID
            End With
        Catch ex As Exception
            _errorMessage = ex.Message
            Return False
        Finally
            olEvent = Nothing
            olCalendar = Nothing
        End Try

        Return True
    End Function

    Public Function DeleteEntry() As Boolean

        Dim olEvent As Outlook.AppointmentItem = Nothing

        Try
            olEvent = CType(_olNS.GetItemFromID(_entryID, _storeID), Outlook.AppointmentItem)
            olEvent.Delete()
            olEvent = Nothing
        Catch ex As Exception
            _errorMessage = ex.Message
            Return False
        Finally
            olEvent = Nothing
        End Try

        Return True
    End Function

    Private Function GetFolderFromPath(ByVal path As String) As Outlook.MAPIFolder

        Dim olFolder As Outlook.MAPIFolder = Nothing
        Dim olTempFolder As Outlook.MAPIFolder = Nothing

        Dim pathArray() As String
        Dim tempPath As String = String.Empty

        Try
            pathArray = path.Split("\"c)

            For count As Integer = 0 To pathArray.Length - 1
                If pathArray(count) <> String.Empty Then
                    If olFolder Is Nothing Then
                        For Each olTempFolder In _olNS.Folders
                            If olTempFolder.Name.ToLower().Trim() = pathArray(count).ToLower().Trim() Then
                                olFolder = olTempFolder
                                Exit For
                            End If
                        Next
                    Else
                        For Each olTempFolder In olFolder.Folders
                            If olTempFolder.Name.ToLower().Trim() = pathArray(count).ToLower().Trim() Then
                                olFolder = olTempFolder
                                Exit For
                            End If
                        Next
                    End If
                End If
            Next
            Return olFolder
        Catch ex As Exception
            _errorMessage = ex.Message
            Return Nothing
        Finally
            olTempFolder = Nothing
            olFolder = Nothing
        End Try
    End Function

    Public Function Quit() As Boolean

        Try
            _olNS.Logoff()

            If _createNewApp Then
                _olOutlook.Quit()
            End If

            _loggedOn = False

            _olNS = Nothing
            _olOutlook = Nothing

            GC.Collect()
            GC.WaitForPendingFinalizers()

        Catch ex As Exception
            _errorMessage = ex.Message
            Return False
        End Try

        Return True
    End Function

    Private Function DateFormat() As String
        ' NB. Windows allows the user to configure totally stupid
        ' date formats (eg. d/M/yyMydy !). This function does not cater
        ' for such stupidity, and simply takes the first occurence of the
        ' 'd', 'M', 'y' characters.
        Dim sysFormat As String = String.Empty
        Dim sysDateSeparator As String = String.Empty
        Dim sysDateFormat As String = String.Empty
        Dim daysDone As Boolean = False
        Dim monthsDone As Boolean = False
        Dim yearsDone As Boolean = False

        sysFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern
        sysDateSeparator = CultureInfo.CurrentCulture.DateTimeFormat.DateSeparator

        ' Loop through the string picking out the required characters.
        For iLoop As Integer = 0 To sysFormat.Length - 1

            Select Case sysFormat.Substring(iLoop, 1)
                Case "d"
                    If Not daysDone Then
                        ' Ensure we have two day characters.
                        sysDateFormat &= "dd"
                        daysDone = True
                    End If

                Case "M"
                    If Not monthsDone Then
                        ' Ensure we have two month characters.
                        sysDateFormat &= "MM"
                        monthsDone = True
                    End If

                Case "y"
                    If Not yearsDone Then
                        ' Ensure we have four year characters.
                        sysDateFormat &= "yyyy"
                        yearsDone = True
                    End If

                Case Else
                    sysDateFormat &= sysFormat.Substring(iLoop, 1)
            End Select

        Next iLoop

        ' Ensure that all day, month and year parts of the date
        ' are present in the format.
        If Not daysDone Then
            If sysDateFormat.Substring(sysDateFormat.Length - 1, 1) <> sysDateSeparator Then
                sysDateFormat &= sysDateSeparator
            End If

            sysDateFormat &= "dd"
        End If

        If Not monthsDone Then
            If sysDateFormat.Substring(sysDateFormat.Length - 1, 1) <> sysDateSeparator Then
                sysDateFormat &= sysDateSeparator
            End If

            sysDateFormat &= "MM"
        End If

        If Not yearsDone Then
            If sysDateFormat.Substring(sysDateFormat.Length - 1, 1) <> sysDateSeparator Then
                sysDateFormat &= sysDateSeparator
            End If

            sysDateFormat &= "yyyy"
        End If

        ' Return the date format.
        Return sysDateFormat

    End Function

    Public Function ResetStoreAndEntry() As Boolean
        _storeID = String.Empty
        _entryID = String.Empty

        Return True
    End Function

#Region "Properties"

    Public ReadOnly Property LoggedOn() As Boolean
        Get
            Return _loggedOn
        End Get
    End Property

    Public ReadOnly Property ErrorMessage() As String
        Get
            Return _errorMessage
        End Get
    End Property

    Public Property StoreID() As String
        Get
            Return Me._storeID
        End Get
        Set(ByVal value As String)
            Me._storeID = value
        End Set
    End Property

    Public Property EntryID() As String
        Get
            Return Me._entryID
        End Get
        Set(ByVal value As String)
            Me._entryID = value
        End Set
    End Property

    Public WriteOnly Property Reminder() As Boolean
        Set(ByVal value As Boolean)
            _reminder = value
        End Set
    End Property

    Public WriteOnly Property ReminderOffset() As Long
        Set(ByVal value As Long)
            _reminderOffset = value
        End Set
    End Property

    Public WriteOnly Property ReminderPeriod() As Long
        Set(ByVal value As Long)
            _reminderPeriod = value
        End Set
    End Property

    Public WriteOnly Property AllDayEvent() As Boolean
        Set(ByVal value As Boolean)
            _allDayEvent = value
        End Set
    End Property

    Public Property StartDate() As DateTime
        Get
            Return _startDate
        End Get
        Set(ByVal value As DateTime)
            _startDate = value
            _endDate = _startDate
        End Set
    End Property

    Public Property EndDate() As DateTime
        Get
            Return _endDate
        End Get
        Set(ByVal value As DateTime)
            _endDate = value
        End Set
    End Property

    Public WriteOnly Property StartTime() As String
        Set(ByVal value As String)
            _startTime = value
        End Set
    End Property

    Public WriteOnly Property EndTime() As String
        Set(ByVal value As String)
            _endTime = value
        End Set
    End Property

    Public Property Subject() As String
        Get
            Return _subject
        End Get
        Set(ByVal value As String)
            _subject = value
        End Set
    End Property

    Public WriteOnly Property Content() As String
        Set(ByVal value As String)
            _content = value
        End Set
    End Property

    Public WriteOnly Property BusyStatus() As Long
        Set(ByVal value As Long)
            _busyStatus = value
        End Set
    End Property

    Public Property Folder() As String
        Get
            Return _folder
        End Get
        Set(ByVal value As String)
            _folder = value
        End Set
    End Property

#End Region

End Class
